Start function seasonder_v6_skip_transformation
\name{seasonder_v6_skip_transformation}
\alias{seasonder_v6_skip_transformation}
\title{Trigger Restart for Skipping Transformation}
\usage{
seasonder_v6_skip_transformation(cond, value)
}
\arguments{
\item{cond}{The condition object that triggered the restart.}

\item{value}{The provided value to be used when the transformation is skipped.}
}
\value{
This function does not have a standard return value. Instead, it triggers a restart
that can be caught by an enclosing context to handle the error and decide how to proceed.
}
\description{
This function provides a mechanism to invoke a restart during the reading and
transformation process of the SeaSonde CS File Version 6 header. It allows users
to skip transformations that may have caused errors and proceed with a provided value.
}
\details{
This function specifically triggers the \code{seasonder_v6_skip_transformation} restart
that allows for skipping a block transformation in the reading process of the
SeaSonde CS File Version 6 header. When triggered, it logs an error message,
skips the problematic transformation, and returns the provided value for the block.
}
\section{Integration with SeaSonde CS File Reading}{


The restart mechanism of this function is integrated within the
\code{seasonder_readSeaSondeCSFileHeaderV6} function. If an error occurs during
the transformation process of a specific block, the restart provides users with
an option to skip the problematic transformation and proceed with a fallback value.
}

\seealso{
\code{\link{seasonder_readSeaSondeCSFileHeaderV6}} for the primary function where
this restart mechanism is used.
}
End function seasonder_v6_skip_transformation

Start function seasonder_rerun_qc_with_fun
\name{seasonder_rerun_qc_with_fun}
\alias{seasonder_rerun_qc_with_fun}
\title{Structured Restart for Quality Control}
\usage{
seasonder_rerun_qc_with_fun(cond, qc_fun)
}
\arguments{
\item{cond}{The condition object captured during the execution of the
\code{read_and_qc_field} function.}

\item{qc_fun}{An alternate quality control function to apply. This function should accept
the value from the field as its sole argument and return a QC-applied value.}
}
\value{
The value returned by the alternate QC function \code{qc_fun}.
}
\description{
Provides a structured restart mechanism to rerun the quality control (QC) function
with an alternative function during the execution of \code{read_and_qc_field}.
This allows for a flexible error recovery strategy when the initial QC function fails
or is deemed inadequate.
}
\details{
This function is meant to be used within custom condition handlers for the
\code{read_and_qc_field} function.
}
\seealso{
\code{\link{read_and_qc_field}} for more details on how this function fits
into the error recovery mechanism of reading and quality control process.
}
End function seasonder_rerun_qc_with_fun

Start function seasonder_skip_cs_field
\name{seasonder_skip_cs_field}
\alias{seasonder_skip_cs_field}
\title{Skip Reading a CSField and Return a Specified Value}
\usage{
seasonder_skip_cs_field(cond, value)
}
\arguments{
\item{cond}{A condition or error that occurred while reading the CSField.}

\item{value}{The desired return value to use in place of the CSField reading that encountered an error.}
}
\value{
Returns the value specified by the \code{value} parameter.
}
\description{
This function is a convenience mechanism to invoke the \code{seasonder_skip_cs_field} restart option. It can be used in custom condition handlers when reading a CSField from a binary connection encounters an error or condition. When called, it indicates the intention to skip reading the current CSField and return a specific value.
}
\details{
During the execution of the \code{seasonder_readCSField} function, errors or conditions can occur. To provide a structured mechanism to handle such cases, the function utilizes the \code{rlang::withRestarts} mechanism, offering a restart option named \code{seasonder_skip_cs_field}. This restart allows the function to gracefully handle reading errors by logging a relevant error message and returning a specified value.

The \code{seasonder_skip_cs_field} function provides an easy way to invoke this restart. When called within a custom condition handler, it signals the intention to skip the current CSField reading due to an error and specifies a return value.
}
\seealso{
\code{\link{seasonder_readCSField}} for the primary function that utilizes this restart mechanism.
}
End function seasonder_skip_cs_field

Start function seasonder_skip_cs_file
\name{seasonder_skip_cs_file}
\alias{seasonder_skip_cs_file}
\title{Skip SeaSonde Cross Spectra (CS) File Reading}
\usage{
seasonder_skip_cs_file(cond)
}
\arguments{
\item{cond}{The condition or error that occurred during the file reading process. This is used
to log a detailed error message indicating the reason for skipping the file.}
}
\value{
If invoked, the function returns a list with both \code{header} and \code{data} set to NULL.
}
\description{
This function serves as a restart for \code{seasonder_readSeaSondeCSFile}. When invoked, it provides a
mechanism to gracefully handle file reading errors by logging an error message and skipping the current file processing.
}
\details{
This function is meant to be used within a custom condition handler. When a problematic condition
arises during the processing of a SeaSonde CS file, you can call \code{seasonder_skip_cs_file(cond)} to
trigger this restart, which allows for a graceful degradation by logging an error message and skipping the file.

The effect of invoking this restart is twofold:
\enumerate{
\item An error message detailing the reason for skipping the file is logged.
\item The calling function (\code{seasonder_readSeaSondeCSFile}) will immediately return a list with \code{header=NULL} and \code{data=NULL}.
}
}
\seealso{
\code{\link{seasonder_readSeaSondeCSFile}},
}
End function seasonder_skip_cs_file

