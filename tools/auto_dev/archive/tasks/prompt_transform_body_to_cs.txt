El objetivo es crear una función auxiliar seasonder_CSSY2CSData, que será llamada por seasonder_readSeaSondeRCSSYFile, y cuya misión es transformar la estructura del body del fichero CSSY a una estructura de matrices valida para crear un objeto SeaSondeRCS.



La estructura de body del fichero CSSY es la siguiente

```

List of 63
 $ :List of 23
  ..$ indx:List of 1
  .. ..$ index: int 1
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -57.9
  .. ..$ fmax  : num -42949732
  .. ..$ fscale: num 4.29e+09
  ..$ cs1a: int [1:1024] 6095 5681 5747 6223 6182 6104 5817 6285 5658 5968 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -58.5
  .. ..$ fmax  : num -42949732
  .. ..$ fscale: num 4.29e+09
  ..$ cs2a: int [1:1024] 5569 5838 5433 6119 5855 5555 5605 5818 5806 5830 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -50.2
  .. ..$ fmax  : num -42949724
  .. ..$ fscale: num 4.29e+09
  ..$ cs3a: int [1:1024] 7035 6999 6849 6668 6921 7027 6777 6629 6596 6926 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -55.2
  .. ..$ fmax  : num -42949728
  .. ..$ fscale: num 4.29e+09
  ..$ c13r: int [1:1024] 7109 7806 6651 7258 6689 6861 6637 8034 6302 6581 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -56
  .. ..$ fmax  : num -42949728
  .. ..$ fscale: num 4.29e+09
  ..$ c13i: int [1:1024] 7254 7213 6791 6906 7266 7535 7632 6726 6595 7674 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -77.5
  .. ..$ fmax  : num -42949752
  .. ..$ fscale: num 4.29e+09
  ..$ c23r: int [1:1024] 4422 4955 4842 5091 4760 4864 4351 4776 4172 4228 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -54.3
  .. ..$ fmax  : num -42949728
  .. ..$ fscale: num 4.29e+09
  ..$ c23i: int [1:1024] 6599 6674 6633 6767 8740 7143 6336 6998 6652 7465 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -60.1
  .. ..$ fmax  : num -42949732
  .. ..$ fscale: num 4.29e+09
  ..$ c12r: int [1:1024] 6318 6444 5473 6696 6335 6821 6893 6419 5949 6051 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num -59.4
  .. ..$ fmax  : num -42949732
  .. ..$ fscale: num 4.29e+09
  ..$ c12i: int [1:1024] 6514 5833 7621 6404 6467 6422 6225 6993 5920 6794 ...
  ..$ csgn:List of 6
  .. ..$ C13r: int [1:1024] 1 0 1 0 1 1 0 1 1 1 ...
  .. ..$ C13i: int [1:1024] 1 1 0 1 1 0 1 1 0 0 ...
  .. ..$ C23r: int [1:1024] 0 0 0 1 0 1 1 1 1 1 ...
  .. ..$ C23i: int [1:1024] 1 0 1 1 1 0 0 1 1 0 ...
  .. ..$ C12r: int [1:1024] 0 1 1 1 1 0 0 0 0 0 ...
  .. ..$ C12i: int [1:1024] 1 1 1 0 0 0 1 0 1 1 ...
  ..$ asgn:List of 3
  .. ..$ cs1a: int [1:1024] 0 0 0 0 0 0 0 0 0 0 ...
  .. ..$ cs2a: int [1:1024] 0 0 0 0 0 0 0 0 0 0 ...
  .. ..$ cs3a: int [1:1024] 0 0 0 0 0 0 1 1 0 0 ...
  ..$ scal:List of 4
  .. ..$ nType : int 1
  .. ..$ fmin  : num 1.01
  .. ..$ fmax  : num -42949672
  .. ..$ fscale: num 4.29e+09
  ..$ csqf: int [1:1024] 1 1 1 1 1 1 1 1 1 1 ...
 $ :List of 23
  ..$ indx:List of 1
  .. ..$ index: int 2

  cell 2 data

  $ :List of 23
  ..$ indx:List of 1
  .. ..$ index: int 3

  cell 3 data

   $ :List of 23
  ..$ indx:List of 1
  .. ..$ index: int 4

cell 4 data

```



La estructura requerida por el objeto SeaSondeRCS pasa esta validación


```r
 seasonder_validateCSDataStructure <- function(data, nRanges, nDoppler) {

  # Prepare a list of parameters to be passed in case an error is encountered.
  # This provides detailed information about the context of the error.
  conditions_params = list(calling_function = "seasonder_validateDataStructure",
                           class = "seasonder_CS_data_structure_validation_error",
                           seasonder_data = data,
                           seasonder_nRanges = nRanges,
                           seasonder_nDoppler = nDoppler)

  # Define the required fields that should be present in the data.
  required_fields <- c("SSA1", "SSA2", "SSA3", "CS12", "CS13", "CS23", "QC")

  # Loop over each required field to check its existence, dimensions, and data type.
  for (field in required_fields) {

    # Check if the current field exists in the data.
    if (!field %in% names(data)) {
      rlang::inject(seasonder_logAndAbort(glue::glue("Missing field '{field}' in data."), !!!conditions_params))
    }

    # Check if the dimensions of the matrix for the current field match the expected nRanges and nDoppler.
    if (dim(data[[field]])[1] != nRanges || dim(data[[field]])[2] != nDoppler) {
      rlang::inject(seasonder_logAndAbort(glue::glue("Incorrect dimensions for field '{field}' in data."), !!!conditions_params))
    }

    # Check the data type of the current field.
    # SSA1, SSA2, SSA3, and QC should contain numeric values.
    # CS12, CS13, and CS23 should contain complex values.
    if (field %in% c("SSA1", "SSA2", "SSA3", "QC")) {
      if (!is.numeric(data[[field]])) {
        rlang::inject(seasonder_logAndAbort(glue::glue("Field '{field}' should contain numeric values."), !!!conditions_params))
      }
    } else {
      if (!is.complex(data[[field]])) {
        rlang::inject(seasonder_logAndAbort(glue::glue("Field '{field}' should contain complex values."), !!!conditions_params))
      }
    }
  }
}
```


Siendo la equivalencia entre datos la siguiente:

SSA1, SSA2 y SSA3 se corresponden con cs1a, cs2a y cs3a

Los números complejos de CS12se forman a partir de C12r (parte real) y C12i (parte imaginaria)

El elemento QC se obtiene de csqf.



Cada una de las filas de las matrices del objeto SeaSondeRCS se corresponde con uno de los elementos de body, siendo el número de fila igual a body[[i]]$indx$index
