El objetivo es terminar el desarrollo de la función seasonder_readCSSYHeader actualizándola según las especificaciones y probando que funciona correctamente. Adjuntos puedes encontrar los ficheros fuente del paquete SeaSondeR. Úsalos para consultar como son los objetos y las funciones de ese paquete.

Esta función debe leer el encabezado de un fichero CSSY.

# instrucciones para al agente de tests
Puedes usar las siguientes instrucciones para obtener los argumentos connection, current_specs y specs_key_size para los tests

current_specs <-   seasonder_readYAMLSpecs(seasonder_defaultSpecsFilePath("CSSY"),c("CSSY","HEAD"))

specs_key_size <-  seasonder_readYAMLSpecs(seasonder_defaultSpecsFilePath("CSSY"),c("key_size_block"))
connection <-   file(filepath, "rb")
seek(connection,16,origin = "start")

Usa los valores por defecto para otros argumentos de la función.

# intrucciones para el coding agent.

El encabezado termina cuando se encuentra la key "BODY". REbobina la conexión 8 bytes antes de finalizar.


# Formato del archivo
Esta es la información disponible sobre el formato del archivo



**SSFF_ShortenedSpectra_090324**

**SeaSonde Radial Site Release 6**
**Reduced CrossSpectra File Format**

Reduced CrossSpectra files are produced by a SeaSonde Radial Site. There are normal CrossSpectra data, which is reformatted using a lossy algorithm to reduce their size. There are in a binary RIFF format similar in style to Time Series and Range Series files.

Reduced CrossSpectra are created optionally by SpectraArchiver while AnalyzingSpectra to produce Radials and/or Waves. They are also created by SpectraShortener and by the RadialWebServer when asked to upload spectra. Utility SpectraShortener will convert to/from the standard cross spectra format and allow you to adjust how lossy the algorithm is.

The reduced files are lossy because some of the original data precision is rounded off. This rounding causes a small loss of information from the original data, which is mostly extraneous noise and tests show no significant change to the output radial and wave results.

In the normal cross spectra format, the values are single precision IEEE floating point. This results in 4 bytes where the bits of significant data are shifted by varying exponents. This results in a fairly random distribution of ones and zeros, which do not compact well by normal lossless compression utilities and sometimes even grow larger due to the compression overhead. This lossy method normalizes the data to a dB scale and rounds the data to a fixed precision. The data is converted to fixed integer values of varying size bytes (1,2, or 4) depending on how the data changes. This typically results in a 3 to 1 reduction of the file size. A normal compression utility (zip) can then be applied afterward for even more reduction (typically about 20%).

### File Name Format

"CSR_XXXX_yyyy_mm_dd_hhmmss.csr"
where XXXX = four char code site name
where yyyy = created year, e.g., 2009
where mm = created month, 01 to 12
where dd = created day, 01 to 31
where hh = created hour, 00 to 23
where mm = created minute, 00 to 59
where ss = created second, 00 to 59

### File Contents

Format is Resource Indexed File Format. The file is composed of keyed blocks of binary data where each block starts with a 4-byte character type code followed by a 4-byte long data size indicating how much data follows.

Big-Endian Byte ordering (MSB first)
IEEE floats & doubles
Twos complement integer values

The file is composed of multiple keys where each key consists of:
- A 4-byte character key type code
- A 4-byte integer of key data size (can be zero)
- Followed by the key data, which is the data size length of bytes

By convention, Keys with all CAPITALS have subkeys, meaning that the key's data is made up of more keys. When you read a subkey, you should read the data in the key as more RIFF keys.

A key may have no data (zero size), in which case the key will contain only the type code and the zero value key size.

### When Reading

- If you do not recognize the key, you should usually skip over it by doing a dummy read of the key’s data size.
- Do not expect the keys to be in order unless explicitly stated.
- Keys can be repeated as needed describing new or changed information.

If you read this file on an Intel Platform or another system that uses Little Endian byte ordering, the first four bytes will be 'YSSC'. In this case, you will need to swap the byte order on each integer & floating point value.

### Data Type Definitions

- **Fourcc**: 4 bytes four character code (example 'xxxx')
- **Char**: 1-byte char
- **LString**: Variable bytes, string
- **Char[64]**: 64 bytes, zero-terminated string
- **SInt8**: 1-byte Signed (-128 to +127, 2s Complement)
- **UInt8**: 1-byte Unsigned (0 to 255)
- **SInt16**: 2-byte Signed (-32768 to 32767, 2s Complement)
- **UInt16**: 2-byte Unsigned (0 to 65535)
- **SInt24**: 3-byte Signed (2s Complement)
- **SInt32**: 4-byte Signed (-2Giga to +2Giga, 2s Complement)
- **UInt32**: 4-byte Unsigned (0 to 4 Giga)
- **Float**: 4-byte IEEE single precision floating point
- **Double**: 8-byte IEEE double precision floating point
- **Size32**: 4-byte Unsigned (0 to 4 Gigabytes, tells how much data follows key)

### File Contents Layout

Each subkey content is indicated inside `{}` brackets. Each key data content is indented in order after the key.

**ʻCSSYʼ Size32** - This is the first key in the file. All data is inside this key.

**HEAD Size32** - Data Description Section
- `'sign' Size32` - File signature
- `'scrn' Size32` – Source cross spectra filename
- `'mcda' Size32` - Mac Timestamp of first sweep
- `'dbrf' Size32` - dBm Reference
- `'cs4h' Size32` – Normal cross spectra header information

**BODY Size32** - This key contains the repeated keys for each range cell.
- `'indx' Size32` - Helps to index the current sweep
- `'scal' Size32` - Tells how to scale the shortened integer data to floating point
- `'cs1a' Sint32` – Reduced Encoded Self spectra for antenna 1
- `'cs2a' Sint32` – Reduced Encoded Self spectra for antenna 2
- `'cs3a' Sint32` – Reduced Encoded Self spectra for antenna 3
- `'c13r' Sint32` – Reduced Real part of complex antenna 1 to 3 ratio
- `'c13i' Sint32` – Imaginary part of complex antenna 1 to 3 ratio
- `'c23r' Sint32` – Reduced Real part of complex antenna 2 to 3 ratio
- `'c23i' Sint32` – Reduced Imaginary part of complex antenna 2 to 3 ratio
- `'c12r' Sint32` – Reduced Real part of complex antenna 1 to 2 ratio
- `'c12i' Sint32` – Reduced Imaginary part of complex antenna 1 to 2 ratio

**ʻENDʼ Size32** - End of File key

### How to Decode

Each block of Reduced data is decoded by:

1. Set a starting `UInt32` tracking value to 0.
2. Have an output array of `UInt32` large enough for `nDopplers`.
3. Read the first byte of the block, which will tell you what to do next.

Example commands:
- If command byte is `0x9C`, then read next 4 bytes as `UInt32`, set the tracking value to this integer, and append it to the output array.
- If command byte is `0xA4`, then read the next byte as `UInt8`. This byte + 1 is the number of `SInt24 (3bytes)` to follow.
- If command byte is `0x81`, then read the next byte as `UInt8`. This byte + 1 is the number of `SInt8 (1byte)` to follow.

After processing, convert the output array of fixed `UInt32` values into floating point values by applying the `'scal'` values.

For `nDopplers`, convert each `UInt32` value as follows:
- If `value == 0xFFFFFFFF`, then output double is `NAN`
- Else, output double is `value * (fmax - fmin) / fscale + fmin`

Finally, apply:
```pow(10., (double + dbRef) / 10.)```
to convert each double output to voltage.




