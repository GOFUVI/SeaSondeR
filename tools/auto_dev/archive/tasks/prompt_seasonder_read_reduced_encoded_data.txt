Quiero desarrollar una función que implemente la lectura de un array de números en un fichero binario. La lógica de la lectura es la siguiente:

Read the first byte of the block this will tell you what to do next.
{
Read a command byte
If command byte is 0x9C, then read next 4bytes as unsigned 32bit
integer, set the tracking value to this integer and append to the output array.
If command byte is 0x94, then read the next byte as unsigned 8bit
integer. This byte value + 1 is the number of unsigned 32bit (4bytes) integers
to follow. Append the integers to the output array. The tracking value should
also be set to last unsigned integer value.
If command byte is 0xAC, then read the next 3 bytes as a 24bit signed
integer, add this value to the tracking value and append the tracking value to
the output array.
If command byte is 0xA4, then read the next byte as unsigned 8bit
integer. This byte value + 1 is the number of SInt24(3bytes) to follow. In
sequence, add each one of these to the tracking value and append each new
tracking value to the output array.
If command byte is 0x89, then read the next byte as a signed 8bit
integer, add this value to the tracking value and append tracking value to
output array.
If command byte is 0x8A, then read the next 2 bytes as a 16bit signed
integer, add this value to the tracking value and append tracking value to
output array.
If command byte is 0x82, then read the next byte as unsigned 8bit
integer. This byte value + 1 is the number of Sint16(2bytes) to follow. In
sequence, add each one of these to the tracking value and append each new
tracking value to the output array.
If command byte is 0x81, then read the next byte as unsigned 8bit
integer. This byte value + 1 is the number of Sint8(1byte) to follow. In
sequence, add each one of these to the tracking value and append each new
tracking value to the output array.
If command byte is some other value, an error has happened.
} Now loop with the next byte in the reduced block until all bytes are processed.
You should check to ensure that you don’t exceed the output of nDoppler cells
or the reduced block size.

hasta ahora esto es lo que llevo implementado de la función:

 seasonder_read_reduced_encoded_data<- function(connection, key, endian = "big"){

    .command_byte_81 <- function(connection, endian, tracking_value){

      x <- readBin(connection, what = "integer", n = 1, size = 1, endian = endian, signed = FALSE)
      n <- x + 1
      out <- purrr::accumulate(1:n,\(track,i){
        val <- readBin(connection, what = "integer", n = 1, size = 1, endian = endian, signed = TRUE)
        track <- track + val
        track
      }, .init = tracking_value)
      out <- out[-1]

      return(out)
    }

    .command_byte_82 <- function(connection, endian, tracking_value){

      x <- readBin(connection, what = "integer", n = 1, size = 1, endian = endian, signed = FALSE)
      n <- x + 1
      out <- purrr::accumulate(1:n,\(track,i){
        val <- readBin(connection, what = "integer", n = 1, size = 2, endian = endian, signed = TRUE)
        track <- track + val
        track
      }, .init = tracking_value)
      out <- out[-1]

      return(out)
    }

    .command_byte_89 <- function(connection, endian, tracking_value){

      x <- readBin(connection, what = "integer", n = 1, size = 1, endian = endian, signed = TRUE)

      out <- tracking_value + x

      return(out)
    }

    .command_byte_8A <- function(connection, endian, tracking_value){

      x <- readBin(connection, what = "integer", n = 1, size = 2, endian = endian, signed = TRUE)

      out <- tracking_value + x

      return(out)
    }

    tracking_value <- 0L
    start_point <- seek(connection,origin = "current")

    final_point <- start_point + key$size


    out <- integer(0)
    while(seek(connection,origin = "current") < final_point){

      command_byte <- readBin(connection, what = "raw", n = 1, size = 1, endian = endian)

      valid_command <- TRUE
      if(command_byte == as.raw(0x8A)){

        read_reduced_encoded_data_fun <- .command_byte_8A

      }else if(command_byte == as.raw(0x89)){

        read_reduced_encoded_data_fun <- .command_byte_89

      }else if(command_byte == as.raw(0x82)){

        read_reduced_encoded_data_fun <- .command_byte_82

      }else if(command_byte == as.raw(0x81)){

        read_reduced_encoded_data_fun <- .command_byte_81

      }else{
        valid_command <- FALSE
      }
      browser(expr = !valid_command)

      if(valid_command){
        out <- append(out, read_reduced_encoded_data_fun(connection, endian, tracking_value))

        tracking_value <- dplyr::last(out)

      }

    }

   return(out)
  }


Por favor, termina la implementación.

Esta es una posible aproximación para mockear la conexión

con <- rawConnection(as.raw(c(0x42, 0x29, 0xa3, 0xd7)))
      on.exit(close(con))
