[{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"importance-of-an-hf-radar-antenna-pattern","dir":"Articles","previous_headings":"Introduction","what":"Importance of an HF-Radar Antenna Pattern","title":"APM","text":"high frequency radar (HF-Radar) systems, antenna pattern crucial component obtaining accurate current measurements reflected radar signal. radiation pattern, theoretically consists two opposite ellipses antenna loop, disturbed obstacles interference (Codar Ocean Sensors 2003) . presence buildings, trees nearby structure can distort antenna pattern, leading incorrect current measurement.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"need-for-antenna-pattern-measurement-apm","dir":"Articles","previous_headings":"Introduction","what":"Need for Antenna Pattern Measurement (APM)","title":"APM","text":"Antenna Pattern Measurement (APM) essential know actual antenna pattern, allowing system adjusted compensate distortions obstacles. vital improve accuracy radar measurements (Lipa et al. 2018).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"apm-objective","dir":"Articles","previous_headings":"Antenna Pattern Measurement (APM)","what":"APM Objective","title":"APM","text":"main objective APM correct recalibrate actual antenna pattern. , APM contributes significant improvement quality data collected HF-Radar.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"direction-finding-with-music","dir":"Articles","previous_headings":"MUSIC algorithm and APM","what":"Direction Finding with MUSIC","title":"APM","text":"MUSIC (Multiple Signal Classification) (Schmidt 1986) algorithm estimate direction origin (DOA) signals received radar. systems SeaSonde, MUSIC algorithm applied complex voltages measured three antenna elements estimate parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"application-of-the-music-algorithm-to-seasonde","dir":"Articles","previous_headings":"MUSIC algorithm and APM","what":"Application of the MUSIC algorithm to SeaSonde","title":"APM","text":"context HF-Radar systems SeaSonde, antenna pattern conceptualized “transfer vector” incident signals measured voltages antennas, following mathematical model proposed (Stoica Nehorai 1988): y(t)=(θ)x(t)+e(t),t=1,2,…,N y(t) = (\\theta) x(t) + e(t), \\quad t = 1, 2, \\ldots, N . transfer vector, antenna pattern, crucial MUSIC algorithm directly affects covariance matrix complex voltages. incorporating actual antenna pattern obtained using APM, DOA estimation results MUSIC significantly accurate reliable.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"limitations-and-challenges","dir":"Articles","previous_headings":"","what":"Limitations and Challenges","title":"APM","text":"implementing MUSIC algorithm, several assumptions limitations consider: m>nm > n: number antenna elements (mm) must strictly greater number incident signals (nn). SeaSonde context, limits number incident signals can considered Doppler frequency one two (Lipa et al. 2006). Single antenna responses: two different DOAs, responses three antennas must . Otherwise, one enters type one ambiguity, one discern direction signal arriving (Schmidt 1986). Uncorrelated noise: noise antennas assumed zero mean standard deviation. noises also correlated . fully coherent signals: incident signals completely coherent . reasonable assumption, especially dealing echoes reflected sea surface (Lipa et al. 2006). N>mN > m: number measured samples (NN) antenna must greater mm(Lipa et al. 2006).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"how-apm-is-applied","dir":"Articles","previous_headings":"Limitations and Challenges","what":"How APM is Applied","title":"APM","text":"APM procedure involves several software steps specialized tools: GPS Tracker: Processes GPS track create TRACK file used subsequent steps. SeaSondeAcquisition: Combines data acquired radar GPS TRACK, generating LOOP file. CrossLoopPatterner: Processes LOOP file generate antenna pattern. Installation new antenna pattern system. crucial use version Radial Suite APM data TimeSeries files ensure consistency processed data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"introduction-to-the-seasonderapm-class","dir":"Articles","previous_headings":"","what":"Introduction to the SeaSondeRAPM Class","title":"APM","text":"SeaSondeRAPM class SeaSondeR package designed handle antenna pattern calibration data, primarily SeaSonde radar systems. class aims provide comprehensive standardized framework store, manipulate, validate antenna pattern calibration data associated metadata. class relies several core functions perform various tasks object creation data validation. brief overview functions:","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"seasonder_createseasonderapm","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Core Functions","what":"seasonder_createSeaSondeRAPM","title":"APM","text":"function constructor creating SeaSondeRAPM object. takes complex matrix (calibration_matrix) primary argument, stores calibration data various bearings. function performs validations, initializes additional attributes, returns SeaSondeRAPM object. Usage:","code":"apm <- seasonder_createSeaSondeRAPM(calibration_matrix)"},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"seasonder_initializeattributesseasonderapm","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Core Functions","what":"seasonder_initializeAttributesSeaSondeRAPM","title":"APM","text":"Called internally seasonder_createSeaSondeRAPM, function initializes various attributes SeaSondeRAPM object. Attributes include metadata properties like quality_matrix, BEAR, Creator, SiteName, etc. returns list initialized attributes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"seasonder_validatecalibrationmatrixseasonderapm","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Core Functions","what":"seasonder_validateCalibrationMatrixSeaSondeRAPM","title":"APM","text":"function ensures given calibration matrix meets required specifications. instance, checks matrix exactly two rows contains complex numbers.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"seasonder_validateattributesseasonderapm","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Core Functions","what":"seasonder_validateAttributesSeaSondeRAPM","title":"APM","text":"function validates various attributes SeaSondeRAPM object. performs rigorous checks make sure attribute meets predefined conditions. ’s called internally validate attributes object creation modification.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"validate_seasonderapm_","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Core Functions","what":"validate_SeaSondeRAPM_*","title":"APM","text":"suite functions validate individual attributes SeaSondeRAPM object, like validate_SeaSondeRAPM_quality_matrix, validate_SeaSondeRAPM_BEAR, validate_SeaSondeRAPM_SiteOrigin, etc.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"getters-and-setters","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class","what":"Getters and Setters","title":"APM","text":"SeaSondeRAPM system, attribute accompanied corresponding getter setter function. functions follow specific naming pattern make easy identify attribute manipulate.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"naming-convention","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Getters and Setters","what":"Naming Convention","title":"APM","text":"naming convention getter setter functions : seasonder_setSeaSondeRAPM_<AttributeName>(seasonde_apm_obj, new_value): setting value attribute. seasonder_getSeaSondeRAPM_<AttributeName>(seasonde_apm_obj): retrieving value attribute. , <AttributeName> name attribute interested manipulating.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"setting-an-attribute","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Getters and Setters > Examples","what":"Setting an Attribute","title":"APM","text":"set value ‘Type’ attribute SeaSondeRAPM object, use: , seasonde_apm_obj SeaSondeRAPM object whose ‘Type’ attribute want set, new_value value want assign .","code":"seasonder_setSeaSondeRAPM_Type(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"getting-an-attribute","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Getters and Setters > Examples","what":"Getting an Attribute","title":"APM","text":"get value ‘Type’ attribute SeaSondeRAPM object, use: , seasonde_apm_obj SeaSondeRAPM object whose ‘Type’ attribute want retrieve. following naming conventions examples, can easily set get attribute SeaSondeRAPM object.","code":"value = seasonder_getSeaSondeRAPM_Type(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"seasonder_readseasonderapmfile","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class > Getters and Setters","what":"seasonder_readSeaSondeRAPMFile","title":"APM","text":"function allows users read SeaSonde APM file given path parse SeaSondeRAPM object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"example-use-cases","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class","what":"Example Use Cases","title":"APM","text":"","code":"# Create a SeaSondeRAPM object cal_matrix <- matrix(complex(real = c(1, 2), imaginary = c(3, 4)), nrow = 2) apm <- seasonder_createSeaSondeRAPM(cal_matrix)  # Read from an APM file apm_from_file <- seasonder_readSeaSondeRAPMFile(\"path/to/file.apm\")"},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"key-features","dir":"Articles","previous_headings":"Introduction to the SeaSondeRAPM Class","what":"Key Features","title":"APM","text":"Robust validation mechanisms Customizable attributes metadata Easy integration SeaSonde data pipelines utilizing class associated functions, users can maintain high level integrity standardization managing SeaSonde antenna pattern calibration data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"detailed-attributes-for-seasonderapm-objects","dir":"Articles","previous_headings":"","what":"Detailed Attributes for SeaSondeRAPM Objects","title":"APM","text":"SeaSondeRAPM object various attributes capture specifics Antenna Pattern Measurement (APM) data. attributes can initialized using seasonder_initializeAttributesSeaSondeRAPM() function.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"initialization-function","dir":"Articles","previous_headings":"Detailed Attributes for SeaSondeRAPM Objects","what":"Initialization Function","title":"APM","text":"seasonder_initializeAttributesSeaSondeRAPM function initializes various attributes SeaSondeRAPM object, taking calibration matrix mandatory argument number additional named attributes override default settings.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"syntax","dir":"Articles","previous_headings":"Detailed Attributes for SeaSondeRAPM Objects > Initialization Function","what":"Syntax","title":"APM","text":"Arguments: calibration_matrix: 2 x b complex matrix, b represents number bearings calibration. ...: Additional named attributes may override default values.","code":"seasonder_initializeAttributesSeaSondeRAPM(calibration_matrix, ...)"},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"returns","dir":"Articles","previous_headings":"Detailed Attributes for SeaSondeRAPM Objects > Initialization Function","what":"Returns","title":"APM","text":"function returns list containing initialized attributes SeaSondeRAPM object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"attributes","dir":"Articles","previous_headings":"Detailed Attributes for SeaSondeRAPM Objects","what":"Attributes","title":"APM","text":"quality_matrix: 2 x b complex matrix quality data, b represents number bearings. BEAR: numeric vector bearings (degrees). Type: Character string representing antenna pattern type. FileName: name MeasPattern.txt file APM data read. CreateTimeStamp: creation time APM file. Creator: name entity created SeaSondeRAPM object. Defaults empty character vector. SiteName: name site (different SiteCode). Defaults empty character vector. SiteOrigin: numeric vector representing GPS location station. Defaults c(0,0). ProcessingSteps: character vector keeps track processing steps applied object. Defaults empty character vector. AmplitudeFactors: numeric vector amplitude factors. Defaults c(0,0). AntennaBearing: numeric vector antenna bearing. Defaults empty numeric vector. StationCode: 4-character code station. Defaults empty character vector. BearingResolution: numeric value indicating bearing resolution degrees. Defaults empty numeric vector. Smoothing: numeric vector indicating smoothing applied antenna pattern. Defaults empty numeric vector. CommentLine: Metadata lines data file matching attribute. Defaults empty character vector. FileID: File’s UUID. Defaults empty character vector. PhaseCorrections: numeric vector phase corrections. Defaults c(0,0).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"initialize-attributes-with-default-settings","dir":"Articles","previous_headings":"Detailed Attributes for SeaSondeRAPM Objects > Examples","what":"Initialize Attributes with Default Settings","title":"APM","text":"","code":"# Create a calibration_matrix cal_matrix <- matrix(complex(real = c(1, 2), imaginary = c(3, 4)), nrow = 2, ncol = 2)  # Initialize attributes attr_list <- seasonder_initializeAttributesSeaSondeRAPM(calibration_matrix = cal_matrix) str(attr_list)"},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeAPM.html","id":"initialize-attributes-with-custom-type","dir":"Articles","previous_headings":"Detailed Attributes for SeaSondeRAPM Objects > Examples","what":"Initialize Attributes with Custom ‘Type’","title":"APM","text":"understanding attributes corresponding getter setter methods, can effectively interact SeaSondeRAPM objects.","code":"# Initialize attributes with a custom 'Type' attr_list_custom <- seasonder_initializeAttributesSeaSondeRAPM(calibration_matrix = cal_matrix, Type = \"Custom Pattern\") str(attr_list_custom)"},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cross-Spectra Files","text":"Cross-spectra (CS) files contain snapshot state ocean cross-spectral format, calculated measurements three antennas. data represent reflected energy (self spectrum) detectable distance Doppler velocity also cross product spectra (cross spectra) antennas relative . files used calculate radial velocity vectors ocean state. following information CS files extract Codar Ocean Sensors (2016), please see document details reading types files. files format raw cross spectra (CSQ) short time cross spectra (CSS). SeaSondeAcquisition creates CSQs Spectra Series folder. SpectraAverager reads CSQs produces CSS/CSAs SpectraToProcess folder. standard SeaSonde CSS covers 15 minutes, file every 10 minutes. CSA files files produced SpectraSlider app average corresponding CSS. CSAs used process second-order energy obtaining wave height estimates. CSS CSA passed AnalyzeSpectra app obtain radials swell respectively. binary files data Big-Endian (Significant Byte first) implies Intel invert order bytes read data. IEEE decimal values used single (4 bytes) double (8 bytes) precision. Integer values two’s complement. file structure : Header section variable size, increasing version. Data section, can two types contents Depending version file, contains following. higher version includes info previous ones.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"version-1","dir":"Articles","previous_headings":"Introduction","what":"Version 1","title":"Cross-Spectra Files","text":"TimeStamp: seconds since January 1, 1904 local time station computer. CSQs start data acquisition. CSS time center averaged data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"version-2","dir":"Articles","previous_headings":"Introduction","what":"Version 2","title":"Cross-Spectra Files","text":"Data type: CSQ CSS/CSA","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"version-3","dir":"Articles","previous_headings":"Introduction","what":"Version 3","title":"Cross-Spectra Files","text":"Site name","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"version-4","dir":"Articles","previous_headings":"Introduction","what":"Version 4","title":"Cross-Spectra Files","text":"Coverage minutes data. CSQ usually 5 minutes, CSS averages 15 minutes, CSA averages 60 minutes. Information initial frequency scan, Sweep rate, Sweep bandwidth, Sweep Freq direction. Number Dopple cells (usually 512). Number range cells (nominally 32 CSQ 31 CSS/CSA). Index first range cell. Nominally 0 CSQ, CSS usually uses 1 SpectraAverager cuts first range cell useless. May take values spectrum reduced certain range interest. Cell distance kilometers. distance cell index cell -1 + index first cell * distance cells.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"version-5","dir":"Articles","previous_headings":"Introduction","what":"Version 5","title":"Cross-Spectra Files","text":"Output interval minutes. Number active antennas. Number antennas used spectra. Indicator antennas use.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"version-6-this-section-is-variable-in-size-and-contains-optional-metadata-","dir":"Articles","previous_headings":"Introduction","what":"Version 6 (this section is variable in size and contains optional metadata).","title":"Cross-Spectra Files","text":"TIME timestamp higher resolution. ZONE time use TOOL Name version application(s) processed data file. ANTG Receive Antenna Gain corrections. indicator power balance receiving antennas, used SpectraPlotterMap display spectra. applying antenna pattern amplitude corrections use already take account kind difference antennas. FOLS Radial/Elliptical First Order Lines delineate first order region. WOLS Wave Processing First Order Lones delineate first order region. RCVI description receiver, including, among others, receiver gain dB. conversion autospectrum dBm done 10*lob10(abs(autospectrum)) + receiver gain (RCVI block, otherwise use -34.2 dB).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"data-section","dir":"Articles","previous_headings":"","what":"Data section","title":"Cross-Spectra Files","text":"multidimensional array auto-spectrum cross-spectrum data. CSS CSA, also includes information data quality.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"description","dir":"Articles","previous_headings":"SeaSondeRCS Class","what":"Description","title":"Cross-Spectra Files","text":"SeaSondeRCS class R representation SeaSonde CS (Cross-spectra) files. class facilitates reading, manipulation analysis data contained files, providing consistent easy--use structure users working SeaSonde data R.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"purpose","dir":"Articles","previous_headings":"SeaSondeRCS Class","what":"Purpose","title":"Cross-Spectra Files","text":"main purpose SeaSondeRCS class provide unified interface working CS files R. includes ability read CS files, access metadata data, perform specific analyses related SeaSonde data. encapsulating data specific class, process working files simplified greater consistency reliability analysis ensured.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"example-of-creation","dir":"Articles","previous_headings":"SeaSondeRCS Class","what":"Example of creation","title":"Cross-Spectra Files","text":"create instance SeaSondeRCS class, can use following code R: example SeaSondeRCS object created CS file path.","code":"library(SeaSondeR) # Create a SeaSondeRCS object form a CS file CS_file <- \"path/to/CSQ_o_CSS_o_CSA/file\"  SeaSondeRCS_object <- seasonder_createSeaSondeRCS(x = CS_file)"},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"error-management-in-seasondercs-class","dir":"Articles","previous_headings":"SeaSondeRCS Class","what":"Error Management in SeaSondeRCS Class","title":"Cross-Spectra Files","text":"SeaSondeRCS class incorporates error handling using rlang package. ensures errors structured, informative, manageable. organized overview condition classes, associated cases, functions generate .","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"condition-classes","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class","what":"Condition Classes","title":"Cross-Spectra Files","text":"list specific condition classes along functions invoke errors:","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"file-handling-errors","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class > Condition Classes","what":"File Handling Errors","title":"Cross-Spectra Files","text":"seasonder_CS_file_not_found_error: Generated seasonder_createSeaSondeRCS file path nonexistent. seasonder_read_cs_file_error: Generated seasonder_readSeaSondeCSFile general file reading issues. seasonder_cs_file_skipped: Generated seasonder_readSeaSondeCSFile file skipped due errors. seasonder_validate_cs_file_error: Generated seasonder_validateCSFileData upon CS file validation failure. seasonder_cs_missing_header_info_error: Generated seasonder_readSeaSondeCSFileData header info missing. seasonder_SeaSonderCS_field_not_found_in_header: Generated seasonder_getCSHeaderByPath CS field absent header.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"data-structure-errors","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class > Condition Classes","what":"Data Structure Errors","title":"Cross-Spectra Files","text":"seasonder_CS_missing_nRange_nDoppler_error: Generated seasonder_validateCSHeaderStructure nRangeCells nDopplerCells missing. seasonder_CS_header_is_not_a_list: Generated seasonder_validateCSHeaderStructure header list. seasonder_CS_data_structure_validation_error: Generated seasonder_validateCSDataStructure data structure issues. seasonder_cs_data_reading_error: Generated seasonder_readSeaSondeCSFileData problems data reading.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"field-specific-errors","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class > Condition Classes","what":"Field-Specific Errors","title":"Cross-Spectra Files","text":"seasonder_cs_field_skipped: Generated seasonder_readCSField CSField read skipped. seasonder_cs_field_qc_fun_rerun: Generated read_and_qc_field QC function rerun trigger. seasonder_cs_field_qc_fun_not_defined_error: Generated QC function missing seasonder_the environment. seasonder_cs_field_qc_fun_error: Generated read_and_qc_field due issues QC function application. seasonder_cs_field_reading_error: Generated seasonder_readCSField reading issues CSField.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"version-specific-errors","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class > Condition Classes","what":"Version-Specific Errors","title":"Cross-Spectra Files","text":"seasonder_v6_block_transformacion_skipped: Generated seasonder_readSeaSondeCSFileHeaderV6 v6 block transformation skipped. seasonder_v6_transform_function_error: Generated seasonder_readSeaSondeCSFileHeaderV6 due v6 function issues. seasonder_v6_skip_block_error: Generated seasonder_readSeaSondeCSFileHeaderV6 skipping v6 block.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"specification-errors","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class > Condition Classes","what":"Specification Errors","title":"Cross-Spectra Files","text":"spsr_field_specification_missing_error: Generated seasonder_check_specs field specifications absent.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"condition-cases","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class","what":"Condition Cases","title":"Cross-Spectra Files","text":"common scenarios trigger errors managed SeaSondeRCS class: File exist. Missing nRangeCells nDopplerCells header. Issues validating data structure integrity. Failure opening file connection. Encountering unsupported version specifications. Dependency function errors data reading processing. Missing fields within data. Incorrect data dimensions types. Skipped CSFields data acquisition. Reruns alternative QC functions. Missing incorrect QC functions. Errors applying QC functions. Reading issues due corrupted data unsupported formats. Skipped v6 block transformations. Problems arising v6 transformation functions. Skipped v6 blocks due various errors. Incomplete data processing missing header fields.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"restarts","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class","what":"Restarts","title":"Cross-Spectra Files","text":"SeaSondeR package, restarts play crucial role error handling, particularly working SeaSondeRCS class. Restarts provide mechanism recover errors without exiting function need complex error trapping logic. allow graceful handling exceptions may occur execution functions. detailed overview restarts available functions related SeaSondeRCS class, including descriptions, types errors manage, examples usage withCallingHandlers.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/SeaSondeCS.html","id":"restarts-overview","dir":"Articles","previous_headings":"SeaSondeRCS Class > Error Management in SeaSondeRCS Class","what":"Restarts Overview","title":"Cross-Spectra Files","text":"Description: restart allows user skip reading CS file error occurs, preventing entire process halting. Error Managed: used error reading CS file, file corruption inaccessibility. Example: Description: restart enables skipping problematic field within CS file, allowing rest file processed. Error Managed: handles errors occur reading specific field CS file. Example: Description: Offers way rerun quality control (QC) function alternative function initial QC check fails. Error Managed: restart invoked QC function encounters error, allowing immediate retry different approach. Example: Description: restart used skip transformation step V6 data error detected process. Error Managed: specifically designed manage errors transformation function V6 data blocks. Example: restarts associated helper function carries name, please see help information. Restarts SeaSondeR package designed intuitive provide seamless error recovery process, ensuring data analysis unduly interrupted recoverable errors. use withCallingHandlers examples demonstrates implement restarts practice, providing template handling common error scenarios encountered working SeaSondeRCS class functions.","code":"withCallingHandlers(   seasonder_cs_file_reading_error = function(cond) seasonder_skip_cs_file(cond),   seasonder_readCSFile(con) ) withCallingHandlers(   seasonder_cs_field_reading_error = function(cond) seasonder_skip_cs_field(cond, NA),   seasonder_readCSField(con, \"UInt8\") ) withCallingHandlers(   seasonder_cs_field_qc_fun_error = function(cond) seasonder_rerun_qc_with_fun(cond, alternate_qc),   read_and_qc_field(field_spec, connection = con) ) withCallingHandlers(   seasonder_v6_transform_function_error = function(cond) {     val <- cond$seasonder_block_data     seasonder_v6_skip_transformation(cond, list(other_var = \"alternative value\"))   },   seasonder_transformV6DataBlock(spec, connection = con) )"},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/intro.html","id":"instrument-introduction-seasonde","dir":"Articles","previous_headings":"","what":"Instrument Introduction: SeaSonde","title":"SeaSondeR","text":"SeaSonde compact, simplified radar system developed California’s Silicon Valley measure near-surface ocean currents , certain cases, ocean waves. operates low frequencies ranging 4 50 megahertz, uses small bandwidth. SeaSonde system consists two radial sites contribute combined site produce current maps. radial site can imagined hub wheel, “radials” acting spokes pointing toward away site. radials represent component velocities ocean current specific directions. Radial sites typically several kilometers apart fully automated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/intro.html","id":"common-data-processing-tasks-","dir":"Articles","previous_headings":"","what":"Common Data Processing Tasks.","title":"SeaSondeR","text":"Radial Map Generation: Creation maps showing direction velocity currents relative radial site. Vector Map Creation: Combining radial maps multiple sites create complete ocean current map. Antenna Pattern Measurement (APM): Antenna pattern calibration improve data accuracy. Outliers Removal Noise Filtering: Preprocessing improve data quality. Antenna Gain Calculation: Adjustment measurements obtain accurate data.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/articles/intro.html","id":"radial-suite","dir":"Articles","previous_headings":"Existing SeaSonde Data Processing Software","what":"Radial Suite","title":"SeaSondeR","text":"proprietary software specifically SeaSonde provides tools data processing. Advantages: - Designed specifically SeaSonde. - Integrated comprehensive. Disadvantages: - Closed software. - Costly limited licenses.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/intro.html","id":"radiowave-operators-working-group-repositories","dir":"Articles","previous_headings":"Existing SeaSonde Data Processing Software","what":"Radiowave Operators Working Group Repositories","title":"SeaSondeR","text":"Includes spectra_tools repository, Python scripts reading preprocessing data. Advantages: - Open source. - Good data quality control. Disadvantages: - Limited tasks.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/intro.html","id":"hfr_cs_processing-by-bryan-emery","dir":"Articles","previous_headings":"Existing SeaSonde Data Processing Software","what":"hfr_cs_processing by Bryan Emery","title":"SeaSondeR","text":"Provides wide range functionality data processing MATLAB. Advantages: - Complete task coverage. - Good research. Disadvantages: - Requires MATLAB license. - Limited author’s research.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/articles/intro.html","id":"tasks-that-can-be-performed-with-this-r-package","dir":"Articles","previous_headings":"","what":"Tasks that Can be Performed with This R Package","title":"SeaSondeR","text":"R package, called SeaSondeR, aims provide complete, open source solution SeaSonde data processing. Capabilities include: Data Reading: Read APM .cs files. Map Generation: Create radial vector maps. APM: Antenna pattern calibration. Data Preprocessing: Noise filtering, outliers elimination gain calculation. Interoperability: Can interface packages repositories deeper analysis. Diagnostics Maintenance: Tools radio site problem diagnosis resolution. using SeaSondeR, users can take advantage power flexibility R language data analysis, maintaining high accuracy reliability interpretation SeaSonde data.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Juan Luis Herrera Cortijo. Author, maintainer. Ramiro . Varela Benvenuto. Contributor. Adrián Fernández Baladrón. Contributor.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Herrera Cortijo J (2025). SeaSondeR: Tools Processing SeaSonde HF-Radar Data. R package version 0.2.3.9002, https://gofuvi.github.io/SeaSondeR/, https://github.com/GOFUVI/SeaSondeR.","code":"@Manual{,   title = {SeaSondeR: Tools for Processing SeaSonde HF-Radar Data},   author = {Juan Luis {Herrera Cortijo}},   year = {2025},   note = {R package version 0.2.3.9002, https://gofuvi.github.io/SeaSondeR/},   url = {https://github.com/GOFUVI/SeaSondeR}, }"},{"path":"https://gofuvi.github.io/SeaSondeR/index.html","id":"seasonder","dir":"","previous_headings":"","what":"Tools for Processing SeaSonde HF-Radar Data","title":"Tools for Processing SeaSonde HF-Radar Data","text":"goal SeaSondeR provide comprehensive set tools processing analyzing data SeaSonde High-Frequency Radar (HF-Radar) instrument. package intended facilitate handling raw processed data, including spectral matrices, calibration, metadata management.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Processing SeaSonde HF-Radar Data","text":"can install development version SeaSondeR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"GOFUVI/SeaSondeR\")"},{"path":"https://gofuvi.github.io/SeaSondeR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools for Processing SeaSonde HF-Radar Data","text":"basic example shows solve common problem:","code":"library(SeaSondeR) ## basic example code"},{"path":"https://gofuvi.github.io/SeaSondeR/index.html","id":"package-pages","dir":"","previous_headings":"","what":"Package pages","title":"Tools for Processing SeaSonde HF-Radar Data","text":"https://gofuvi.github.io/SeaSondeR/","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_SiteOrigin_override_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SiteOrigin Override Step Text — SeaSondeRAPM_SiteOrigin_override_step_text","title":"Generate SiteOrigin Override Step Text — SeaSondeRAPM_SiteOrigin_override_step_text","text":"function generates message indicating SiteOrigin overridden.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_SiteOrigin_override_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SiteOrigin Override Step Text — SeaSondeRAPM_SiteOrigin_override_step_text","text":"","code":"SeaSondeRAPM_SiteOrigin_override_step_text(SiteOrigin)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_SiteOrigin_override_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SiteOrigin Override Step Text — SeaSondeRAPM_SiteOrigin_override_step_text","text":"SiteOrigin numeric vector two elements representing new latitude longitude.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_amplitude_and_phase_corrections_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Amplitude and Phase Corrections Step Text — SeaSondeRAPM_amplitude_and_phase_corrections_step_text","title":"Generate Amplitude and Phase Corrections Step Text — SeaSondeRAPM_amplitude_and_phase_corrections_step_text","text":"function generates message indicating amplitude phase corrections applied APM.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_amplitude_and_phase_corrections_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Amplitude and Phase Corrections Step Text — SeaSondeRAPM_amplitude_and_phase_corrections_step_text","text":"","code":"SeaSondeRAPM_amplitude_and_phase_corrections_step_text(   amplitude1,   amplitude2,   phase1,   phase2 )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_amplitude_and_phase_corrections_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Amplitude and Phase Corrections Step Text — SeaSondeRAPM_amplitude_and_phase_corrections_step_text","text":"amplitude1 Amplitude correction first channel. amplitude2 Amplitude correction second channel. phase1 Phase correction (degrees) first channel. phase2 Phase correction (degrees) second channel.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_amplitude_factors_override_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Amplitude Factors Override Step Text — SeaSondeRAPM_amplitude_factors_override_step_text","title":"Generate Amplitude Factors Override Step Text — SeaSondeRAPM_amplitude_factors_override_step_text","text":"function generates message indicating amplitude factors overridden.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_amplitude_factors_override_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Amplitude Factors Override Step Text — SeaSondeRAPM_amplitude_factors_override_step_text","text":"","code":"SeaSondeRAPM_amplitude_factors_override_step_text(amplitude_factors)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_amplitude_factors_override_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Amplitude Factors Override Step Text — SeaSondeRAPM_amplitude_factors_override_step_text","text":"amplitude_factors numeric vector two elements new amplitude factors.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_antenna_bearing_override_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Antenna Bearing Override Step Text — SeaSondeRAPM_antenna_bearing_override_step_text","title":"Generate Antenna Bearing Override Step Text — SeaSondeRAPM_antenna_bearing_override_step_text","text":"function generates message indicating AntennaBearing attribute overridden.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_antenna_bearing_override_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Antenna Bearing Override Step Text — SeaSondeRAPM_antenna_bearing_override_step_text","text":"","code":"SeaSondeRAPM_antenna_bearing_override_step_text(antenna_bearing)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_antenna_bearing_override_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Antenna Bearing Override Step Text — SeaSondeRAPM_antenna_bearing_override_step_text","text":"antenna_bearing new antenna bearing value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_creation_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Creation Step Text — SeaSondeRAPM_creation_step_text","title":"Generate Creation Step Text — SeaSondeRAPM_creation_step_text","text":"function generates text message indicating time APM object created based current system time provided file path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_creation_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Creation Step Text — SeaSondeRAPM_creation_step_text","text":"","code":"SeaSondeRAPM_creation_step_text(file_path)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_creation_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Creation Step Text — SeaSondeRAPM_creation_step_text","text":"file_path character string specifying path file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_creation_step_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Creation Step Text — SeaSondeRAPM_creation_step_text","text":"character string formatted message indicating time creation file path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_phase_correction_override_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Phase Correction Override Step Text — SeaSondeRAPM_phase_correction_override_step_text","title":"Generate Phase Correction Override Step Text — SeaSondeRAPM_phase_correction_override_step_text","text":"function generates message indicating phase corrections overridden.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_phase_correction_override_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Phase Correction Override Step Text — SeaSondeRAPM_phase_correction_override_step_text","text":"","code":"SeaSondeRAPM_phase_correction_override_step_text(phase_correction)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_phase_correction_override_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Phase Correction Override Step Text — SeaSondeRAPM_phase_correction_override_step_text","text":"phase_correction numeric vector two elements new phase corrections.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_smoothing_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Smoothing Step Text — SeaSondeRAPM_smoothing_step_text","title":"Generate Smoothing Step Text — SeaSondeRAPM_smoothing_step_text","text":"function generates message indicating smoothing applied APM.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_smoothing_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Smoothing Step Text — SeaSondeRAPM_smoothing_step_text","text":"","code":"SeaSondeRAPM_smoothing_step_text(smoothing)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_smoothing_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Smoothing Step Text — SeaSondeRAPM_smoothing_step_text","text":"smoothing smoothing parameter (number points used).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_trimming_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Trimming Step Text — SeaSondeRAPM_trimming_step_text","title":"Generate Trimming Step Text — SeaSondeRAPM_trimming_step_text","text":"function generates message indicating trimming applied APM.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_trimming_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Trimming Step Text — SeaSondeRAPM_trimming_step_text","text":"","code":"SeaSondeRAPM_trimming_step_text(trimming)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRAPM_trimming_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Trimming Step Text — SeaSondeRAPM_trimming_step_text","text":"trimming number points trimmed end APM.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_MUSIC_validate_doppler_interpolation.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Doppler Interpolation Factor for SeaSondeRCS Objects — SeaSondeRCS_MUSIC_validate_doppler_interpolation","title":"Validate Doppler Interpolation Factor for SeaSondeRCS Objects — SeaSondeRCS_MUSIC_validate_doppler_interpolation","text":"function validates doppler_interpolation factor SeaSondeRCS object, ensuring within allowed range result exceeding maximum number Doppler bins interpolation.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_MUSIC_validate_doppler_interpolation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Doppler Interpolation Factor for SeaSondeRCS Objects — SeaSondeRCS_MUSIC_validate_doppler_interpolation","text":"","code":"SeaSondeRCS_MUSIC_validate_doppler_interpolation(value, seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_MUSIC_validate_doppler_interpolation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Doppler Interpolation Factor for SeaSondeRCS Objects — SeaSondeRCS_MUSIC_validate_doppler_interpolation","text":"value integer specifying Doppler interpolation factor. Must one 1, 2, 3, 4. seasonder_cs_object SeaSondeRCS object containing metadata Doppler bin calculations.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_MUSIC_validate_doppler_interpolation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Doppler Interpolation Factor for SeaSondeRCS Objects — SeaSondeRCS_MUSIC_validate_doppler_interpolation","text":"validated doppler_interpolation factor integer.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_MUSIC_validate_doppler_interpolation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Doppler Interpolation Factor for SeaSondeRCS Objects — SeaSondeRCS_MUSIC_validate_doppler_interpolation","text":"Doppler interpolation process increases number Doppler bins specified factor radial processing. function performs following validations: Ensures doppler_interpolation factor one 1, 2, 3, 4. Computes total number Doppler bins applying specified interpolation factor. number exceeds 2048, function aborts descriptive error message. maximum Doppler bins (2048) constraint derived CODAR's SeaSonde R8 Radial Config Setup, specifies product interpolation factor original number Doppler bins exceed limit.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_MUSIC_validate_doppler_interpolation.html","id":"warnings","dir":"Reference","previous_headings":"","what":"Warnings","title":"Validate Doppler Interpolation Factor for SeaSondeRCS Objects — SeaSondeRCS_MUSIC_validate_doppler_interpolation","text":"Using Doppler interpolation factors 3x 4x recommended. Exceeding 2048 Doppler bins interpolation result error.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_MUSIC_validate_doppler_interpolation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Doppler Interpolation Factor for SeaSondeRCS Objects — SeaSondeRCS_MUSIC_validate_doppler_interpolation","text":"","code":"if (FALSE) { # \\dontrun{ # Assume `cs_obj` is a valid SeaSondeRCS object doppler_factor <- SeaSondeRCS_MUSIC_validate_doppler_interpolation(2, cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_creation_step_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Creation Step Text — SeaSondeRCS_creation_step_text","title":"Generate Creation Step Text — SeaSondeRCS_creation_step_text","text":"function generates text message indicating time CS object created based current system time provided file path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_creation_step_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Creation Step Text — SeaSondeRCS_creation_step_text","text":"","code":"SeaSondeRCS_creation_step_text(file_path)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_creation_step_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Creation Step Text — SeaSondeRCS_creation_step_text","text":"file_path character string specifying path file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/SeaSondeRCS_creation_step_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Creation Step Text — SeaSondeRCS_creation_step_text","text":"character string formatted message indicating time creation file path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/compound.html","id":null,"dir":"Reference","previous_headings":"","what":"Assigment pipe — %<>%","title":"Assigment pipe — %<>%","text":"See magrittr::%<>% details.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/compound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assigment pipe — %<>%","text":"","code":"lhs %<>% rhs"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/compound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assigment pipe — %<>%","text":"lhs object serves initial value target. rhs function call using magrittr semantics.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/compound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assigment pipe — %<>%","text":"result calling rhs(lhs).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/dB_to_self_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dB Values to Self-Spectra Power — dB_to_self_spectra","title":"Convert dB Values to Self-Spectra Power — dB_to_self_spectra","text":"function converts power values expressed decibels (dB) linear self-spectra power values. conversion based given receiver gain, accounts radar system's amplification effects.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/dB_to_self_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dB Values to Self-Spectra Power — dB_to_self_spectra","text":"","code":"dB_to_self_spectra(dB_values, receiver_gain)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/dB_to_self_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dB Values to Self-Spectra Power — dB_to_self_spectra","text":"dB_values numeric vector. power values decibels (dB). receiver_gain numeric scalar. receiver gain decibels (dB).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/dB_to_self_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dB Values to Self-Spectra Power — dB_to_self_spectra","text":"numeric vector self-spectra power values linear scale.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/dB_to_self_spectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert dB Values to Self-Spectra Power — dB_to_self_spectra","text":"conversion decibels linear power follows equation: $$P = 10^{(dB + G)/10}$$ : \\( P \\) self-spectra power linear scale, \\( dB \\) represents power values decibels, \\( G \\) receiver gain decibels.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/dB_to_self_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert dB Values to Self-Spectra Power — dB_to_self_spectra","text":"","code":"if (FALSE) { # \\dontrun{ # Convert dB values to self-spectra power dB_vals <- c(-100, -80, -60) receiver_gain <- -34.2 spectrum_vals <- dB_to_self_spectra(dB_vals, receiver_gain) print(spectrum_vals) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/new_SeaSondeRCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New SeaSondeRCS Object — new_SeaSondeRCS","title":"Create a New SeaSondeRCS Object — new_SeaSondeRCS","text":"function constructs new SeaSondeRCS object provided header, data, version information.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/new_SeaSondeRCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New SeaSondeRCS Object — new_SeaSondeRCS","text":"","code":"new_SeaSondeRCS(header, data, seasonder_apm_object = NULL)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/new_SeaSondeRCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New SeaSondeRCS Object — new_SeaSondeRCS","text":"header list containing header information SeaSondeRCS object. data list containing data fields SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/new_SeaSondeRCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New SeaSondeRCS Object — new_SeaSondeRCS","text":"SeaSondeRCS object specified header, data, version.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/parse_metadata_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a Metadata Line from a SeaSonde APM File — parse_metadata_line","title":"Parse a Metadata Line from a SeaSonde APM File — parse_metadata_line","text":"function takes single line SeaSonde APM file parses named attribute corresponding value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/parse_metadata_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a Metadata Line from a SeaSonde APM File — parse_metadata_line","text":"","code":"parse_metadata_line(line)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/parse_metadata_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a Metadata Line from a SeaSonde APM File — parse_metadata_line","text":"line line text parse.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/parse_metadata_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a Metadata Line from a SeaSonde APM File — parse_metadata_line","text":"list containing attribute name value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/process_version_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a Specific Version of the SeaSonde File Header — process_version_header","title":"Process a Specific Version of the SeaSonde File Header — process_version_header","text":"function processes specified version SeaSonde file header. identifies appropriate header function given version, processes header, updates accumulating pool header data. Specifically:","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/process_version_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a Specific Version of the SeaSonde File Header — process_version_header","text":"","code":"process_version_header(   pool,   version,   specs,   connection,   endian = \"big\",   prev_data = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/process_version_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a Specific Version of the SeaSonde File Header — process_version_header","text":"pool List. accumulating list processed headers prior versions. version Integer. specific version header processed. E.g., version 3, function seasonder_readSeaSondeCSFileHeaderV3 present. specs List. Header specifications version. entry correspond version number contain required information process version's header. connection Connection object. file connection pointing SeaSonde file. endian Character string. Specifies byte order reading data. Can \"big\" (default) prev_data previous header data \"little\". Use appropriate value depending system architecture file's source.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/process_version_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a Specific Version of the SeaSonde File Header — process_version_header","text":"List. combination initial pool processed header given version. Fields current header overwrite append pool described .","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/process_version_header.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process a Specific Version of the SeaSonde File Header — process_version_header","text":"fields current header overlap accumulated pool, current header's values overwrite pool. Fields unique current header appended pool.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/process_version_header.html","id":"assumptions","dir":"Reference","previous_headings":"","what":"Assumptions","title":"Process a Specific Version of the SeaSonde File Header — process_version_header","text":"function assumes desired version-specific seasonder_readSeaSondeCSFileHeaderV* functions available global environment.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Control - Check Range and Type — qc_check_range","title":"Quality Control - Check Range and Type — qc_check_range","text":"function verifies given value lies within specified range matches expected type, provided.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Control - Check Range and Type — qc_check_range","text":"","code":"qc_check_range(field_value, min, max, expected_type = NULL)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Control - Check Range and Type — qc_check_range","text":"field_value value checked. min Minimum allowable value field_value. max Maximum allowable value field_value. expected_type (optional) expected type field_value. Default NULL.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Control - Check Range and Type — qc_check_range","text":"original field_value within range matches expected_type; otherwise, error raised.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Control - Check Type — qc_check_type","title":"Quality Control - Check Type — qc_check_type","text":"function verifies given value expected type.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Control - Check Type — qc_check_type","text":"","code":"qc_check_type(field_value, expected_type)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Control - Check Type — qc_check_type","text":"field_value value whose type needs checked. expected_type expected type field_value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Control - Check Type — qc_check_type","text":"original field_value matches expected_type; otherwise, error raised.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_unsigned.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Control Check for Unsigned Values — qc_check_unsigned","title":"Quality Control Check for Unsigned Values — qc_check_unsigned","text":"function performs quality control check ensure given field value unsigned number (.e., non-negative number). Optionally, can also check field value matches specified data type performing unsigned check.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_unsigned.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Control Check for Unsigned Values — qc_check_unsigned","text":"","code":"qc_check_unsigned(field_value, expected_type = NULL)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_unsigned.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Control Check for Unsigned Values — qc_check_unsigned","text":"field_value value checked. function verifies value non-negative. can type typically expected numeric value. expected_type optional parameter specifying expected data type field_value. provided, function first checks field_value matches expected type verifying unsigned. Default NULL, means type check performed.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/qc_check_unsigned.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Control Check for Unsigned Values — qc_check_unsigned","text":"Returns field_value passes checks: expected type (expected_type NULL) non-negative. checks fail, function logs error message aborts execution.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/readV6BlockData.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Version 6 Block Data — readV6BlockData","title":"Read Version 6 Block Data — readV6BlockData","text":"function reads processes regular repeated blocks data based provided specifications. Regular blocks read directly, repeated blocks processed recursively based set loops provided specifications.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/readV6BlockData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Version 6 Block Data — readV6BlockData","text":"","code":"readV6BlockData(   specs,   connection,   endian = \"big\",   prev_data = NULL,   remaining_loops = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/readV6BlockData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Version 6 Block Data — readV6BlockData","text":"specs list. Specifications detailing structure content data blocks. Contains variable names, types, quality check functions, related attributes. repeated blocks, 'repeat' key added details loop structure nested specifications. connection connection object. Represents connection data source. passed lower-level reading function. endian character string. Specifies byte order used. Default \"big\". Passed lower-level reading function. prev_data list. Previous data metadata might required inform reading process, loop lengths repeated blocks. Default NULL. remaining_loops character vector. Details remaining loops processed repeated blocks. Internally used recursive processing. Default NULL. provided, always sync repeat specifications.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/readV6BlockData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Version 6 Block Data — readV6BlockData","text":"list. Contains read processed data based provided specifications. Regular variables returned top level. Repeated blocks nested lists 'loop' 'data' keys detailing loop variable corresponding data.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_and_qc_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Quality Control a Single Field — read_and_qc_field","title":"Read and Quality Control a Single Field — read_and_qc_field","text":"auxiliary function reads field binary file using provided specification applies quality control function retrieved data. expectations functioning quality control functions described detail documentation seasonder_readSeaSondeCSFileBlock.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_and_qc_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Quality Control a Single Field — read_and_qc_field","text":"","code":"read_and_qc_field(field_spec, connection, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_and_qc_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Quality Control a Single Field — read_and_qc_field","text":"field_spec list containing specifications field read. contain: type: type data read, passed seasonder_readCSField. qc_fun: name quality control function. detailed seasonder_readSeaSondeCSFileBlock, function present shared environment seasonder_the must accept field_value first argument, followed arguments specified qc_params. qc_params: list additional parameters pass quality control function. See seasonder_readSeaSondeCSFileBlock detailed expectations QC function behavior. connection connection binary file. endian character string indicating byte order. Options \"big\" \"little\" (default \"big\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_and_qc_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Quality Control a Single Field — read_and_qc_field","text":"value field quality control. Can original value, transformed value, NULL value fails quality control. exact behavior quality control function, including handling NULL values, detailed seasonder_readSeaSondeCSFileBlock.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_and_qc_field.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Read and Quality Control a Single Field — read_and_qc_field","text":"function utilizes rlang package manage conditions provide detailed structured condition messages: Condition Classes: seasonder_cs_field_skipped: Condition indicates CSField skipped reading. seasonder_cs_field_qc_fun_rerun: Condition indicates rerun quality control function triggered. seasonder_cs_field_qc_fun_not_defined_error: Error raised quality control function specified found shared environment seasonder_the. seasonder_cs_field_qc_fun_error: Error raised issue occurs applying quality control function. Condition Cases: CSField skipped reading, condition seasonder_cs_field_skipped used skip QC re-signaled. alternate QC rerun using seasonder_rerun_qc_with_fun restart, condition seasonder_cs_field_qc_fun_rerun signaled. quality control function specified found shared environment seasonder_the, error seasonder_cs_field_qc_fun_not_defined_error raised. issue applying quality control function, error seasonder_cs_field_qc_fun_error raised. Restart Options: function provides structured mechanisms recover errors/conditions execution using withRestarts. following restart options available: seasonder_rerun_qc_with_fun: Allows rerunning QC alternate function. Usage: custom condition handler, can call seasonder_rerun_qc_with_fun(cond, alternateQCfunction) trigger restart run alternate QC using alternateQCfunction. alternateQCfunction used follows alternateQCfunction(x) x value. extra parameters passed. Effect: invoked, function logs info message detailing reason rerun, returns value returned alternateQCfunction.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_matrix_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Row from a Matrix Represented as Text Lines — read_matrix_row","title":"Read a Row from a Matrix Represented as Text Lines — read_matrix_row","text":"function reads row numbers matrix represented array text lines. used facilitate reading data SeaSonde APM files.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_matrix_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Row from a Matrix Represented as Text Lines — read_matrix_row","text":"","code":"read_matrix_row(lines, start, number_of_lines_to_read)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_matrix_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Row from a Matrix Represented as Text Lines — read_matrix_row","text":"lines array lines, representing part row. start start index lines read . number_of_lines_to_read number lines read form row.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/read_matrix_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Row from a Matrix Represented as Text Lines — read_matrix_row","text":"numeric vector containing row values.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2DopplerFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Doppler Bins to Doppler Frequencies — seasonder_Bins2DopplerFreq","title":"Convert Doppler Bins to Doppler Frequencies — seasonder_Bins2DopplerFreq","text":"function retrieves Doppler frequency values corresponding specified bin indices given SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2DopplerFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Doppler Bins to Doppler Frequencies — seasonder_Bins2DopplerFreq","text":"","code":"seasonder_Bins2DopplerFreq(seasonder_cs_obj, bins)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2DopplerFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Doppler Bins to Doppler Frequencies — seasonder_Bins2DopplerFreq","text":"seasonder_cs_obj SeaSondeR cross-spectral object containing Doppler bin metadata. bins numeric vector specifying Doppler bin indices.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2DopplerFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Doppler Bins to Doppler Frequencies — seasonder_Bins2DopplerFreq","text":"numeric vector Doppler frequencies (Hz) corresponding specified bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2DopplerFreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Doppler Bins to Doppler Frequencies — seasonder_Bins2DopplerFreq","text":"function retrieves full set Doppler bin frequencies using seasonder_getDopplerBinsFrequency non-normalized form. selects Doppler frequencies corresponding specified bin indices.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2DopplerFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Doppler Bins to Doppler Frequencies — seasonder_Bins2DopplerFreq","text":"","code":"if (FALSE) { # \\dontrun{ # Convert specific Doppler bins to Doppler frequencies cs_obj <- seasonder_createSeaSondeRCS(...) bins <- c(10, 20, 30)  # Example bin indices freqs <- seasonder_Bins2DopplerFreq(cs_obj, bins) print(freqs) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2NormalizedDopplerFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Doppler Bins to Normalized Doppler Frequency — seasonder_Bins2NormalizedDopplerFreq","title":"Convert Doppler Bins to Normalized Doppler Frequency — seasonder_Bins2NormalizedDopplerFreq","text":"function retrieves normalized Doppler frequencies corresponding specified bins given SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2NormalizedDopplerFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Doppler Bins to Normalized Doppler Frequency — seasonder_Bins2NormalizedDopplerFreq","text":"","code":"seasonder_Bins2NormalizedDopplerFreq(seasonder_cs_obj, bins)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2NormalizedDopplerFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Doppler Bins to Normalized Doppler Frequency — seasonder_Bins2NormalizedDopplerFreq","text":"seasonder_cs_obj SeaSondeR cross-spectral object containing Doppler bin metadata. bins numeric vector specifying Doppler bin indices.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2NormalizedDopplerFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Doppler Bins to Normalized Doppler Frequency — seasonder_Bins2NormalizedDopplerFreq","text":"numeric vector normalized Doppler frequencies corresponding specified bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2NormalizedDopplerFreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Doppler Bins to Normalized Doppler Frequency — seasonder_Bins2NormalizedDopplerFreq","text":"function first retrieves Doppler bin frequencies normalized form using seasonder_getDopplerBinsFrequency. selects normalized Doppler frequencies corresponding specified bin indices. Normalized Doppler Frequency Calculation: normalized Doppler frequency typically defined : $$f_{norm} = \\frac{f_{doppler}}{f_{bragg}}$$ : \\( f_norm \\) normalized Doppler frequency, \\( f_doppler \\) Doppler frequency given bin, \\( f_bragg \\) Bragg frequency, computed based radar wavelength.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_Bins2NormalizedDopplerFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Doppler Bins to Normalized Doppler Frequency — seasonder_Bins2NormalizedDopplerFreq","text":"","code":"if (FALSE) { # \\dontrun{ # Convert specific Doppler bins to normalized Doppler frequency cs_obj <- seasonder_createSeaSondeRCS(...) bins <- c(10, 20, 30) normalized_freqs <- seasonder_Bins2NormalizedDopplerFreq(cs_obj, bins) print(normalized_freqs) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_CSSY2CSHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform CSSY Header to SeaSondeRCS Header — seasonder_CSSY2CSHeader","title":"Transform CSSY Header to SeaSondeRCS Header — seasonder_CSSY2CSHeader","text":"helper function extracts 'cs4h' component CSSY header, removes original header, embeds remaining header information within 'header_cssy' field CS header.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_CSSY2CSHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform CSSY Header to SeaSondeRCS Header — seasonder_CSSY2CSHeader","text":"","code":"seasonder_CSSY2CSHeader(header)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_CSSY2CSHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform CSSY Header to SeaSondeRCS Header — seasonder_CSSY2CSHeader","text":"header list representing CSSY header. Must contain 'cs4h' component.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_CSSY2CSHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform CSSY Header to SeaSondeRCS Header — seasonder_CSSY2CSHeader","text":"transformed header primary CS header taken 'cs4h' remaining CSSY header fields stored 'header_cssy' element.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2Bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Doppler Frequencies to Doppler Bins — seasonder_DopplerFreq2Bins","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_DopplerFreq2Bins","text":"function converts set Doppler frequency values corresponding Doppler bin indices within SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2Bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_DopplerFreq2Bins","text":"","code":"seasonder_DopplerFreq2Bins(seasonder_cs_obj, doppler_values)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2Bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_DopplerFreq2Bins","text":"seasonder_cs_obj SeaSondeR cross-spectral object containing metadata Doppler bins. doppler_values numeric vector specifying Doppler frequencies converted bin indices.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2Bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_DopplerFreq2Bins","text":"integer vector Doppler bin indices corresponding input Doppler frequencies. Values fall outside valid bin range assigned NA.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2Bins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_DopplerFreq2Bins","text":"function first retrieves Doppler frequency bins given SeaSondeR object using seasonder_getDopplerBinsFrequency non-normalized form. spectral resolution, defines frequency step size (\\( f\\)), obtained using seasonder_getDopplerSpectrumResolution. number Doppler bins determined using seasonder_getnDopplerCells. information, function calls seasonder_computeDopplerFreq2Bins determine corresponding bin indices input Doppler frequency.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2Bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_DopplerFreq2Bins","text":"","code":"if (FALSE) { # \\dontrun{ # Convert Doppler frequencies to bin indices cs_obj <- seasonder_createSeaSondeRCS(...) doppler_values <- c(-0.2, 0, 0.5)  # Example Doppler frequencies in Hz bins <- seasonder_DopplerFreq2Bins(cs_obj, doppler_values) print(bins) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2NormalizedDopplerFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Doppler Frequencies to Normalized Doppler Frequencies — seasonder_DopplerFreq2NormalizedDopplerFreq","title":"Convert Doppler Frequencies to Normalized Doppler Frequencies — seasonder_DopplerFreq2NormalizedDopplerFreq","text":"function converts Doppler frequencies (Hz) corresponding normalized Doppler frequencies within SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2NormalizedDopplerFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Doppler Frequencies to Normalized Doppler Frequencies — seasonder_DopplerFreq2NormalizedDopplerFreq","text":"","code":"seasonder_DopplerFreq2NormalizedDopplerFreq(seasonder_cs_obj, doppler_values)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2NormalizedDopplerFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Doppler Frequencies to Normalized Doppler Frequencies — seasonder_DopplerFreq2NormalizedDopplerFreq","text":"seasonder_cs_obj SeaSondeR cross-spectral object containing metadata Doppler bins. doppler_values numeric vector specifying Doppler frequencies (Hz) converted normalized Doppler frequencies.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2NormalizedDopplerFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Doppler Frequencies to Normalized Doppler Frequencies — seasonder_DopplerFreq2NormalizedDopplerFreq","text":"numeric vector normalized Doppler frequencies corresponding input Doppler values.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2NormalizedDopplerFreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Doppler Frequencies to Normalized Doppler Frequencies — seasonder_DopplerFreq2NormalizedDopplerFreq","text":"function follows steps: Calls seasonder_DopplerFreq2Bins convert input Doppler frequencies Doppler bin indices. Calls seasonder_Bins2NormalizedDopplerFreq obtain corresponding normalized Doppler frequencies. normalized Doppler frequency computed : $$f_{norm} = \\frac{f_{doppler}}{f_{bragg}}$$ : \\( f_norm \\) normalized Doppler frequency, \\( f_doppler \\) Doppler frequency given bin, \\( f_bragg \\) Bragg frequency, computed based radar wavelength. function ensures consistency mapping input frequencies closest bin representation normalization.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_DopplerFreq2NormalizedDopplerFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Doppler Frequencies to Normalized Doppler Frequencies — seasonder_DopplerFreq2NormalizedDopplerFreq","text":"","code":"if (FALSE) { # \\dontrun{ # Convert Doppler frequencies to normalized Doppler frequencies cs_obj <- seasonder_createSeaSondeRCS(...) doppler_values <- c(-0.3, 0, 0.6)  # Example Doppler frequencies in Hz normalized_freqs <- seasonder_DopplerFreq2NormalizedDopplerFreq(cs_obj, doppler_values) print(normalized_freqs) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICBearing2GeographicalBearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MUSIC Bearings to Geographic Bearings — seasonder_MUSICBearing2GeographicalBearing","title":"Convert MUSIC Bearings to Geographic Bearings — seasonder_MUSICBearing2GeographicalBearing","text":"function converts MUSIC bearings (relative antenna) geographic bearings using antenna's bearing information SeaSondeRAPM object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICBearing2GeographicalBearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MUSIC Bearings to Geographic Bearings — seasonder_MUSICBearing2GeographicalBearing","text":"","code":"seasonder_MUSICBearing2GeographicalBearing(bearings, seasonder_apm_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICBearing2GeographicalBearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MUSIC Bearings to Geographic Bearings — seasonder_MUSICBearing2GeographicalBearing","text":"bearings list numeric vectors containing MUSIC bearings degrees. vector corresponds set bearings relative antenna. seasonder_apm_object SeaSondeRAPM object containing antenna's metadata, including antenna's bearing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICBearing2GeographicalBearing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert MUSIC Bearings to Geographic Bearings — seasonder_MUSICBearing2GeographicalBearing","text":"list numeric vectors containing geographic bearings degrees. vector corresponds set geographic bearings derived input.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICBearing2GeographicalBearing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert MUSIC Bearings to Geographic Bearings — seasonder_MUSICBearing2GeographicalBearing","text":"geographic bearing calculated : Multiplying MUSIC bearings -1 invert direction. Adjusting angles range [0, 360) using modulo 360. Adding antenna bearing value wrapping result range [0, 360) using modulo 360. formula bearing : [ geo\\_bearing = ((-1  music\\_bearing  360) + antenna\\_bearing)  360 ]","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICBearing2GeographicalBearing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert MUSIC Bearings to Geographic Bearings — seasonder_MUSICBearing2GeographicalBearing","text":"","code":"if (FALSE) { # \\dontrun{ # Example conversion music_bearings <- list(c(45, 90, 135), c(270, 315, 360)) antenna_apm <- seasonder_createSeaSondeRAPM()  # Assuming a valid SeaSondeRAPM object geo_bearings <- seasonder_MUSICBearing2GeographicalBearing(music_bearings, antenna_apm) print(geo_bearings) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckEigenValueRatio.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Eigenvalue Ratio Using MUSIC Algorithm — seasonder_MUSICCheckEigenValueRatio","title":"Validate Eigenvalue Ratio Using MUSIC Algorithm — seasonder_MUSICCheckEigenValueRatio","text":"function implements P1 test solutions derived using MUSIC algorithm. test checks ratio largest second-largest eigenvalues, serves indicator signal quality.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckEigenValueRatio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Eigenvalue Ratio Using MUSIC Algorithm — seasonder_MUSICCheckEigenValueRatio","text":"","code":"seasonder_MUSICCheckEigenValueRatio(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckEigenValueRatio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Eigenvalue Ratio Using MUSIC Algorithm — seasonder_MUSICCheckEigenValueRatio","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC solutions related data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckEigenValueRatio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Eigenvalue Ratio Using MUSIC Algorithm — seasonder_MUSICCheckEigenValueRatio","text":"updated SeaSondeRCS object following modifications: new column eigen_values_ratio MUSIC data. logical column P1_check indicating whether solution passes P1 test. Updated retained_solution values solutions fail test.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckEigenValueRatio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Eigenvalue Ratio Using MUSIC Algorithm — seasonder_MUSICCheckEigenValueRatio","text":"P1 test based ratio largest eigenvalue (\\(_1\\)) second-largest eigenvalue (\\(_2\\)): [ Ratio = _1_2 ] ratio compared threshold defined MUSIC parameters determine whether solution considered valid. Solutions failing test marked \"single.\"","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckEigenValueRatio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Eigenvalue Ratio Using MUSIC Algorithm — seasonder_MUSICCheckEigenValueRatio","text":"","code":"if (FALSE) { # \\dontrun{ updated_obj <- seasonder_MUSICCheckEigenValueRatio(seasonder_cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Signal Matrix Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalMatrix","title":"Validate Signal Matrix Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalMatrix","text":"function implements P3 test solutions derived using MUSIC algorithm. test evaluates ratio diagonal -diagonal powers signal covariance matrix.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Signal Matrix Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalMatrix","text":"","code":"seasonder_MUSICCheckSignalMatrix(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Signal Matrix Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalMatrix","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC solutions related data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Signal Matrix Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalMatrix","text":"updated SeaSondeRCS object following modifications: new column diag_off_diag_power_ratio MUSIC data. logical column P3_check indicating whether solution passes P3 test. Updated retained_solution values solutions fail test.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Signal Matrix Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalMatrix","text":"P3 test evaluates power ratio diagonal (\\(P_diag\\)) -diagonal (\\(P_off-diag\\)) elements covariance matrix: [ Ratio = P_diagP_off-diag ] ratio compared threshold defined MUSIC parameters. solutions meet following criteria retained: solution two bearings. power ratio threshold. Solutions failing test marked \"single.\"","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Signal Matrix Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalMatrix","text":"","code":"if (FALSE) { # \\dontrun{ updated_obj <- seasonder_MUSICCheckSignalMatrix(seasonder_cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalPowers.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Signal Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalPowers","title":"Validate Signal Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalPowers","text":"function implements P2 test solutions derived using MUSIC algorithm. test evaluates ratio largest smallest signal powers dual-bearing solutions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalPowers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Signal Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalPowers","text":"","code":"seasonder_MUSICCheckSignalPowers(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalPowers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Signal Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalPowers","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC solutions related data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalPowers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Signal Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalPowers","text":"updated SeaSondeRCS object following modifications: new column signal_power_ratio MUSIC data. logical column P2_check indicating whether solution passes P2 test. Updated retained_solution values solutions fail test.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalPowers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Signal Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalPowers","text":"P2 test based ratio largest signal power (\\(P_max\\)) smallest signal power (\\(P_min\\)): [ Ratio = P_maxP_min ] ratio compared threshold defined MUSIC parameters. solutions meet following criteria retained: solution two bearings. signal power ratio threshold. Solutions failing test marked \"single.\"","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCheckSignalPowers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Signal Power Ratios Using MUSIC Algorithm — seasonder_MUSICCheckSignalPowers","text":"","code":"if (FALSE) { # \\dontrun{ updated_obj <- seasonder_MUSICCheckSignalPowers(seasonder_cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the MUSIC Covariance Matrix for each Given Cell Range and Doppler Bin — seasonder_MUSICComputeCov","title":"Calculate the MUSIC Covariance Matrix for each Given Cell Range and Doppler Bin — seasonder_MUSICComputeCov","text":"function computes Multiple Signal Classification (MUSIC) covariance matrix cell range Doppler bin SeaSonde Cross Spectra (CS) data. MUSIC algorithm used direction finding spectral estimation.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the MUSIC Covariance Matrix for each Given Cell Range and Doppler Bin — seasonder_MUSICComputeCov","text":"","code":"seasonder_MUSICComputeCov(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeCov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the MUSIC Covariance Matrix for each Given Cell Range and Doppler Bin — seasonder_MUSICComputeCov","text":"seasonder_cs_object SeaSondeRCS object containing cross-spectra data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeCov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the MUSIC Covariance Matrix for each Given Cell Range and Doppler Bin — seasonder_MUSICComputeCov","text":"SeaSondeRCS object updated computed 3x3 complex covariance matrix cell range Doppler bin. covariance matrix stored MUSIC data field. matrix element \\(C_{ij}\\) calculated based auto-spectra (diagonal elements) cross-spectra (-diagonal elements). - Diagonal elements (\\(= j\\)) derived auto-spectra SSA{}. - -diagonal elements (\\(\\neq j\\)) derived cross-spectra CSij. - Auto-spectra values third antenna (SSA3) taken absolute values comply CODAR's recommendation handle negative values indicating noise interference.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeCov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the MUSIC Covariance Matrix for each Given Cell Range and Doppler Bin — seasonder_MUSICComputeCov","text":"MUSIC algorithm estimates direction arrival (DOA) signals, requiring computation covariance matrix sensor data. function constructs covariance matrix iterating auto-spectra (SSA{}) cross-spectra (CSij) fields cross-spectra data. diagonal elements (\\(= j\\)), matrix uses data auto-spectra field corresponding antenna index (SSA1, SSA2, SSA3). Negative values SSA3, indicate noise interference, converted absolute values use, per Cross Spectra File Format Version 6 guidelines. -diagonal elements (\\(\\neq j\\)) derived cross-spectra fields, CS12 CS23. row index greater column index, conjugate value used.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeCov.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the MUSIC Covariance Matrix for each Given Cell Range and Doppler Bin — seasonder_MUSICComputeCov","text":"Cross Spectra File Format Version 6, CODAR. (2016). Paolo, T. de, Cook, T. & Terrill, E. Properties HF RADAR Compact Antenna Arrays Effect MUSIC Algorithm. OCEANS 2007 1–10 (2007) doi:10.1109/oceans.2007.4449265.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeCov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the MUSIC Covariance Matrix for each Given Cell Range and Doppler Bin — seasonder_MUSICComputeCov","text":"","code":"if (FALSE) { # \\dontrun{ # Assume seasonder_cs_obj is a valid SeaSondeRCS object updated_obj <- seasonder_MUSICComputeCov(seasonder_cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeDOAProjections.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute DOA Functions Using the MUSIC Algorithm — seasonder_MUSICComputeDOAProjections","title":"Compute DOA Functions Using the MUSIC Algorithm — seasonder_MUSICComputeDOAProjections","text":"function calculates Direction Arrival (DOA) functions based MUSIC algorithm given SeaSonde cross-spectra (CS) object. projects antenna patterns onto noise subspace Doppler bin computes single dual signal solutions, following MUSIC method.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeDOAProjections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute DOA Functions Using the MUSIC Algorithm — seasonder_MUSICComputeDOAProjections","text":"","code":"seasonder_MUSICComputeDOAProjections(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeDOAProjections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute DOA Functions Using the MUSIC Algorithm — seasonder_MUSICComputeDOAProjections","text":"seasonder_cs_object object representing cross-spectra (CS) data SeaSonde.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeDOAProjections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute DOA Functions Using the MUSIC Algorithm — seasonder_MUSICComputeDOAProjections","text":"updated seasonder_cs_object MUSIC DOA functions computed appended.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeDOAProjections.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute DOA Functions Using the MUSIC Algorithm — seasonder_MUSICComputeDOAProjections","text":"function operates follows: sets processing step indicating start DOA function computation. Retrieves Antenna Pattern Measurement (APM) bearings associated CS object. Iteratively computes projections antenna pattern responses noise subspace Doppler bin using MUSIC algorithm. includes: Initializing storage projection results. Calculating projections single (m = 1) dual (m = 2) signal solutions using eigenvectors defining noise subspace. bearing, projecting antenna manifold vector onto noise subspace, described formula: $$DOA(\\theta) = \\frac{1}{^*(\\theta) E_n E_n^* (\\theta)}$$ : \\(E_n\\) eigenvector matrix noise subspace. \\((\\theta)\\) antenna pattern response vector bearing \\(\\theta\\). \\(^*(\\theta)\\) conjugate transpose. Appends computed DOA functions MUSIC data CS object. Updates processing step indicate completion.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeDOAProjections.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute DOA Functions Using the MUSIC Algorithm — seasonder_MUSICComputeDOAProjections","text":"Paolo, T. de, Cook, T., & Terrill, E. (2007). Properties HF RADAR Compact Antenna Arrays Effect MUSIC Algorithm. OCEANS 2007, 1–10. doi:10.1109/oceans.2007.4449265.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeDOAProjections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute DOA Functions Using the MUSIC Algorithm — seasonder_MUSICComputeDOAProjections","text":"","code":"if (FALSE) { # \\dontrun{ cs_object <- seasonder_MUSICComputeDOAProjections(cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputePropDualSols.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Proportion of Dual Solutions in MUSIC Data — seasonder_MUSICComputePropDualSols","title":"Compute the Proportion of Dual Solutions in MUSIC Data — seasonder_MUSICComputePropDualSols","text":"function calculates proportion \"dual\" solutions MUSIC data associated given SeaSondeRCS object. updates object computed proportion new attribute.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputePropDualSols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Proportion of Dual Solutions in MUSIC Data — seasonder_MUSICComputePropDualSols","text":"","code":"seasonder_MUSICComputePropDualSols(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputePropDualSols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Proportion of Dual Solutions in MUSIC Data — seasonder_MUSICComputePropDualSols","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC data related attributes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputePropDualSols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Proportion of Dual Solutions in MUSIC Data — seasonder_MUSICComputePropDualSols","text":"SeaSondeRCS object calculated proportion \"dual\" solutions stored attribute. attribute can accessed using relevant getter function.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputePropDualSols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Proportion of Dual Solutions in MUSIC Data — seasonder_MUSICComputePropDualSols","text":"function performs following steps: Extracts MUSIC data provided SeaSondeRCS object. Computes proportion entries retained_solution column MUSIC data labeled \"dual\". Updates SeaSondeRCS object adding computed proportion attribute using seasonder_setSeaSondeRCS_MUSIC_dual_solutions_proportion.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputePropDualSols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Proportion of Dual Solutions in MUSIC Data — seasonder_MUSICComputePropDualSols","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object with MUSIC data updated_object <- seasonder_MUSICComputePropDualSols(cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeSignalPowerMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Signal Power Matrix for MUSIC Algorithm — seasonder_MUSICComputeSignalPowerMatrix","title":"Compute Signal Power Matrix for MUSIC Algorithm — seasonder_MUSICComputeSignalPowerMatrix","text":"function computes signal power matrix direction arrival (DOA) solution obtained MUSIC algorithm. updates MUSIC data provided SeaSondeRCS object computed power matrices.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeSignalPowerMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Signal Power Matrix for MUSIC Algorithm — seasonder_MUSICComputeSignalPowerMatrix","text":"","code":"seasonder_MUSICComputeSignalPowerMatrix(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeSignalPowerMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Signal Power Matrix for MUSIC Algorithm — seasonder_MUSICComputeSignalPowerMatrix","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC data, including eigenvalues, eigenvectors, DOA solutions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeSignalPowerMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Signal Power Matrix for MUSIC Algorithm — seasonder_MUSICComputeSignalPowerMatrix","text":"updated SeaSondeRCS object MUSIC data containing computed power matrices dual single solutions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeSignalPowerMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Signal Power Matrix for MUSIC Algorithm — seasonder_MUSICComputeSignalPowerMatrix","text":"function performs following steps: Retrieves MUSIC data SeaSondeRCS object. Defines internal function update DOA solutions computed power matrices: dual steering vectors (DOA_sol$dual$), computes power matrix using seasonder_computePowerMatrix updates DOA_sol$dual$P. single steering vectors (DOA_sol$single$), computes power matrix using seasonder_computePowerMatrix updates DOA_sol$single$P. Iterates MUSIC data, applying update function set eigenvalues DOA solutions. Updates SeaSondeRCS object modified MUSIC data.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICComputeSignalPowerMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Signal Power Matrix for MUSIC Algorithm — seasonder_MUSICComputeSignalPowerMatrix","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming seasonder_cs_object is a valid SeaSondeRCS object updated_object <- seasonder_MUSICComputeSignalPowerMatrix(seasonder_cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCovDecomposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Eigen Decomposition of the MUSIC Covariance Matrix — seasonder_MUSICCovDecomposition","title":"Eigen Decomposition of the MUSIC Covariance Matrix — seasonder_MUSICCovDecomposition","text":"Performs eigen decomposition MUSIC covariance matrix obtain eigenvalues eigenvectors. decomposition critical step MUSIC algorithm spectral estimation direction finding, enables identification signal noise subspaces.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCovDecomposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eigen Decomposition of the MUSIC Covariance Matrix — seasonder_MUSICCovDecomposition","text":"","code":"seasonder_MUSICCovDecomposition(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCovDecomposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eigen Decomposition of the MUSIC Covariance Matrix — seasonder_MUSICCovDecomposition","text":"seasonder_cs_object SeaSondeRCS object containing covariance matrices derived cross-spectra data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCovDecomposition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eigen Decomposition of the MUSIC Covariance Matrix — seasonder_MUSICCovDecomposition","text":"updated SeaSondeRCS object Doppler cell includes eigenvalues eigenvectors covariance matrix. eigenvalues sorted descending order, eigenvectors aligned accordingly. updates include: eigen$values: numeric vector containing sorted eigenvalues Doppler cell. eigen$vectors: 3x3 matrix corresponding eigenvectors Doppler cell, aligned eigenvalues.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCovDecomposition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Eigen Decomposition of the MUSIC Covariance Matrix — seasonder_MUSICCovDecomposition","text":"covariance matrix represents one Doppler cell averaged cross-spectra three received signals. matrix captures summation signals bearings (plus noise) received antennas. estimate direction arrival (DOA), covariance matrix subjected eigenvalue decomposition (diagonalization) estimate signal noise subspaces. practical HF radar systems, two primary sources noise: System (thermal) noise: Generated receiving equipment assumed uncorrelated antennas. Spatial noise field: Includes wind-wave noise current noise, modeled Gaussian, introduces correlation. eigenvalue decomposition produces: Three eigenvalues, ordered largest smallest. Three corresponding eigenvectors forming 3-dimensional orthonormal basis. Based largest eigenvalues: one signal present, first eigenvector defines 1-dimensional signal subspace, remaining eigenvectors represent 2-dimensional noise subspace. two signals present, first two eigenvectors form 2-dimensional signal subspace, remaining eigenvector represents 1-dimensional noise subspace. signal noise subspaces orthogonal. decomposition facilitates identifying signal's direction finding antenna manifold best fits signal subspace.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCovDecomposition.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Eigen Decomposition of the MUSIC Covariance Matrix — seasonder_MUSICCovDecomposition","text":"Paolo, T. de, Cook, T. & Terrill, E. Properties HF RADAR Compact Antenna Arrays Effect MUSIC Algorithm. OCEANS 2007 1–10 (2007) doi:10.1109/oceans.2007.4449265.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICCovDecomposition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eigen Decomposition of the MUSIC Covariance Matrix — seasonder_MUSICCovDecomposition","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid SeaSondeRCS object cs_object <- seasonder_MUSICCovDecomposition(cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractDOASolutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Direction of Arrival (DOA) Solutions Using MUSIC Algorithm — seasonder_MUSICExtractDOASolutions","title":"Extract Direction of Arrival (DOA) Solutions Using MUSIC Algorithm — seasonder_MUSICExtractDOASolutions","text":"function analyzes projection data using Multiple Signal Classification (MUSIC) algorithm identify Direction Arrival (DOA) solutions radar signals. implements methodology described Paolo Terril (2007) HF radar signal analysis.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractDOASolutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Direction of Arrival (DOA) Solutions Using MUSIC Algorithm — seasonder_MUSICExtractDOASolutions","text":"","code":"seasonder_MUSICExtractDOASolutions(projections)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractDOASolutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Direction of Arrival (DOA) Solutions Using MUSIC Algorithm — seasonder_MUSICExtractDOASolutions","text":"projections matrix projections column corresponds set MUSIC spectra single dual solutions. matrix attribute \"bearings\" indicating corresponding bearing angles degrees.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractDOASolutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Direction of Arrival (DOA) Solutions Using MUSIC Algorithm — seasonder_MUSICExtractDOASolutions","text":"list containing extracted single dual DOA solutions, : bearing: bearing(s) corresponding detected peak(s). : associated antenna pattern matrix values detected peak(s). peak_resp: response levels detected peak(s) dB.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractDOASolutions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Direction of Arrival (DOA) Solutions Using MUSIC Algorithm — seasonder_MUSICExtractDOASolutions","text":"function performs following steps: Reverses distances single dual solution projections enhance peak detectability. Detects peaks reversed single solution projection, retaining highest peak. Detects peaks reversed dual solution projection, retaining two highest peaks. Maps identified peak positions back corresponding bearings. identification DOA solutions using MUSIC relies inversion spectral distances, detailed Paolo Terril (2007), emphasize potential peaks corresponding source directions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractDOASolutions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Direction of Arrival (DOA) Solutions Using MUSIC Algorithm — seasonder_MUSICExtractDOASolutions","text":"Paolo, S., & Terril, E. (2007). Detection characterization signals HF radar cross-spectra using MUSIC algorithm. Journal Atmospheric Oceanic Technology.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractDOASolutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Direction of Arrival (DOA) Solutions Using MUSIC Algorithm — seasonder_MUSICExtractDOASolutions","text":"","code":"if (FALSE) { # \\dontrun{ projections <- matrix(runif(100), nrow = 2, ncol = 50) attr(projections, \"bearings\") <- seq(0, 359, length.out = 50) result <- seasonder_MUSICExtractDOASolutions(projections) print(result) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and Validate DOA Peaks Using MUSIC Algorithm — seasonder_MUSICExtractPeaks","title":"Extract and Validate DOA Peaks Using MUSIC Algorithm — seasonder_MUSICExtractPeaks","text":"function processes SeaSondeRCS object extract Direction Arrival (DOA) solutions using MUSIC algorithm validates retained solutions based extracted peaks.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and Validate DOA Peaks Using MUSIC Algorithm — seasonder_MUSICExtractPeaks","text":"","code":"seasonder_MUSICExtractPeaks(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and Validate DOA Peaks Using MUSIC Algorithm — seasonder_MUSICExtractPeaks","text":"seasonder_cs_object object class SeaSondeRCS containing cross-spectra data processed MUSIC algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and Validate DOA Peaks Using MUSIC Algorithm — seasonder_MUSICExtractPeaks","text":"updated SeaSondeRCS object following fields modified: MUSIC: Contains extracted DOA solutions. ProcessingSteps: Includes log peak extraction process.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract and Validate DOA Peaks Using MUSIC Algorithm — seasonder_MUSICExtractPeaks","text":"function performs following operations: Initializes peak extraction process logs start. Extracts DOA solutions set projections using seasonder_MUSICExtractDOASolutions. Validates adjusts retained solution types using seasonder_MUSICExtractPeaksCheckRetainedSolution. Updates SeaSondeRCS object extracted validated solutions. Logs completion peak extraction process. MUSIC algorithm's implementation follows theoretical framework outlined Paolo Terril (2007), emphasizing identification signal directions HF radar cross-spectra.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract and Validate DOA Peaks Using MUSIC Algorithm — seasonder_MUSICExtractPeaks","text":"Paolo, S., & Terril, E. (2007). Detection characterization signals HF radar cross-spectra using MUSIC algorithm. Journal Atmospheric Oceanic Technology.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and Validate DOA Peaks Using MUSIC Algorithm — seasonder_MUSICExtractPeaks","text":"","code":"if (FALSE) { # \\dontrun{ cs_object <- seasonder_createSeaSondeRCS(x = \"path/to/cs_file\") cs_object <- seasonder_MUSICExtractPeaks(cs_object) print(cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaksCheckRetainedSolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Retained Solution in MUSIC Algorithm Peak Extraction — seasonder_MUSICExtractPeaksCheckRetainedSolution","title":"Validate Retained Solution in MUSIC Algorithm Peak Extraction — seasonder_MUSICExtractPeaksCheckRetainedSolution","text":"function verifies adjusts retained solution type (\"single\" \"dual\") based Direction Arrival (DOA) solutions extracted using MUSIC algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaksCheckRetainedSolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Retained Solution in MUSIC Algorithm Peak Extraction — seasonder_MUSICExtractPeaksCheckRetainedSolution","text":"","code":"seasonder_MUSICExtractPeaksCheckRetainedSolution(ret_sol, DOA_sol)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaksCheckRetainedSolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Retained Solution in MUSIC Algorithm Peak Extraction — seasonder_MUSICExtractPeaksCheckRetainedSolution","text":"ret_sol character string specifying initial solution type retain. Valid values \"single\" \"dual\". DOA_sol list containing extracted DOA solutions, returned seasonder_MUSICExtractDOASolutions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaksCheckRetainedSolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Retained Solution in MUSIC Algorithm Peak Extraction — seasonder_MUSICExtractPeaksCheckRetainedSolution","text":"character string indicating validated solution type: \"single\": one single solution bearing valid. \"dual\": valid dual solution bearings detected. \"none\": valid bearings found.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaksCheckRetainedSolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Retained Solution in MUSIC Algorithm Peak Extraction — seasonder_MUSICExtractPeaksCheckRetainedSolution","text":"function performs following checks: retained solution \"dual\" valid dual solution bearings exist, defaults \"single\" valid. retained solution \"single\" valid single solution bearings exist, defaults \"none\". validation ensures output solutions consistent detected peaks, addressing potential discrepancies initial assumptions solution type.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICExtractPeaksCheckRetainedSolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Retained Solution in MUSIC Algorithm Peak Extraction — seasonder_MUSICExtractPeaksCheckRetainedSolution","text":"","code":"if (FALSE) { # \\dontrun{ ret_sol <- \"dual\" DOA_sol <- list(single = list(bearing = 45), dual = list(bearing = c(30, 60))) result <- seasonder_MUSICExtractPeaksCheckRetainedSolution(ret_sol, DOA_sol) print(result) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Covariance Matrix for MUSIC Algorithm — seasonder_MUSICInitCov","title":"Initialize Covariance Matrix for MUSIC Algorithm — seasonder_MUSICInitCov","text":"function initializes covariance matrix use MUSIC algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Covariance Matrix for MUSIC Algorithm — seasonder_MUSICInitCov","text":"","code":"seasonder_MUSICInitCov()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitCov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Covariance Matrix for MUSIC Algorithm — seasonder_MUSICInitCov","text":"\\(3  3\\) matrix complex values, initialized NA_complex_.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitCov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Covariance Matrix for MUSIC Algorithm — seasonder_MUSICInitCov","text":"covariance matrix initialized \\(3  3\\) matrix filled complex NA values. structure specifically designed three-channel antenna configurations commonly used SeaSondeR applications.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitCov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Covariance Matrix for MUSIC Algorithm — seasonder_MUSICInitCov","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a covariance matrix for MUSIC cov_matrix <- seasonder_MUSICInitCov() print(cov_matrix) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitDOASolutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Direction of Arrival (DOA) Solutions for MUSIC Algorithm — seasonder_MUSICInitDOASolutions","title":"Initialize Direction of Arrival (DOA) Solutions for MUSIC Algorithm — seasonder_MUSICInitDOASolutions","text":"function initializes data structure storing Direction Arrival (DOA) solutions calculated MUSIC algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitDOASolutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Direction of Arrival (DOA) Solutions for MUSIC Algorithm — seasonder_MUSICInitDOASolutions","text":"","code":"seasonder_MUSICInitDOASolutions()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitDOASolutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Direction of Arrival (DOA) Solutions for MUSIC Algorithm — seasonder_MUSICInitDOASolutions","text":"list initialized placeholders \"single\" \"dual\" DOA solutions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitDOASolutions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Direction of Arrival (DOA) Solutions for MUSIC Algorithm — seasonder_MUSICInitDOASolutions","text":"function returns list containing two sub-lists, one \"single\" solutions another \"dual\" solutions: \"single\": Contains placeholders single DOA solutions: bearing: bearing angle (NA_real_ default). : complex steering vector (NA_complex_ default). P: power spectrum value (NA_complex_ default). \"dual\": Contains placeholders dual DOA solutions: bearing: bearing angle (NA_real_ default). : complex steering vector (NA_complex_ default). P: \\(2  2\\) complex matrix initialized NA_complex_.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitDOASolutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Direction of Arrival (DOA) Solutions for MUSIC Algorithm — seasonder_MUSICInitDOASolutions","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize DOA solutions doa_solutions <- seasonder_MUSICInitDOASolutions() print(doa_solutions) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitEigenDecomp.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Eigenvalue Decomposition Structure for MUSIC Algorithm — seasonder_MUSICInitEigenDecomp","title":"Initialize Eigenvalue Decomposition Structure for MUSIC Algorithm — seasonder_MUSICInitEigenDecomp","text":"function initializes data structure storing eigenvalue decomposition results used MUSIC algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitEigenDecomp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Eigenvalue Decomposition Structure for MUSIC Algorithm — seasonder_MUSICInitEigenDecomp","text":"","code":"seasonder_MUSICInitEigenDecomp()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitEigenDecomp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Eigenvalue Decomposition Structure for MUSIC Algorithm — seasonder_MUSICInitEigenDecomp","text":"list two elements: values: Eigenvalues complex vector. vectors: Eigenvectors complex matrix.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitEigenDecomp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Eigenvalue Decomposition Structure for MUSIC Algorithm — seasonder_MUSICInitEigenDecomp","text":"function returns list following components: values: vector length 3, initialized NA_complex_, hold eigenvalues. vectors: \\(3  3\\) matrix, initialized NA_complex_, hold eigenvectors. structure designed support three-channel antenna configurations typical SeaSondeR applications.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitEigenDecomp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Eigenvalue Decomposition Structure for MUSIC Algorithm — seasonder_MUSICInitEigenDecomp","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize eigenvalue decomposition structure eigen_decomp <- seasonder_MUSICInitEigenDecomp() print(eigen_decomp) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitInterpolatedData.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Interpolated Data for MUSIC Algorithm — seasonder_MUSICInitInterpolatedData","title":"Initialize Interpolated Data for MUSIC Algorithm — seasonder_MUSICInitInterpolatedData","text":"function initializes data structure storing interpolated cross-spectral data used MUSIC algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitInterpolatedData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Interpolated Data for MUSIC Algorithm — seasonder_MUSICInitInterpolatedData","text":"","code":"seasonder_MUSICInitInterpolatedData(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitInterpolatedData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Interpolated Data for MUSIC Algorithm — seasonder_MUSICInitInterpolatedData","text":"seasonder_cs_object SeaSondeR cross-spectral object containing metadata number Doppler cells range cells.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitInterpolatedData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Interpolated Data for MUSIC Algorithm — seasonder_MUSICInitInterpolatedData","text":"list containing initialized interpolated data structure placeholders cross-spectral components.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitInterpolatedData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Interpolated Data for MUSIC Algorithm — seasonder_MUSICInitInterpolatedData","text":"function retrieves number Doppler cells range cells provided cross-spectral object uses information initialize interpolated data structure. resulting structure compatible dimensions cross-spectral data used SeaSondeR. data structure initialized using seasonder_initCSDataStructure, ensuring contains placeholders components SSA1, SSA2, SSA3, CS12, CS13, CS23, QC.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitInterpolatedData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Interpolated Data for MUSIC Algorithm — seasonder_MUSICInitInterpolatedData","text":"","code":"if (FALSE) { # \\dontrun{ # Create a SeaSondeR cross-spectral object seasonder_cs_object <- seasonder_createSeaSondeRCS(...)  # Initialize interpolated data interpolated_data <- seasonder_MUSICInitInterpolatedData(seasonder_cs_object) print(interpolated_data) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitProjections.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Projection Matrix for MUSIC Algorithm — seasonder_MUSICInitProjections","title":"Initialize Projection Matrix for MUSIC Algorithm — seasonder_MUSICInitProjections","text":"function initializes projection matrix use MUSIC algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitProjections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Projection Matrix for MUSIC Algorithm — seasonder_MUSICInitProjections","text":"","code":"seasonder_MUSICInitProjections(bearings = 0)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitProjections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Projection Matrix for MUSIC Algorithm — seasonder_MUSICInitProjections","text":"bearings numeric vector representing bearings (degrees) projections initialized. Defaults 0.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitProjections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Projection Matrix for MUSIC Algorithm — seasonder_MUSICInitProjections","text":"\\(2  n\\) matrix complex values, initialized NA_complex_, row names \"single\" \"dual\". input bearings stored attribute.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitProjections.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Projection Matrix for MUSIC Algorithm — seasonder_MUSICInitProjections","text":"function creates \\(2  n\\) complex matrix, \\(n\\) number bearings. matrix rows labeled: \"single\": single projections. \"dual\": dual projections. attribute \"bearings\" attached matrix, storing input bearings vector.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICInitProjections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Projection Matrix for MUSIC Algorithm — seasonder_MUSICInitProjections","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize projections for default bearings projections <- seasonder_MUSICInitProjections() print(projections)  # Initialize projections for specific bearings bearings <- seq(0, 360, by = 10) projections <- seasonder_MUSICInitProjections(bearings) print(projections) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICSelectDOA.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Direction of Arrival (DOA) from MUSIC Algorithm Results — seasonder_MUSICSelectDOA","title":"Select Direction of Arrival (DOA) from MUSIC Algorithm Results — seasonder_MUSICSelectDOA","text":"function processes results MUSIC algorithm, selects relevant Direction Arrival (DOA) based specified retained solution, updates corresponding SeaSondeRCS object selected DOA updated processing steps.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICSelectDOA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Direction of Arrival (DOA) from MUSIC Algorithm Results — seasonder_MUSICSelectDOA","text":"","code":"seasonder_MUSICSelectDOA(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICSelectDOA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Direction of Arrival (DOA) from MUSIC Algorithm Results — seasonder_MUSICSelectDOA","text":"seasonder_cs_object SeaSondeRCS object containing results MUSIC algorithm associated metadata.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICSelectDOA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Direction of Arrival (DOA) from MUSIC Algorithm Results — seasonder_MUSICSelectDOA","text":"updated SeaSondeRCS object selected DOA stored MUSIC results updated processing steps.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICSelectDOA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select Direction of Arrival (DOA) from MUSIC Algorithm Results — seasonder_MUSICSelectDOA","text":"function performs following steps: Updates processing steps indicate start DOA selection process. Retrieves MUSIC algorithm results SeaSondeRCS object. Maps retained solution index corresponding DOA solution entry MUSIC results. Stores updated MUSIC results, including selected DOA, back SeaSondeRCS object. Updates processing steps indicate end DOA selection process.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICSelectDOA.html","id":"processing-steps","dir":"Reference","previous_headings":"","what":"Processing Steps","title":"Select Direction of Arrival (DOA) from MUSIC Algorithm Results — seasonder_MUSICSelectDOA","text":"function appends following processing steps ProcessingSteps attribute SeaSondeRCS object: Start DOA selection. End DOA selection.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICSelectDOA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Direction of Arrival (DOA) from MUSIC Algorithm Results — seasonder_MUSICSelectDOA","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `seasonder_cs_obj` is a valid SeaSondeRCS object with MUSIC results updated_obj <- seasonder_MUSICSelectDOA(seasonder_cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICTestDualSolutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Dual-Bearing Solutions Using MUSIC Algorithm — seasonder_MUSICTestDualSolutions","title":"Test Dual-Bearing Solutions Using MUSIC Algorithm — seasonder_MUSICTestDualSolutions","text":"function applies sequence tests (P1, P2, P3) validate dual-bearing solutions derived using MUSIC algorithm. tests evaluate quality solutions based eigenvalue ratios, signal power ratios, covariance matrix power ratios.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICTestDualSolutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Dual-Bearing Solutions Using MUSIC Algorithm — seasonder_MUSICTestDualSolutions","text":"","code":"seasonder_MUSICTestDualSolutions(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICTestDualSolutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Dual-Bearing Solutions Using MUSIC Algorithm — seasonder_MUSICTestDualSolutions","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC solutions related data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICTestDualSolutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Dual-Bearing Solutions Using MUSIC Algorithm — seasonder_MUSICTestDualSolutions","text":"updated SeaSondeRCS object validated dual-bearing solutions recorded processing steps.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICTestDualSolutions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Dual-Bearing Solutions Using MUSIC Algorithm — seasonder_MUSICTestDualSolutions","text":"function applies following sequence tests: P1: Eigenvalue Ratio Test: Evaluates ratio largest second-largest eigenvalues. P2: Signal Power Ratio Test: Validates ratio signal powers dual-bearing solutions. P3: Signal Matrix Power Ratio Test: Checks ratio diagonal -diagonal powers covariance matrix. test updates MUSIC solutions input object, marking solutions fail tests \"single.\" function also logs start end testing process part object's processing steps.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSICTestDualSolutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Dual-Bearing Solutions Using MUSIC Algorithm — seasonder_MUSICTestDualSolutions","text":"","code":"if (FALSE) { # \\dontrun{ updated_obj <- seasonder_MUSICTestDualSolutions(seasonder_cs_object) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_Bins2DopplerFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Doppler Bins to Doppler Frequencies — seasonder_MUSIC_Bins2DopplerFreq","title":"Map Doppler Bins to Doppler Frequencies — seasonder_MUSIC_Bins2DopplerFreq","text":"function retrieves Doppler frequencies corresponding specified Doppler bins given SeaSonde cross-spectral object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_Bins2DopplerFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Doppler Bins to Doppler Frequencies — seasonder_MUSIC_Bins2DopplerFreq","text":"","code":"seasonder_MUSIC_Bins2DopplerFreq(seasonder_cs_obj, bins)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_Bins2DopplerFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Doppler Bins to Doppler Frequencies — seasonder_MUSIC_Bins2DopplerFreq","text":"seasonder_cs_obj SeaSondeRCS object representing cross-spectral data structure. contains metadata configuration Doppler frequency bin mapping. bins numeric integer vector bin indices Doppler frequencies needed.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_Bins2DopplerFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Doppler Bins to Doppler Frequencies — seasonder_MUSIC_Bins2DopplerFreq","text":"numeric vector Doppler frequencies corresponding input bin indices.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_Bins2DopplerFreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map Doppler Bins to Doppler Frequencies — seasonder_MUSIC_Bins2DopplerFreq","text":"function retrieves full set unnormalized Doppler bin frequencies using seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency returns frequencies corresponding provided bin indices. useful translating bin-domain indices physical Doppler frequency values analysis visualization.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_Bins2DopplerFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Doppler Bins to Doppler Frequencies — seasonder_MUSIC_Bins2DopplerFreq","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `seasonder_cs_obj` is a valid SeaSondeRCS object bins <- c(1, 5, 10) doppler_freqs <- seasonder_MUSIC_Bins2DopplerFreq(seasonder_cs_obj, bins) print(doppler_freqs) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_DopplerFreq2Bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Doppler Frequencies to Doppler Bins — seasonder_MUSIC_DopplerFreq2Bins","title":"Map Doppler Frequencies to Doppler Bins — seasonder_MUSIC_DopplerFreq2Bins","text":"function maps specified Doppler frequency values corresponding Doppler bins given SeaSonde cross-spectral object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_DopplerFreq2Bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Doppler Frequencies to Doppler Bins — seasonder_MUSIC_DopplerFreq2Bins","text":"","code":"seasonder_MUSIC_DopplerFreq2Bins(seasonder_cs_obj, doppler_values)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_DopplerFreq2Bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Doppler Frequencies to Doppler Bins — seasonder_MUSIC_DopplerFreq2Bins","text":"seasonder_cs_obj SeaSondeRCS object representing cross-spectral data structure. contains metadata configuration Doppler frequency bin mapping. doppler_values numeric vector Doppler frequency values mapped Doppler bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_DopplerFreq2Bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Doppler Frequencies to Doppler Bins — seasonder_MUSIC_DopplerFreq2Bins","text":"numeric vector Doppler bins corresponding input Doppler frequency values.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_DopplerFreq2Bins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map Doppler Frequencies to Doppler Bins — seasonder_MUSIC_DopplerFreq2Bins","text":"function performs following steps: Retrieves unnormalized Doppler bin frequencies using seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency. Retrieves Doppler spectrum resolution using seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution. Retrieves total number Doppler cells using seasonder_getSeaSondeRCS_MUSIC_nDopplerCells. Computes Doppler bin indices corresponding input Doppler frequency values using seasonder_computeDopplerFreq2Bins. mapping essential translating frequency-domain values bin indices used data processing visualization.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_DopplerFreq2Bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Doppler Frequencies to Doppler Bins — seasonder_MUSIC_DopplerFreq2Bins","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `seasonder_cs_obj` is a valid SeaSondeRCS object doppler_freqs <- c(0.1, 0.2, 0.3) doppler_bins <- seasonder_MUSIC_DopplerFreq2Bins(seasonder_cs_obj, doppler_freqs) print(doppler_bins) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_LonLat.html","id":null,"dir":"Reference","previous_headings":"","what":"Map MUSIC Bearings to Geographic Coordinates — seasonder_MUSIC_LonLat","title":"Map MUSIC Bearings to Geographic Coordinates — seasonder_MUSIC_LonLat","text":"function calculates geographic coordinates (latitude longitude) MUSIC detection based range direction arrival (DOA) bearings SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_LonLat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map MUSIC Bearings to Geographic Coordinates — seasonder_MUSIC_LonLat","text":"","code":"seasonder_MUSIC_LonLat(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_LonLat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map MUSIC Bearings to Geographic Coordinates — seasonder_MUSIC_LonLat","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC detection data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_LonLat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map MUSIC Bearings to Geographic Coordinates — seasonder_MUSIC_LonLat","text":"SeaSondeRCS object updated MUSIC data, including geographic coordinates detection.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_LonLat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map MUSIC Bearings to Geographic Coordinates — seasonder_MUSIC_LonLat","text":"function performs following operations: Retrieves MUSIC data original geographic coordinates (latitude longitude) seasonder_cs_object. coordinates available, origin derived associated Antenna Pattern (APM) data. Converts DOA bearings MUSIC detections geographic bearings using APM object. Computes latitude longitude MUSIC detection based range geographic bearings using seasonder_computeLonLatFromOriginDistBearing Updates seasonder_cs_object newly computed coordinates.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_MUSIC_LonLat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map MUSIC Bearings to Geographic Coordinates — seasonder_MUSIC_LonLat","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `seasonder_cs_obj` is a valid `SeaSondeRCS` object updated_obj <- seasonder_MUSIC_LonLat(seasonder_cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NULLSeaSondeRCS_MUSIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize NULL Data Structure for SeaSondeR MUSIC Analysis — seasonder_NULLSeaSondeRCS_MUSIC","title":"Initialize NULL Data Structure for SeaSondeR MUSIC Analysis — seasonder_NULLSeaSondeRCS_MUSIC","text":"function initializes NULL data structure storing results MUSIC analysis SeaSondeR. structure designed tibble pre-defined columns range cells, Doppler bins, various MUSIC-related parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NULLSeaSondeRCS_MUSIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize NULL Data Structure for SeaSondeR MUSIC Analysis — seasonder_NULLSeaSondeRCS_MUSIC","text":"","code":"seasonder_NULLSeaSondeRCS_MUSIC()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NULLSeaSondeRCS_MUSIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize NULL Data Structure for SeaSondeR MUSIC Analysis — seasonder_NULLSeaSondeRCS_MUSIC","text":"tibble pre-defined columns empty values, ready populated MUSIC analysis results.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NULLSeaSondeRCS_MUSIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize NULL Data Structure for SeaSondeR MUSIC Analysis — seasonder_NULLSeaSondeRCS_MUSIC","text":"initialized tibble contains following columns: range_cell: Numeric vector representing range cell indices. doppler_bin: Numeric vector Doppler bin indices. range: Numeric vector range values. freq: Numeric vector frequencies. radial_v: Numeric vector radial velocities. cov: list store covariance matrices. eigen: list store eigenvalue decompositions. projections: list store projection matrices. DOA_solutions: list store Direction Arrival (DOA) solutions. eigen_values_ratio: Numeric vector ratio eigenvalues. P1_check: Logical vector indicating P1 criterion satisfied. retained_solution: Character vector type retained solution (\"single\" \"dual\"). DOA: list store final DOA results. lonlat: list containing data frame longitude (lon) latitude (lat) values.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NULLSeaSondeRCS_MUSIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize NULL Data Structure for SeaSondeR MUSIC Analysis — seasonder_NULLSeaSondeRCS_MUSIC","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a NULL structure for MUSIC analysis music_results <- seasonder_NULLSeaSondeRCS_MUSIC() print(music_results) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2Bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Normalized Doppler Frequencies to Doppler Bins — seasonder_NormalizedDopplerFreq2Bins","title":"Convert Normalized Doppler Frequencies to Doppler Bins — seasonder_NormalizedDopplerFreq2Bins","text":"function converts set normalized Doppler frequencies corresponding Doppler bin indices within SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2Bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Normalized Doppler Frequencies to Doppler Bins — seasonder_NormalizedDopplerFreq2Bins","text":"","code":"seasonder_NormalizedDopplerFreq2Bins(seasonder_cs_obj, doppler_values)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2Bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Normalized Doppler Frequencies to Doppler Bins — seasonder_NormalizedDopplerFreq2Bins","text":"seasonder_cs_obj SeaSondeR cross-spectral object containing metadata Doppler bins. doppler_values numeric vector specifying normalized Doppler frequencies converted bin indices.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2Bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Normalized Doppler Frequencies to Doppler Bins — seasonder_NormalizedDopplerFreq2Bins","text":"integer vector indicating Doppler bin indices corresponding input normalized Doppler frequencies. Values fall outside valid bin range assigned NA.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2Bins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Normalized Doppler Frequencies to Doppler Bins — seasonder_NormalizedDopplerFreq2Bins","text":"function first retrieves list normalized Doppler frequencies given SeaSondeR object using seasonder_getDopplerBinsFrequency. bin boundaries computed using first-order difference frequencies. function applies findInterval determine corresponding bin index input Doppler frequency. search process affected following options: rightmost.closed = TRUE: last bin interval closed right, ensuring maximum normalized frequency included last bin. .inside = FALSE: Values fall outside range computed boundaries assigned values 1 maximum bin index. left.open = TRUE: left interval open, meaning values exactly equal boundary assigned higher bin. findInterval determines bin indices, values range (bins < 1 bins > nDoppler) set NA.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2Bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Normalized Doppler Frequencies to Doppler Bins — seasonder_NormalizedDopplerFreq2Bins","text":"","code":"if (FALSE) { # \\dontrun{ # Convert normalized Doppler frequencies to bin indices cs_obj <- seasonder_createSeaSondeRCS(...) doppler_values <- c(-0.5, 0, 0.8) bins <- seasonder_NormalizedDopplerFreq2Bins(cs_obj, doppler_values) print(bins) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2DopplerFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Normalized Doppler Frequencies to Doppler Frequencies — seasonder_NormalizedDopplerFreq2DopplerFreq","title":"Convert Normalized Doppler Frequencies to Doppler Frequencies — seasonder_NormalizedDopplerFreq2DopplerFreq","text":"function converts normalized Doppler frequencies corresponding Doppler frequencies (Hz) within SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2DopplerFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Normalized Doppler Frequencies to Doppler Frequencies — seasonder_NormalizedDopplerFreq2DopplerFreq","text":"","code":"seasonder_NormalizedDopplerFreq2DopplerFreq(seasonder_cs_obj, doppler_values)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2DopplerFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Normalized Doppler Frequencies to Doppler Frequencies — seasonder_NormalizedDopplerFreq2DopplerFreq","text":"seasonder_cs_obj SeaSondeR cross-spectral object containing metadata Doppler bins. doppler_values numeric vector specifying normalized Doppler frequencies converted Doppler frequencies (Hz).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2DopplerFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Normalized Doppler Frequencies to Doppler Frequencies — seasonder_NormalizedDopplerFreq2DopplerFreq","text":"numeric vector Doppler frequencies (Hz) corresponding input normalized Doppler frequencies.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2DopplerFreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Normalized Doppler Frequencies to Doppler Frequencies — seasonder_NormalizedDopplerFreq2DopplerFreq","text":"function follows steps: Calls seasonder_NormalizedDopplerFreq2Bins convert input normalized Doppler frequencies Doppler bin indices. Calls seasonder_Bins2DopplerFreq obtain corresponding Doppler frequencies Hz. relationship normalized absolute Doppler frequencies defined : $$f_{doppler} = f_{norm} \\times f_{bragg}$$ : \\( f_doppler \\) Doppler frequency Hz, \\( f_norm \\) normalized Doppler frequency, \\( f_bragg \\) Bragg frequency, computed based radar wavelength.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_NormalizedDopplerFreq2DopplerFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Normalized Doppler Frequencies to Doppler Frequencies — seasonder_NormalizedDopplerFreq2DopplerFreq","text":"","code":"if (FALSE) { # \\dontrun{ # Convert normalized Doppler frequencies to Doppler frequencies cs_obj <- seasonder_createSeaSondeRCS(...) normalized_values <- c(-0.3, 0, 0.6)  # Example normalized Doppler frequencies doppler_freqs <- seasonder_NormalizedDopplerFreq2DopplerFreq(cs_obj, normalized_values) print(doppler_freqs) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSExportFORBoundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Export First Order Region (FOR) Boundaries — seasonder_SeaSondeRCSExportFORBoundaries","title":"Export First Order Region (FOR) Boundaries — seasonder_SeaSondeRCSExportFORBoundaries","text":"function exports boundaries First Order Region () range cell SeaSondeRCS object, providing first last Doppler bins negative positive Bragg regions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSExportFORBoundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export First Order Region (FOR) Boundaries — seasonder_SeaSondeRCSExportFORBoundaries","text":"","code":"seasonder_SeaSondeRCSExportFORBoundaries(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSExportFORBoundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export First Order Region (FOR) Boundaries — seasonder_SeaSondeRCSExportFORBoundaries","text":"seasonder_cs_object SeaSondeRCS object containing computed data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSExportFORBoundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export First Order Region (FOR) Boundaries — seasonder_SeaSondeRCSExportFORBoundaries","text":"data frame boundaries range cell.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSExportFORBoundaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export First Order Region (FOR) Boundaries — seasonder_SeaSondeRCSExportFORBoundaries","text":"Purpose: function retrieves computed data SeaSondeRCS object extracts boundary Doppler bins range cell. result data frame following columns: range_cell: index range cell. first_neg_doppler_cell: first Doppler bin negative Bragg region. last_neg_doppler_cell: last Doppler bin negative Bragg region. first_pos_doppler_cell: first Doppler bin positive Bragg region. last_pos_doppler_cell: last Doppler bin positive Bragg region. Steps: Retrieve data using seasonder_getSeaSondeRCS_FOR. Iterate range cell extract Doppler bins negative positive Bragg regions. Determine range (first last bins) region. Combine results single data frame, omitting empty entries. Use Case: function useful exporting computed boundaries format can analyzed visualized.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSExportFORBoundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export First Order Region (FOR) Boundaries — seasonder_SeaSondeRCSExportFORBoundaries","text":"","code":"if (FALSE) { # \\dontrun{ # Export the FOR boundaries from a SeaSondeRCS object boundaries <- seasonder_SeaSondeRCSExportFORBoundaries(cs_obj) print(boundaries) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSMUSICInterpolateDoppler.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Doppler Interpolation for SeaSonde Cross-Spectra Data — seasonder_SeaSondeRCSMUSICInterpolateDoppler","title":"Perform Doppler Interpolation for SeaSonde Cross-Spectra Data — seasonder_SeaSondeRCSMUSICInterpolateDoppler","text":"function performs Doppler interpolation cross-spectra data SeaSondeRCS object, preparing data MUSIC processing. Interpolation achieved inserting additional Doppler bins using linear interpolation, potentially increasing number detected vectors possibly smoothing radials. function tries mimic CODAR's AnalyzeSpectra tool interpolation, including addition wraparound Doppler cell interpolation.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSMUSICInterpolateDoppler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Doppler Interpolation for SeaSonde Cross-Spectra Data — seasonder_SeaSondeRCSMUSICInterpolateDoppler","text":"","code":"seasonder_SeaSondeRCSMUSICInterpolateDoppler(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSMUSICInterpolateDoppler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Doppler Interpolation for SeaSonde Cross-Spectra Data — seasonder_SeaSondeRCSMUSICInterpolateDoppler","text":"seasonder_cs_obj SeaSondeRCS object containing cross-spectra data metadata processing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSMUSICInterpolateDoppler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Doppler Interpolation for SeaSonde Cross-Spectra Data — seasonder_SeaSondeRCSMUSICInterpolateDoppler","text":"SeaSondeRCS object updated interpolated cross-spectra data metadata.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSMUSICInterpolateDoppler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Doppler Interpolation for SeaSonde Cross-Spectra Data — seasonder_SeaSondeRCSMUSICInterpolateDoppler","text":"Doppler interpolation increases number Doppler bins factor 2, 3, 4 radial processing. accomplished linearly interpolating existing bins, increasing number radial vectors approximately 15% 2x interpolation, yielding smoother radials. interpolation factor configurable via SeaSondeRCS object's doppler_interpolation attribute setter seasonder_setSeaSondeRCS_MUSIC_doppler_interpolation. number Doppler bins interpolation exceed 2048; exceeding limit result error. interpolation process follows: wraparound Doppler cell added right data. non-quality-control (QC) matrices, linear interpolation applied fill newly added Doppler bins. QC matrices updated default value (-1) interpolated bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSMUSICInterpolateDoppler.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Perform Doppler Interpolation for SeaSonde Cross-Spectra Data — seasonder_SeaSondeRCSMUSICInterpolateDoppler","text":"CODAR's SeaSonde R8 Radial Config Setup documentation advises using 3x 4x interpolation. function ensures number Doppler bins interpolation exceed 2048. Doppler interpolation preprocessing step typically performed CODAR's AnalyzeSpectra tool MUSIC processing.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSMUSICInterpolateDoppler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Doppler Interpolation for SeaSonde Cross-Spectra Data — seasonder_SeaSondeRCSMUSICInterpolateDoppler","text":"","code":"if (FALSE) { # \\dontrun{ # Assume `cs_obj` is a valid SeaSondeRCS object cs_obj <- seasonder_SeaSondeRCSMUSICInterpolateDoppler(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSSYApplyScaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Scaling to SeaSondeRCSSY Data — seasonder_SeaSondeRCSSYApplyScaling","title":"Apply Scaling to SeaSondeRCSSY Data — seasonder_SeaSondeRCSSYApplyScaling","text":"function applies scaling vector integer values contained list values converting floating point voltage values using specified scaling procedure. integer value: value equals 0xFFFFFFFF, returns NaN; Otherwise, computes intermediate value using formula: intermediate = value * (fmax - fmin) / fscale + fmin converts voltage via: voltage = 10^((intermediate + dbRef) / 10)","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSSYApplyScaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Scaling to SeaSondeRCSSY Data — seasonder_SeaSondeRCSSYApplyScaling","text":"","code":"seasonder_SeaSondeRCSSYApplyScaling(values, fmax, fmin, fscale, dbRef)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSSYApplyScaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Scaling to SeaSondeRCSSY Data — seasonder_SeaSondeRCSSYApplyScaling","text":"values list numeric vectors containing integer values scaled. vector expected contain values read binary CSSY values block. fmax numeric value representing maximum scaling value. Used compute linear scaling factor. fmin numeric value representing minimum scaling value. Acts offset scaling. fscale numeric value representing scaling factor. Must zero determines divisor scaling formula. dbRef numeric value representing decibel reference added voltage conversion step.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSSYApplyScaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Scaling to SeaSondeRCSSY Data — seasonder_SeaSondeRCSSYApplyScaling","text":"list structure values, numeric vector transformed vector floating point voltage values. Special integer values equal 0xFFFFFFFF converted NaN.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSSYApplyScaling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Scaling to SeaSondeRCSSY Data — seasonder_SeaSondeRCSSYApplyScaling","text":"function processes vector input list returns new list structure, value converted corresponding voltage value. also performs several validations regarding input types values. scaling process performs following steps input value: Checks whether value equals 0xFFFFFFFF. , returns NaN immediately value indicates missing invalid measurement. Otherwise, computes intermediate scaled value applying linear transformation: intermediate = value * (fmax - fmin) / fscale + fmin Finally, converts intermediate value voltage using: voltage = 10^((intermediate + dbRef) / 10) function includes input validation ensure values list, fmax, fmin, fscale, dbRef numeric. also checks element values non-numeric fscale non-zero prevent division errors.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SeaSondeRCSSYApplyScaling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Scaling to SeaSondeRCSSY Data — seasonder_SeaSondeRCSSYApplyScaling","text":"","code":"# Example usage: values <- list(c(1000, 0xFFFFFFFF, 2000)) scaled <- seasonder_SeaSondeRCSSYApplyScaling(values, fmax = 5, fmin = 0, fscale = 1000, dbRef = -20) #> Error in seasonder_SeaSondeRCSSYApplyScaling(values, fmax = 5, fmin = 0,     fscale = 1000, dbRef = -20): could not find function \"seasonder_SeaSondeRCSSYApplyScaling\" print(scaled) #> Error: object 'scaled' not found"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SelfSpectra2dB.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Self-Spectra to dB Using a SeaSondeR Object — seasonder_SelfSpectra2dB","title":"Convert Self-Spectra to dB Using a SeaSondeR Object — seasonder_SelfSpectra2dB","text":"function transforms self-spectra power values decibels (dB) retrieving receiver gain given SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SelfSpectra2dB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Self-Spectra to dB Using a SeaSondeR Object — seasonder_SelfSpectra2dB","text":"","code":"seasonder_SelfSpectra2dB(seasonder_cs_obj, spectrum_values)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SelfSpectra2dB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Self-Spectra to dB Using a SeaSondeR Object — seasonder_SelfSpectra2dB","text":"seasonder_cs_obj SeaSondeR cross-spectral object. spectrum_values numeric vector. power values linear scale.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SelfSpectra2dB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Self-Spectra to dB Using a SeaSondeR Object — seasonder_SelfSpectra2dB","text":"numeric vector power values decibels (dB).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SelfSpectra2dB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Self-Spectra to dB Using a SeaSondeR Object — seasonder_SelfSpectra2dB","text":"function first extracts receiver gain decibels seasonder_cs_obj using seasonder_getReceiverGain_dB applies conversion using: $$dB = 10 \\log_{10}(|P|) - G$$ : \\( dB \\) power decibels, \\( P \\) self-spectra power linear scale, \\( G \\) receiver gain decibels. function ensures consistency obtaining receiver gain directly SeaSondeR object.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SelfSpectra2dB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Self-Spectra to dB Using a SeaSondeR Object — seasonder_SelfSpectra2dB","text":"","code":"if (FALSE) { # \\dontrun{ # Convert self-spectra to dB using a SeaSondeR object cs_obj <- seasonder_createSeaSondeRCS(...) spectrum_vals <- c(1e-10, 1e-8, 1e-6) dB_vals <- seasonder_SelfSpectra2dB(cs_obj, spectrum_vals) print(dB_vals) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothFORSS.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth Self-Spectra for First Order Region (FOR) — seasonder_SmoothFORSS","title":"Smooth Self-Spectra for First Order Region (FOR) — seasonder_SmoothFORSS","text":"function applies smoothing operation self-spectra (SS) matrix antenna 3 SeaSondeR cross-spectral object, specifically First Order Region () processing. smoothed self-spectra stored attribute within object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothFORSS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth Self-Spectra for First Order Region (FOR) — seasonder_SmoothFORSS","text":"","code":"seasonder_SmoothFORSS(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothFORSS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth Self-Spectra for First Order Region (FOR) — seasonder_SmoothFORSS","text":"seasonder_cs_obj SeaSondeRCS object containing self-spectra data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothFORSS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth Self-Spectra for First Order Region (FOR) — seasonder_SmoothFORSS","text":"input SeaSondeRCS object smoothed self-spectra stored attribute.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothFORSS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smooth Self-Spectra for First Order Region (FOR) — seasonder_SmoothFORSS","text":"function retrieves default Doppler smoothing factor (nsm) seasonder_getSeaSondeRCS_FOR_parameters applies smoothing operation using seasonder_SmoothSS self-spectra antenna 3. Steps: Retrieve Doppler smoothing factor (nsm). Apply sliding mean smoothing self-spectra antenna 3. Store smoothed matrix attribute within SeaSondeRCS object. smoothing process helps stabilize estimation nulls first- second-order regions, preventing -smoothing distort boundaries -smoothing introduce jagged edges.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothFORSS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth Self-Spectra for First Order Region (FOR) — seasonder_SmoothFORSS","text":"","code":"if (FALSE) { # \\dontrun{ # Apply smoothing to the FOR self-spectra cs_obj <- seasonder_SmoothFORSS(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothSS.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth Self-Spectra Matrix Using a Sliding Window — seasonder_SmoothSS","title":"Smooth Self-Spectra Matrix Using a Sliding Window — seasonder_SmoothSS","text":"function applies smoothing operation self-spectra (SS) matrix specific antenna SeaSondeR cross-spectral object. smoothing performed using sliding mean specified number Doppler bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothSS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth Self-Spectra Matrix Using a Sliding Window — seasonder_SmoothSS","text":"","code":"seasonder_SmoothSS(seasonder_cs_obj, antenna, smoothing = NULL)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothSS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth Self-Spectra Matrix Using a Sliding Window — seasonder_SmoothSS","text":"seasonder_cs_obj SeaSondeRCS object containing self-spectra data. antenna character numeric identifier antenna whose self-spectra smoothed. smoothing Optional. integer specifying number Doppler bins used smoothing. NULL, function retrieves default smoothing factor (nsm) seasonder_getSeaSondeRCS_FOR_parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothSS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth Self-Spectra Matrix Using a Sliding Window — seasonder_SmoothSS","text":"matrix dimensions input self-spectra matrix, smoothed values.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothSS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smooth Self-Spectra Matrix Using a Sliding Window — seasonder_SmoothSS","text":"smoothing process performed using centered sliding mean filter window nsm bins. window extends symmetrically bin, adjustments based whether nsm even odd: nsm even, window includes nsm/2 bins target bin. nsm odd, window includes (nsm - 1)/2 bins (nsm - 1)/2 + 1 bins . function utilizes slide_mean apply smoothing operation row-wise across self-spectra matrix. smoothing implementation mimics one performed tool AnalyzeSpectra CODAR's Radial Suite R8.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SmoothSS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth Self-Spectra Matrix Using a Sliding Window — seasonder_SmoothSS","text":"","code":"if (FALSE) { # \\dontrun{ # Smooth the self-spectra for a given antenna smoothed_SS <- seasonder_SmoothSS(cs_obj, antenna = \"A1\") print(smoothed_SS) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SwapDopplerUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Between Different Doppler Frequency Units — seasonder_SwapDopplerUnits","title":"Convert Between Different Doppler Frequency Units — seasonder_SwapDopplerUnits","text":"function converts Doppler-related values different units, including normalized Doppler frequency, Doppler bins, absolute Doppler frequency (Hz), within SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SwapDopplerUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Between Different Doppler Frequency Units — seasonder_SwapDopplerUnits","text":"","code":"seasonder_SwapDopplerUnits(seasonder_cs_obj, values, in_units, out_units)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SwapDopplerUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Between Different Doppler Frequency Units — seasonder_SwapDopplerUnits","text":"seasonder_cs_obj SeaSondeR cross-spectral object containing Doppler bin metadata. values numeric vector specifying Doppler values converted. in_units character string specifying current unit values. Must one : \"normalized doppler frequency\": Values normalized Bragg frequency. \"bins\": Values represent Doppler bin indices. \"doppler frequency\": Values Hz. out_units character string specifying target unit conversion. Must one three options in_units.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SwapDopplerUnits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Between Different Doppler Frequency Units — seasonder_SwapDopplerUnits","text":"numeric vector converted Doppler values specified output unit.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SwapDopplerUnits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Between Different Doppler Frequency Units — seasonder_SwapDopplerUnits","text":"function first validates input output units among allowed options. in_units out_units , function returns original values without modification. unit conversions follow logic: converting \"normalized doppler frequency\": \"bins\": Uses seasonder_NormalizedDopplerFreq2Bins. \"doppler frequency\": Uses seasonder_NormalizedDopplerFreq2DopplerFreq. converting \"bins\": \"normalized doppler frequency\": Uses seasonder_Bins2NormalizedDopplerFreq. \"doppler frequency\": Uses seasonder_Bins2DopplerFreq. converting \"doppler frequency\": \"bins\": Uses seasonder_DopplerFreq2Bins. \"normalized doppler frequency\": Uses seasonder_DopplerFreq2NormalizedDopplerFreq. Overall, functions used Doppler units conversion mimic implementation Doppler units displayed  SpectraPlotterMap 12 Radial Suite R8","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SwapDopplerUnits.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Between Different Doppler Frequency Units — seasonder_SwapDopplerUnits","text":"COS. SeaSonde Radial Suite Release 8; CODAR Ocean Sensors (COS): Mountain View, CA, USA, 2016.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_SwapDopplerUnits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Between Different Doppler Frequency Units — seasonder_SwapDopplerUnits","text":"","code":"if (FALSE) { # \\dontrun{ # Convert Doppler frequencies (Hz) to normalized Doppler frequency cs_obj <- seasonder_createSeaSondeRCS(...) doppler_values <- c(-0.3, 0, 0.6)  # Doppler values in Hz normalized_freqs <- seasonder_SwapDopplerUnits(cs_obj, doppler_values, \"doppler frequency\", \"normalized doppler frequency\") print(normalized_freqs)  # Convert Doppler bins to Doppler frequency (Hz) bins <- c(10, 20, 30) freqs <- seasonder_SwapDopplerUnits(cs_obj, bins, \"bins\", \"doppler frequency\") print(freqs) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_applyAPMAmplitudeAndPhaseCorrections.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Amplitude and Phase Corrections to a SeaSonde RAPM Object — seasonder_applyAPMAmplitudeAndPhaseCorrections","title":"Apply Amplitude and Phase Corrections to a SeaSonde RAPM Object — seasonder_applyAPMAmplitudeAndPhaseCorrections","text":"function applies amplitude phase corrections antenna channel SeaSonde RAPM object based correction factors stored within object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_applyAPMAmplitudeAndPhaseCorrections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Amplitude and Phase Corrections to a SeaSonde RAPM Object — seasonder_applyAPMAmplitudeAndPhaseCorrections","text":"","code":"seasonder_applyAPMAmplitudeAndPhaseCorrections(seasonder_apm_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_applyAPMAmplitudeAndPhaseCorrections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Amplitude and Phase Corrections to a SeaSonde RAPM Object — seasonder_applyAPMAmplitudeAndPhaseCorrections","text":"seasonder_apm_object SeaSonde RAPM object containing raw data correction factors.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_applyAPMAmplitudeAndPhaseCorrections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Amplitude and Phase Corrections to a SeaSonde RAPM Object — seasonder_applyAPMAmplitudeAndPhaseCorrections","text":"SeaSonde RAPM object amplitude phase corrections applied data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_areLogsEnabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if log recording is enabled in SeaSondeR — seasonder_areLogsEnabled","title":"Check if log recording is enabled in SeaSondeR — seasonder_areLogsEnabled","text":"function checks whether log recording currently enabled SeaSondeR package.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_areLogsEnabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if log recording is enabled in SeaSondeR — seasonder_areLogsEnabled","text":"","code":"seasonder_areLogsEnabled()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_areLogsEnabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if log recording is enabled in SeaSondeR — seasonder_areLogsEnabled","text":"Logical indicating whether logs enabled disabled.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_areLogsEnabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if log recording is enabled in SeaSondeR — seasonder_areLogsEnabled","text":"","code":"seasonder_areLogsEnabled() #> [1] TRUE"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_areMessagesEnabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if message logging is enabled in SeaSondeR — seasonder_areMessagesEnabled","title":"Check if message logging is enabled in SeaSondeR — seasonder_areMessagesEnabled","text":"function checks whether message logging currently enabled SeaSondeR package.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_areMessagesEnabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if message logging is enabled in SeaSondeR — seasonder_areMessagesEnabled","text":"","code":"seasonder_areMessagesEnabled()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_areMessagesEnabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if message logging is enabled in SeaSondeR — seasonder_areMessagesEnabled","text":"Logical indicating whether messages enabled disabled.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_areMessagesEnabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if message logging is enabled in SeaSondeR — seasonder_areMessagesEnabled","text":"","code":"seasonder_areMessagesEnabled() #> [1] TRUE"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSData.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSData","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSData","text":"function extracts data seasonder_cs_obj, representing SeaSondeRCS object, converts JSON format. Optionally, can write JSON data specified file path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSData","text":"","code":"seasonder_asJSONSeaSondeRCSData(seasonder_cs_obj, path = NULL)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSData","text":"seasonder_cs_obj SeaSondeRCS object data extracted. path Optional path file JSON output saved. provided, function write JSON data file. NULL, function return JSON data string without writing file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSData","text":"character string JSON format representing data provided SeaSondeRCS object. path provided, function also writes data specified file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSData.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSData","text":"path provided issue writing file, function logs error message using seasonder_logAndMessage returns JSON data string.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSHeader","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSHeader","text":"function extracts header data seasonder_cs_obj, representing SeaSondeRCS object, converts JSON format. Optionally, can write JSON data specified file path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSHeader","text":"","code":"seasonder_asJSONSeaSondeRCSHeader(seasonder_cs_obj, path = NULL)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSHeader","text":"seasonder_cs_obj SeaSondeRCS object header data extracted. path Optional path file JSON output saved. provided, function write JSON data file. NULL, function return JSON data string without writing file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSHeader","text":"character string JSON format representing header data provided SeaSondeRCS object. path provided, function also writes data specified file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_asJSONSeaSondeRCSHeader.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert SeaSondeRCS Object to JSON — seasonder_asJSONSeaSondeRCSHeader","text":"path provided issue writing file, function logs error message using seasonder_logAndMessage returns JSON data string.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_check_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Field Specifications — seasonder_check_specs","title":"Validate Field Specifications — seasonder_check_specs","text":"function checks provided specifications (specs) contain entries required fields listed fields.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_check_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Field Specifications — seasonder_check_specs","text":"","code":"seasonder_check_specs(specs, fields)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_check_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Field Specifications — seasonder_check_specs","text":"specs list containing field specifications. fields character vector field names checked specs.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_check_specs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Field Specifications — seasonder_check_specs","text":"function iterates field fields vector checks associated entry specs list. field missing, error thrown using seasonder_logAndAbort indicating missing field specification.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_check_specs.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Validate Field Specifications — seasonder_check_specs","text":"function utilizes rlang package manage conditions, provide detailed structured condition messages: Condition Classes: spsr_field_specification_missing_error: error thrown required field specification missing specs list. Condition Cases: Required field specification missing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_check_specs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Field Specifications — seasonder_check_specs","text":"","code":"if (FALSE) { # \\dontrun{ specs <- list(field1 = \"spec1\", field2 = \"spec2\") fields <- c(\"field1\", \"field2\", \"field3\") seasonder_check_specs(specs, fields) # Throws an error since spec for 'field3' is missing } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeBinsRadialVelocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Radial Velocities for Doppler Bins — seasonder_computeBinsRadialVelocity","title":"Compute Radial Velocities for Doppler Bins — seasonder_computeBinsRadialVelocity","text":"function calculates radial velocities corresponding Doppler bins SeaSondeRCS object, based provided Doppler frequencies. calculation uses radar's wave number Bragg angular frequencies.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeBinsRadialVelocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Radial Velocities for Doppler Bins — seasonder_computeBinsRadialVelocity","text":"","code":"seasonder_computeBinsRadialVelocity(seasonder_cs_obj, freq)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeBinsRadialVelocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Radial Velocities for Doppler Bins — seasonder_computeBinsRadialVelocity","text":"seasonder_cs_obj SeaSondeRCS object containing data metadata necessary calculation Doppler bin frequencies velocities. freq numeric vector representing Doppler frequencies radial velocities calculated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeBinsRadialVelocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Radial Velocities for Doppler Bins — seasonder_computeBinsRadialVelocity","text":"numeric vector containing radial velocities (meters per second, m/s) corresponding provided Doppler frequencies.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeBinsRadialVelocity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Radial Velocities for Doppler Bins — seasonder_computeBinsRadialVelocity","text":"radial velocity \\( v \\) Doppler bin computed using formula: [ v = Freq - BraggFreq2  k_0 ] : \\( Freq \\) Doppler frequency bin. \\( BraggFreq \\) Bragg Doppler angular frequency bin. \\( k_0 \\) radar wave number divided \\( 2 \\). Bragg frequency negative bins frequencies zero positive bins frequencies zero.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeBinsRadialVelocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Radial Velocities for Doppler Bins — seasonder_computeBinsRadialVelocity","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object and `freq` contains Doppler frequencies radial_velocities <- seasonder_computeBinsRadialVelocity(cs_object, freq) print(radial_velocities) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeCenterDopplerBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Center Doppler Bin — seasonder_computeCenterDopplerBin","title":"Compute the Center Doppler Bin — seasonder_computeCenterDopplerBin","text":"function calculates center Doppler bin SeaSondeRCS object based total number Doppler bins. center bin corresponds bin representing zero Doppler frequency.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeCenterDopplerBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Center Doppler Bin — seasonder_computeCenterDopplerBin","text":"","code":"seasonder_computeCenterDopplerBin(seasonder_cs_obj, nDoppler)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeCenterDopplerBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Center Doppler Bin — seasonder_computeCenterDopplerBin","text":"seasonder_cs_obj SeaSondeRCS object containing metadata Doppler bins radar parameters. nDoppler integer representing total number Doppler bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeCenterDopplerBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Center Doppler Bin — seasonder_computeCenterDopplerBin","text":"numeric value representing center Doppler bin. calculation assumes zero-based indexing CODAR data files, note R uses one-based indexing, may result differences compared CODAR's Radia Suite outputs.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeCenterDopplerBin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Center Doppler Bin — seasonder_computeCenterDopplerBin","text":"center Doppler bin computed : [ center\\_bin = nDoppler2 ] \\(nDoppler\\) total number Doppler bins. represents bin zero Doppler frequency zero-indexed system. Since R uses one-based indexing, users might observe offset comparing output function CODAR's Radia Suite programs.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeCenterDopplerBin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Center Doppler Bin — seasonder_computeCenterDopplerBin","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object nDoppler <- seasonder_getnDopplerCells(cs_object) center_bin <- seasonder_computeCenterDopplerBin(cs_object, nDoppler) print(center_bin) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerBinsFrequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Doppler Bins Frequencies — seasonder_computeDopplerBinsFrequency","title":"Compute Doppler Bins Frequencies — seasonder_computeDopplerBinsFrequency","text":"function computes Doppler frequencies associated Doppler bin SeaSonde Cross Spectra (CS) object. output can normalized positive Bragg frequency specified.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerBinsFrequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Doppler Bins Frequencies — seasonder_computeDopplerBinsFrequency","text":"","code":"seasonder_computeDopplerBinsFrequency(   seasonder_cs_obj,   nDoppler,   center_bin,   spectra_res,   normalized = FALSE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerBinsFrequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Doppler Bins Frequencies — seasonder_computeDopplerBinsFrequency","text":"seasonder_cs_obj SeaSonde CS object created seasonder_createSeaSondeRCS(). object contains necessary metadata, Doppler resolution center bin, frequency computation. nDoppler Integer. total number Doppler bins. center_bin Numeric. index central Doppler bin corresponding 0 Hz. spectra_res Numeric. spectral resolution Hz Doppler bin. normalized Logical. TRUE, frequencies normalized dividing positive Bragg frequency. Default FALSE.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerBinsFrequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Doppler Bins Frequencies — seasonder_computeDopplerBinsFrequency","text":"numeric vector representing Doppler frequencies bin. normalized = TRUE, values dimensionless relative positive Bragg frequency. Otherwise, Hz.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerBinsFrequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Doppler Bins Frequencies — seasonder_computeDopplerBinsFrequency","text":"Doppler frequencies calculated using formula: $$\\text{frequency}_i = (\\text{bin index}_i - \\text{center bin}) \\times \\text{resolution}$$ normalized frequencies: $$\\text{frequency}_i = \\frac{\\text{frequency}_i}{\\text{positive Bragg frequency}}$$ center bin typically determined using seasonder_getCenterDopplerBin(), resolution obtained seasonder_getDopplerSpectrumResolution(). Normalization based positive Bragg frequency calculated seasonder_getBraggDopplerAngularFrequency().","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerBinsFrequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Doppler Bins Frequencies — seasonder_computeDopplerBinsFrequency","text":"","code":"if (FALSE) { # \\dontrun{ # Example of computing Doppler frequencies nDoppler <- 512 center_bin <- seasonder_getCenterDopplerBin(cs_obj) spectra_res <- seasonder_getDopplerSpectrumResolution(cs_obj) freqs <- seasonder_computeDopplerBinsFrequency(cs_obj, nDoppler, center_bin, spectra_res)  # Compute normalized frequencies norm_freqs <- seasonder_computeDopplerBinsFrequency(cs_obj, nDoppler, center_bin, spectra_res, normalized = TRUE) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerFreq2Bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Doppler Frequencies to Doppler Bins — seasonder_computeDopplerFreq2Bins","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_computeDopplerFreq2Bins","text":"function converts set Doppler frequency values corresponding Doppler bin indices using predefined Doppler frequency bins frequency step size.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerFreq2Bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_computeDopplerFreq2Bins","text":"","code":"seasonder_computeDopplerFreq2Bins(   seasonder_cs_obj,   doppler_values,   doppler_freqs,   delta_freq,   nDoppler )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerFreq2Bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_computeDopplerFreq2Bins","text":"seasonder_cs_obj SeaSondeR cross-spectral object. doppler_values numeric vector specifying Doppler frequencies converted bin indices. doppler_freqs numeric vector containing Doppler frequencies corresponding bin. delta_freq numeric scalar specifying frequency step size (difference consecutive Doppler bins). nDoppler integer indicating total number Doppler bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerFreq2Bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_computeDopplerFreq2Bins","text":"integer vector Doppler bin indices corresponding input Doppler frequencies. Values fall outside valid bin range assigned NA.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerFreq2Bins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_computeDopplerFreq2Bins","text":"function constructs set bin boundaries using Doppler frequencies. leftmost boundary adjusted subtracting delta_freq first Doppler frequency extend range. function applies findInterval determine corresponding bin index input Doppler frequency. bin assignment process follows rules: rightmost.closed = TRUE: last bin interval includes upper boundary. .inside = FALSE: Values outside defined frequency range assigned indices 1 nDoppler. left.open = TRUE: left interval open, meaning values exactly equal boundary assigned higher bin. determining bin indices, values range (bins < 1 bins > nDoppler) set NA.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeDopplerFreq2Bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Doppler Frequencies to Doppler Bins — seasonder_computeDopplerFreq2Bins","text":"","code":"if (FALSE) { # \\dontrun{ # Convert Doppler frequencies to bin indices cs_obj <- seasonder_createSeaSondeRCS(...) doppler_values <- c(-0.2, 0, 0.5) doppler_freqs <- seq(-1, 1, length.out = 101) # Example Doppler bin frequencies delta_freq <- diff(doppler_freqs)[1] nDoppler <- length(doppler_freqs) bins <- seasonder_computeDopplerFreq2Bins(cs_obj, doppler_values, doppler_freqs, delta_freq, nDoppler) print(bins) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute First Order Regions (FOR) Based on Selected Method — seasonder_computeFORs","title":"Compute First Order Regions (FOR) Based on Selected Method — seasonder_computeFORs","text":"function processes SeaSondeRCS object compute First Order Regions () using specified method. allows user configure processing method parameters dynamically.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute First Order Regions (FOR) Based on Selected Method — seasonder_computeFORs","text":"","code":"seasonder_computeFORs(seasonder_cs_obj, method = NULL, FOR_control = NULL)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute First Order Regions (FOR) Based on Selected Method — seasonder_computeFORs","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters. method Optional; character string specifying method used computation. Defaults NULL, case method stored object used. Currently supported method: \"SeaSonde\". FOR_control Optional; list parameters configuring computation process. Defaults NULL, case parameters already stored object used.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute First Order Regions (FOR) Based on Selected Method — seasonder_computeFORs","text":"updated SeaSondeRCS object computed First Order Regions ().","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute First Order Regions (FOR) Based on Selected Method — seasonder_computeFORs","text":"Steps: Set Method: method provided, updates SeaSondeRCS object specified method. Retrieve Method: method specified, function retrieves method stored object. Set Parameters: FOR_control provided, function updates object's parameters. Method Execution: Based selected method, corresponding processing function called. Currently, supported method \"SeaSonde\", calls seasonder_computeFORsSeaSondeMethod. Use Case: function provides flexible interface computing FORs, allowing users dynamically select methods configure parameters without modifying internal object structure.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute First Order Regions (FOR) Based on Selected Method — seasonder_computeFORs","text":"","code":"if (FALSE) { # \\dontrun{ # Compute FORs using the SeaSonde method cs_obj <- seasonder_computeFORs(cs_obj, method = \"SeaSonde\")  # Compute FORs with custom parameters FOR_control <- list(currmax = 2, noisefact = 4) cs_obj <- seasonder_computeFORs(cs_obj, FOR_control = FOR_control) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORsSeaSondeMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute First Order Regions (FOR) Using the SeaSonde Method — seasonder_computeFORsSeaSondeMethod","title":"Compute First Order Regions (FOR) Using the SeaSonde Method — seasonder_computeFORsSeaSondeMethod","text":"function processes SeaSondeRCS object compute First Order Regions () using SeaSonde method. workflow includes detecting null points, filtering amplitudes, limiting currents maximum range, rejecting peaks based proximity Bragg indices noise/ionospheric contamination.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORsSeaSondeMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute First Order Regions (FOR) Using the SeaSonde Method — seasonder_computeFORsSeaSondeMethod","text":"","code":"seasonder_computeFORsSeaSondeMethod(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORsSeaSondeMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute First Order Regions (FOR) Using the SeaSonde Method — seasonder_computeFORsSeaSondeMethod","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data configuration parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORsSeaSondeMethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute First Order Regions (FOR) Using the SeaSonde Method — seasonder_computeFORsSeaSondeMethod","text":"updated SeaSondeRCS object computed First Order Regions ().","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORsSeaSondeMethod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute First Order Regions (FOR) Using the SeaSonde Method — seasonder_computeFORsSeaSondeMethod","text":"Workflow Steps: Initialize Processing Steps: Marks start SeaSonde method processing object's metadata. Detect Null Points: Locates nulls defining First Order Regions () using seasonder_findFORNulls. Filter Amplitudes: Removes regions insufficient amplitudes using seasonder_filterFORAmplitudes. Limit Currents Maximum Range: Ensures currents exceed configured maximum radial velocity using seasonder_limitFORCurrentRange. Reject Distant Bragg Peaks: enabled, rejects peaks far Bragg indices using seasonder_rejectDistantBragg. Reject Noise/Ionospheric Peaks: enabled, removes peaks non-Bragg power significantly exceeds Bragg power using seasonder_rejectNoiseIonospheric. Finalize Processing Steps: Marks end SeaSonde method processing object's metadata. Use Case: function designed processing SeaSonde radar data accurately identify validate First Order Regions, ensuring reliable current wave measurements.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeFORsSeaSondeMethod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute First Order Regions (FOR) Using the SeaSonde Method — seasonder_computeFORsSeaSondeMethod","text":"","code":"if (FALSE) { # \\dontrun{ # Compute First Order Regions using the SeaSonde method cs_obj <- seasonder_computeFORsSeaSondeMethod(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeLonLatFromOriginDistBearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Geographic Coordinates from Origin, Distance, and Bearing — seasonder_computeLonLatFromOriginDistBearing","title":"Compute Geographic Coordinates from Origin, Distance, and Bearing — seasonder_computeLonLatFromOriginDistBearing","text":"function calculates geographic coordinates (latitude longitude) given distance bearing specified origin.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeLonLatFromOriginDistBearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Geographic Coordinates from Origin, Distance, and Bearing — seasonder_computeLonLatFromOriginDistBearing","text":"","code":"seasonder_computeLonLatFromOriginDistBearing(   origin_lon,   origin_lat,   dist,   bearing )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeLonLatFromOriginDistBearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Geographic Coordinates from Origin, Distance, and Bearing — seasonder_computeLonLatFromOriginDistBearing","text":"origin_lon numeric value representing longitude origin point decimal degrees. origin_lat numeric value representing latitude origin point decimal degrees. dist numeric value representing distance origin kilometers. bearing numeric vector bearings (degrees) indicating direction origin.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeLonLatFromOriginDistBearing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Geographic Coordinates from Origin, Distance, and Bearing — seasonder_computeLonLatFromOriginDistBearing","text":"data frame two columns: lon: longitude computed geographic coordinates. lat: latitude computed geographic coordinates.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeLonLatFromOriginDistBearing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Geographic Coordinates from Origin, Distance, and Bearing — seasonder_computeLonLatFromOriginDistBearing","text":"function uses geodetic formulas provided geosphere package compute destination point based : Origin longitude latitude Distance meters (converted kilometers) Bearing degrees calculation employs geosphere::destPoint function, handles spherical geometry Earth.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeLonLatFromOriginDistBearing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Geographic Coordinates from Origin, Distance, and Bearing — seasonder_computeLonLatFromOriginDistBearing","text":"","code":"if (FALSE) { # \\dontrun{ # Example with a point at 100 km to the north of the origin result <- seasonder_computeLonLatFromOriginDistBearing(-123.3656, 48.4284, 100, 0) print(result) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeNoiseLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Noise Level for First Order Region (FOR) Processing — seasonder_computeNoiseLevel","title":"Compute Noise Level for First Order Region (FOR) Processing — seasonder_computeNoiseLevel","text":"function estimates noise level self-spectra SeaSondeR cross-spectral object. noise level computed averaging spectral power within predefined frequency range first-order Bragg signal expected.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeNoiseLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Noise Level for First Order Region (FOR) Processing — seasonder_computeNoiseLevel","text":"","code":"seasonder_computeNoiseLevel(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeNoiseLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Noise Level for First Order Region (FOR) Processing — seasonder_computeNoiseLevel","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeNoiseLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Noise Level for First Order Region (FOR) Processing — seasonder_computeNoiseLevel","text":"updated SeaSondeRCS object computed noise level stored attributes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeNoiseLevel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Noise Level for First Order Region (FOR) Processing — seasonder_computeNoiseLevel","text":"Steps Noise Level Computation: Determine Noise Reference Limits: Retrieves normalized Doppler frequency limits noise reference seasonder_getSeaSondeRCS_FOR_parameters. Converts limits Doppler bin indices using seasonder_SwapDopplerUnits. Ensures missing values replaced appropriate boundary values. Extract Spectral Data Noise Estimation: function extracts self-spectra (SSA3) antenna 3 using seasonder_getSeaSondeRCS_SelfSpectra. extraction limited Doppler bins within computed noise reference range. Compute Average Noise Level: extracted spectral data negative positive Doppler regions concatenated. row-wise mean computed estimate average noise level. Store Noise Level Object: computed noise level assigned NoiseLevel attribute SeaSondeRCS object. computed noise level crucial setting signal--noise thresholds used first-order Bragg region detection.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computeNoiseLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Noise Level for First Order Region (FOR) Processing — seasonder_computeNoiseLevel","text":"","code":"if (FALSE) { # \\dontrun{ # Compute noise level for a SeaSondeRCS object cs_obj <- seasonder_computeNoiseLevel(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computePowerMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Power Matrix — seasonder_computePowerMatrix","title":"Compute Power Matrix — seasonder_computePowerMatrix","text":"function calculates power matrix based provided steering vector, eigenvalues, eigenvectors. computation differs depending number columns steering vector matrix.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computePowerMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Power Matrix — seasonder_computePowerMatrix","text":"","code":"seasonder_computePowerMatrix(eig, a)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computePowerMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Power Matrix — seasonder_computePowerMatrix","text":"eig list containing eigenvalues eigenvectors covariance matrix. list include: values: numeric vector eigenvalues. vectors: matrix column eigenvector. complex matrix representing steering vector(s). column corresponds direction arrival.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computePowerMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Power Matrix — seasonder_computePowerMatrix","text":"complex matrix representing power matrix, calculated based provided eigenvalues, eigenvectors, steering vectors. number columns zero, function returns NULL.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computePowerMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Power Matrix — seasonder_computePowerMatrix","text":"function computes power matrix using following steps: two columns: Select first two eigenvalues corresponding eigenvectors. Compute matrix \\(G = ^* \\cdot \\text{eigVector}\\), \\(^*\\) conjugate transpose . Calculate inverse G conjugate transpose. Compute power matrix \\(P = G_{\\text{inv}}^* \\cdot \\text{diag(eigValues)} \\cdot G_{\\text{inv}}\\). one column: Select first eigenvalue corresponding eigenvector. Follow similar steps single-column operations. columns, function returns NULL.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computePowerMatrix.html","id":"mathematical-formula","dir":"Reference","previous_headings":"","what":"Mathematical Formula","title":"Compute Power Matrix — seasonder_computePowerMatrix","text":"steering vector matrix \\(\\), eigenvectors \\(\\text{eigVector}\\), eigenvalues \\(\\text{eigValues}\\), power matrix calculated : $$P = G_{\\text{inv}}^* \\cdot \\text{diag(eigValues)} \\cdot G_{\\text{inv}}$$ : \\(G = ^* \\cdot \\text{eigVector}\\) \\(G_{\\text{inv}}\\) inverse \\(G\\).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computePowerMatrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Power Matrix — seasonder_computePowerMatrix","text":"Paolo, T. de, Cook, T., & Terrill, E. (2007). Properties HF RADAR Compact Antenna Arrays Effect MUSIC Algorithm. OCEANS 2007, 1–10. doi:10.1109/oceans.2007.4449265.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_computePowerMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Power Matrix — seasonder_computePowerMatrix","text":"","code":"if (FALSE) { # \\dontrun{ # Example with two steering vectors eig <- list(   values = c(10, 5),   vectors = matrix(c(1+1i, 1-1i, 2+2i, 2-2i), ncol = 2) ) a <- matrix(c(1+1i, 2+2i, 3+3i, 4+4i), ncol = 2) power_matrix <- seasonder_computePowerMatrix(eig, a)  # Example with one steering vector a <- matrix(c(1+1i, 2+2i), ncol = 1) power_matrix <- seasonder_computePowerMatrix(eig, a) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_compute_antenna_pattern_proyections.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Antenna Pattern Projections for the MUSIC Algorithm — seasonder_compute_antenna_pattern_proyections","title":"Compute Antenna Pattern Projections for the MUSIC Algorithm — seasonder_compute_antenna_pattern_proyections","text":"function computes projection antenna pattern vector onto noise subspace, critical step Multiple Signal Classification (MUSIC) algorithm. used estimate direction arrival (DOA) identifying bearing minimizes projection.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_compute_antenna_pattern_proyections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Antenna Pattern Projections for the MUSIC Algorithm — seasonder_compute_antenna_pattern_proyections","text":"","code":"seasonder_compute_antenna_pattern_proyections(En, a)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_compute_antenna_pattern_proyections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Antenna Pattern Projections for the MUSIC Algorithm — seasonder_compute_antenna_pattern_proyections","text":"En matrix containing eigenvectors noise subspace, derived covariance matrix signals. complex-valued vector representing antenna manifold response specific bearing. element corresponds response antenna element.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_compute_antenna_pattern_proyections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Antenna Pattern Projections for the MUSIC Algorithm — seasonder_compute_antenna_pattern_proyections","text":"complex scalar representing magnitude projection antenna manifold vector onto noise subspace. value indicates close antenna manifold vector orthogonal noise subspace.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_compute_antenna_pattern_proyections.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Antenna Pattern Projections for the MUSIC Algorithm — seasonder_compute_antenna_pattern_proyections","text":"MUSIC algorithm leverages property antenna manifold vector orthogonal noise subspace eigenvectors ideal scenario. However, practice, noise covariance matrix perturbs noise subspace, resulting small non-zero projection. function calculates magnitude projection using formula: $$P = ^H (En E_n^H) $$ : \\(\\) antenna manifold vector. \\(En\\) noise subspace eigenvector matrix. \\(H\\) denotes Hermitian (conjugate transpose) operator. bearing produces smallest projection considered best estimate signal bearing, corresponds direction signal strongest relative noise.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_compute_antenna_pattern_proyections.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Antenna Pattern Projections for the MUSIC Algorithm — seasonder_compute_antenna_pattern_proyections","text":"Paolo, T. de, Cook, T., & Terrill, E. (2007). Properties HF RADAR Compact Antenna Arrays Effect MUSIC Algorithm. OCEANS 2007, 1–10. doi:10.1109/oceans.2007.4449265.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_compute_antenna_pattern_proyections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Antenna Pattern Projections for the MUSIC Algorithm — seasonder_compute_antenna_pattern_proyections","text":"","code":"if (FALSE) { # \\dontrun{ # Assume En is a 3x3 noise subspace eigenvector matrix and a is the antenna manifold vector. En <- matrix(c(0.5+0.5i, -0.3i, 0, 0.4, 0.6-0.2i, -0.4i, 0, 0.3+0.3i, -0.1i), nrow = 3) a <- c(1+1i, -0.5+0.5i, 0.2-0.3i) projection <- seasonder_compute_antenna_pattern_proyections(En, a) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRAPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SeaSondeRAPM Object — seasonder_createSeaSondeRAPM","title":"Create a SeaSondeRAPM Object — seasonder_createSeaSondeRAPM","text":"function creates SeaSondeRAPM object store antenna pattern calibration data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRAPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SeaSondeRAPM Object — seasonder_createSeaSondeRAPM","text":"","code":"seasonder_createSeaSondeRAPM(   calibration_matrix = matrix(complex(real = NA_real_, imaginary = NA_real_), nrow = 3,     ncol = 0),   ... )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRAPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SeaSondeRAPM Object — seasonder_createSeaSondeRAPM","text":"calibration_matrix 3 x b complex matrix, b number bearings calibration. ... Additional named attributes passed seasonder_initializeAttributesSeaSondeRAPM.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRAPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SeaSondeRAPM Object — seasonder_createSeaSondeRAPM","text":"SeaSondeRAPM object containing complex matrix class attribute 'SeaSondeRAPM' additional attributes metadata. Row names set \"A13\", \"A23\" \"A33\" column names set values BEAR.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRAPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SeaSondeRAPM Object — seasonder_createSeaSondeRAPM","text":"function performs following operations: Validates calibration_matrix seasonder_validateCalibrationMatrixSeaSondeRAPM. Initializes attributes either default user-provided values. Merges initialized attributes calibration_matrix. Sets object's class 'SeaSondeRAPM'. details attributes, see seasonder_initializeAttributesSeaSondeRAPM.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SeaSondeRCS object from a file path — seasonder_createSeaSondeRCS.character","title":"Create a SeaSondeRCS object from a file path — seasonder_createSeaSondeRCS.character","text":"method creates SeaSondeRCS object reading file specified file path. verifies file's existence, determines file type (\"CS\" \"CSSY\") using seasonder_find_spectra_file_type, reads file using appropriate function. specs_path provided (set rlang::zap()), default YAML specifications file path retrieved using seasonder_defaultSpecsFilePath based detected file type.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SeaSondeRCS object from a file path — seasonder_createSeaSondeRCS.character","text":"","code":"# S3 method for class 'character' seasonder_createSeaSondeRCS(x, specs_path = rlang::zap(), endian = \"big\", ...)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SeaSondeRCS object from a file path — seasonder_createSeaSondeRCS.character","text":"x character string specifying path SeaSonde CS file. specs_path character string specifying path YAML specifications CS file. provided set rlang::zap(), default specifications path detected file type used. endian character string indicating byte order. Options \"big\" (default) \"little\". ... Additional parameters passed new_SeaSondeRCS creating object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SeaSondeRCS object from a file path — seasonder_createSeaSondeRCS.character","text":"SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.character.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SeaSondeRCS object from a file path — seasonder_createSeaSondeRCS.character","text":"function performs following steps: Checks file specified x exists; , aborts error. Determines file type using seasonder_find_spectra_file_type. specs_path provided set rlang::zap(), retrieves default YAML specifications path using seasonder_defaultSpecsFilePath based detected file type. Reads file using appropriate function: seasonder_readSeaSondeCSFile CS files. seasonder_readSeaSondeRCSSYFile CSSY files. Creates SeaSondeRCS object using new_SeaSondeRCS header data obtained file. Appends processing step indicating creation source via seasonder_setSeaSondeRCS_ProcessingSteps creation step text generated SeaSondeRCS_creation_step_text(x).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SeaSondeRCS object from a file path — seasonder_createSeaSondeRCS.character","text":"","code":"if (FALSE) { # \\dontrun{   # Create a SeaSondeRCS object from a file using the default YAML specifications   rcs_object <- seasonder_createSeaSondeRCS(\"path/to/cs_file.cs\")    # Create a SeaSondeRCS object from a file with a specified YAML specifications file   rcs_object <- seasonder_createSeaSondeRCS(\"path/to/cs_file.cs\", specs_path = \"path/to/specs.yaml\") } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SeaSondeRCS object — seasonder_createSeaSondeRCS","title":"Create a SeaSondeRCS object — seasonder_createSeaSondeRCS","text":"generic function creates SeaSondeRCS object either file path directly list containing header data. x character string, function determines file type (either \"CS\" \"CSSY\") analyzing spectra file reads using appropriate reading function. specs_path provided (set rlang::zap()), default YAML specifications path corresponding detected file type used.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SeaSondeRCS object — seasonder_createSeaSondeRCS","text":"","code":"seasonder_createSeaSondeRCS(x, specs_path = NULL, ...)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SeaSondeRCS object — seasonder_createSeaSondeRCS","text":"x Either character string specifying path SeaSonde CS file list containing header data. specs_path character string specifying path YAML specifications CS file. Used x character string. ... Additional parameters passed underlying functions. endian character string indicating byte order. Options \"big\" (default) \"little\".","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SeaSondeRCS object — seasonder_createSeaSondeRCS","text":"SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SeaSondeRCS object — seasonder_createSeaSondeRCS","text":"character inputs, function first checks specified file exists. determines file type using seasonder_find_spectra_file_type. specs_path parameter provided set rlang::zap(), default specifications file path obtained using seasonder_defaultSpecsFilePath based detected file type. file read using appropriate reading function: seasonder_readSeaSondeCSFile CS files. seasonder_readSeaSondeRCSSYFile CSSY files. list inputs, SeaSondeRCS object created directly provided header data. Additionally, processing step appended object using seasonder_setSeaSondeRCS_ProcessingSteps creation step text indicates source.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SeaSondeRCS object — seasonder_createSeaSondeRCS","text":"","code":"if (FALSE) { # \\dontrun{   # Creating a SeaSondeRCS object from a list   cs_list <- list(header = my_header, data = my_data)   rcs_object <- seasonder_createSeaSondeRCS(cs_list)    # Creating a SeaSondeRCS object from a file path using default YAML specifications   rcs_object <- seasonder_createSeaSondeRCS(\"path/to/cs_file.cs\")    # Creating a SeaSondeRCS object from a file path with a specified YAML specifications file   rcs_object <- seasonder_createSeaSondeRCS(\"path/to/cs_file.cs\", specs_path = \"path/to/specs.yaml\") } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SeaSondeRCS object from a list — seasonder_createSeaSondeRCS.list","title":"Create a SeaSondeRCS object from a list — seasonder_createSeaSondeRCS.list","text":"method creates SeaSondeRCS object directly list containing header data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SeaSondeRCS object from a list — seasonder_createSeaSondeRCS.list","text":"","code":"# S3 method for class 'list' seasonder_createSeaSondeRCS(x, specs_path = NULL, ...)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SeaSondeRCS object from a list — seasonder_createSeaSondeRCS.list","text":"x list components header data required constructing SeaSondeRCS object. specs_path used list inputs. ... Additional parameters may used setting object attributes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SeaSondeRCS object from a list — seasonder_createSeaSondeRCS.list","text":"SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SeaSondeRCS object from a list — seasonder_createSeaSondeRCS.list","text":"function creates new SeaSondeRCS object using new_SeaSondeRCS provided header data. appends processing step, generated SeaSondeRCS_creation_step_text(\"list\"), object via seasonder_setSeaSondeRCS_ProcessingSteps.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_createSeaSondeRCS.list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a SeaSondeRCS object from a list — seasonder_createSeaSondeRCS.list","text":"","code":"if (FALSE) { # \\dontrun{   # Given a list with header and data, create a SeaSondeRCS object   cs_list <- list(header = my_header, data = my_data)   rcs_object <- seasonder_createSeaSondeRCS(cs_list) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultFOR_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Default First-Order Radial Processing Parameters — seasonder_defaultFOR_parameters","title":"Default First-Order Radial Processing Parameters — seasonder_defaultFOR_parameters","text":"function returns list default parameters first-order radial processing CODAR's Radial Suite R7. parameter equivalent R8 version, applicable, often expressed decibels (dB).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultFOR_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default First-Order Radial Processing Parameters — seasonder_defaultFOR_parameters","text":"","code":"seasonder_defaultFOR_parameters()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultFOR_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default First-Order Radial Processing Parameters — seasonder_defaultFOR_parameters","text":"named list containing default parameter values.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultFOR_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default First-Order Radial Processing Parameters — seasonder_defaultFOR_parameters","text":"Parameter Descriptions: nsm (R8: Doppler Smoothing) Default value: 2 Usage: Sets many Doppler bins (points) smoothed. Smoothing helps remove jagged edges sea echo spectrum, aiding locating null first second order (noise floor). Recommended values: Typically 2 6. Default Radial Suite R8 2 Effects -/-smoothing: high: May smear real null, causing first order appear wider. low: Jagged minima may cause null detected inside first-order region, making appear narrow. fdown (R8: Null Peak Power) Default value (R7): 10 Equivalent dB (R8): 10 dB Usage: Defines far peak power algorithm must descend (dB) searching null separates first second order. helps avoid including second-order energy part first-order. Recommended range: 3.981072 31.62278 (6 15 dB R8). Default Radial Suite R8 10 dB Effects misconfiguration: large: null search may bypassed entirely, causing second-order content included first order. small: null may found inside first-order region, excluding valid Bragg energy. flim (R8: Peak Power Dropoff) Default value (R7): 100 Equivalent dB (R8): 20 dB Usage: peak located, spectral bins flim peak (linear scale) 20 dB peak (dB scale) excluded first-order region. Recommended range: 15.84893 316.2278 (12 25 dB R8). Default Radial Suite R8 20 dB. Effects misconfiguration: high: May include non-Bragg signal yield spurious high velocity estimates. low: May cut part actual Bragg signal, underestimating maximum velocities. noisefact (R8: Signal Noise) Default value (R7): 3.981072 Equivalent dB (R8): 6 dB Usage: Sets threshold noise floor must exceeded algorithm accept Doppler bins potential first-order. Recommended range: 3.981072 7.943282 (6 9 dB R8). Default Radial Suite R8 6 dB Effects misconfiguration: high: Useful Bragg data excluded. low: Noise spurious signals may included Bragg. currmax (R8: Maximum Velocity) Default value: 2 m/s Usage: Sets maximum radial velocity, preventing first-order limits extending beyond realistic current speeds site. Effects misconfiguration: high: May include non-Bragg data, producing overestimated velocities. low: May exclude valid Bragg data, underestimating velocities. reject_distant_bragg (Reject Distant Bragg) Default value: TRUE Usage: Rejects first-order region limits farther Bragg index (central Doppler bin zero current) width region . Helps avoid misclassifying strong isolated signals (e.g., ships) Bragg. Recommendation: Usually keep enabled unless operating site strongly biased positive negative currents expected. reject_noise_ionospheric (Reject Noise/Ionospheric) Default value: TRUE Usage: Rejects Bragg total non-Bragg power range cell exceeds Bragg power least threshold set reject_noise_ionospheric_threshold. Recommended set FALSE 42 MHz systems. Recommendation: Enable site experiences significant noise. reject_noise_ionospheric_threshold (Reject Noise/Ionospheric Threshold) Default value: 0 Equivalent dB: 0 dB Usage: Difference threshold (dB) comparing non-Bragg power Bragg power. non-Bragg power higher threshold, Bragg rejected. Recommended setting: Typically 0 dB. Increase needed less sensitive noise contamination.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultFOR_parameters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Default First-Order Radial Processing Parameters — seasonder_defaultFOR_parameters","text":"COS. SeaSonde Radial Suite Release 7; CODAR Ocean Sensors (COS): Mountain View, CA, USA, 2013. COS. SeaSonde Radial Suite Release 8; CODAR Ocean Sensors (COS): Mountain View, CA, USA, 2016.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultFOR_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default First-Order Radial Processing Parameters — seasonder_defaultFOR_parameters","text":"","code":"params <- seasonder_defaultFOR_parameters() print(params) #> $nsm #> [1] 2 #>  #> $fdown #> [1] 10 #>  #> $flim #> [1] 100 #>  #> $noisefact #> [1] 3.981072 #>  #> $currmax #> [1] 2 #>  #> $reject_distant_bragg #> [1] TRUE #>  #> $reject_noise_ionospheric #> [1] TRUE #>  #> $reject_noise_ionospheric_threshold #> [1] 0 #>"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultMUSIC_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Parameters for MUSIC Algorithm — seasonder_defaultMUSIC_parameters","title":"Default Parameters for MUSIC Algorithm — seasonder_defaultMUSIC_parameters","text":"function returns default parameters MUSIC algorithm used SeaSondeR package.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultMUSIC_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Parameters for MUSIC Algorithm — seasonder_defaultMUSIC_parameters","text":"","code":"seasonder_defaultMUSIC_parameters()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultMUSIC_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Parameters for MUSIC Algorithm — seasonder_defaultMUSIC_parameters","text":"numeric vector containing default parameters MUSIC algorithm: c(40, 20, 2).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultMUSIC_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default Parameters for MUSIC Algorithm — seasonder_defaultMUSIC_parameters","text":"default parameters : \\(40\\): Threshold used seasonder_MUSICCheckEigenValueRatio. \\(20\\): Threshold used seasonder_MUSICCheckSignalPowers. \\(2\\): Threshold used seasonder_MUSICCheckSignalMatrix.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultMUSIC_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Parameters for MUSIC Algorithm — seasonder_defaultMUSIC_parameters","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve default parameters params <- seasonder_defaultMUSIC_parameters() print(params) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsFilePath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Default Specifications File Path — seasonder_defaultSpecsFilePath","title":"Get the Default Specifications File Path — seasonder_defaultSpecsFilePath","text":"function returns default file path specifications YAML file corresponding provided type. type must one names defined default paths (.e., \"CS\" \"CSSY\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsFilePath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Default Specifications File Path — seasonder_defaultSpecsFilePath","text":"","code":"seasonder_defaultSpecsFilePath(type = \"CS\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsFilePath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Default Specifications File Path — seasonder_defaultSpecsFilePath","text":"type character string specifying type specifications file. Default \"CS\".","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsFilePath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Default Specifications File Path — seasonder_defaultSpecsFilePath","text":"character string representing full path YAML specifications file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsFilePath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Default Specifications File Path — seasonder_defaultSpecsFilePath","text":"","code":"if (FALSE) { # \\dontrun{   # Retrieve the default CS specifications file path   cs_specs_path <- seasonder_defaultSpecsFilePath(\"CS\")    # Retrieve the default CSSY specifications file path   cssy_specs_path <- seasonder_defaultSpecsFilePath(\"CSSY\") } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsPathForFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Default Specifications Path for a Spectra File — seasonder_defaultSpecsPathForFile","title":"Get the Default Specifications Path for a Spectra File — seasonder_defaultSpecsPathForFile","text":"function returns default YAML specifications file path corresponding given spectra file. first determines file type analyzing file content retrieves associated default specifications path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsPathForFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Default Specifications Path for a Spectra File — seasonder_defaultSpecsPathForFile","text":"","code":"seasonder_defaultSpecsPathForFile(filepath, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsPathForFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Default Specifications Path for a Spectra File — seasonder_defaultSpecsPathForFile","text":"filepath character string specifying path spectra file. endian character string indicating file's byte order (\"big\" default).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsPathForFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Default Specifications Path for a Spectra File — seasonder_defaultSpecsPathForFile","text":"character string representing default YAML specifications file path detected file type.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsPathForFile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Default Specifications Path for a Spectra File — seasonder_defaultSpecsPathForFile","text":"function leverages seasonder_find_spectra_file_type determine whether file type \"CS\" \"CSSY\". uses seasonder_defaultSpecsFilePath obtain corresponding default specifications path.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_defaultSpecsPathForFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Default Specifications Path for a Spectra File — seasonder_defaultSpecsPathForFile","text":"","code":"if (FALSE) { # \\dontrun{   # Get the default specifications path for a given spectra file   specs_path <- seasonder_defaultSpecsPathForFile(\"path/to/spectra_file.bin\")   print(specs_path) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_disableLogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Disable log recording in SeaSondeR — seasonder_disableLogs","title":"Disable log recording in SeaSondeR — seasonder_disableLogs","text":"function disables log recording SeaSondeR package. disabled, various SeaSondeR functions longer output logs.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_disableLogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disable log recording in SeaSondeR — seasonder_disableLogs","text":"","code":"seasonder_disableLogs()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_disableLogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disable log recording in SeaSondeR — seasonder_disableLogs","text":"","code":"seasonder_disableLogs()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_disableMessages.html","id":null,"dir":"Reference","previous_headings":"","what":"Disable message logging in SeaSondeR — seasonder_disableMessages","title":"Disable message logging in SeaSondeR — seasonder_disableMessages","text":"function disables message logging SeaSondeR package. disabled, various SeaSondeR functions longer output informational messages.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_disableMessages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disable message logging in SeaSondeR — seasonder_disableMessages","text":"","code":"seasonder_disableMessages()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_disableMessages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disable message logging in SeaSondeR — seasonder_disableMessages","text":"","code":"seasonder_disableMessages()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_enableLogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable log recording in SeaSondeR — seasonder_enableLogs","title":"Enable log recording in SeaSondeR — seasonder_enableLogs","text":"function enables log recording SeaSondeR package. enabled, various SeaSondeR functions output logs.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_enableLogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable log recording in SeaSondeR — seasonder_enableLogs","text":"","code":"seasonder_enableLogs()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_enableLogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable log recording in SeaSondeR — seasonder_enableLogs","text":"","code":"seasonder_enableLogs()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_enableMessages.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable message logging in SeaSondeR — seasonder_enableMessages","title":"Enable message logging in SeaSondeR — seasonder_enableMessages","text":"function enables message logging SeaSondeR package. enabled, various SeaSondeR functions output informational messages.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_enableMessages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable message logging in SeaSondeR — seasonder_enableMessages","text":"","code":"seasonder_enableMessages()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_enableMessages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable message logging in SeaSondeR — seasonder_enableMessages","text":"","code":"seasonder_enableMessages()"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_estimateReferenceNoiseNormalizedLimits.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Reference Noise Limits in Normalized Doppler Frequency — seasonder_estimateReferenceNoiseNormalizedLimits","title":"Estimate Reference Noise Limits in Normalized Doppler Frequency — seasonder_estimateReferenceNoiseNormalizedLimits","text":"function estimates reference noise limits normalized Doppler frequencies SeaSondeR cross-spectral object. limits used define frequency range noise level assessed first-order region () detection.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_estimateReferenceNoiseNormalizedLimits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Reference Noise Limits in Normalized Doppler Frequency — seasonder_estimateReferenceNoiseNormalizedLimits","text":"","code":"seasonder_estimateReferenceNoiseNormalizedLimits(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_estimateReferenceNoiseNormalizedLimits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Reference Noise Limits in Normalized Doppler Frequency — seasonder_estimateReferenceNoiseNormalizedLimits","text":"seasonder_cs_obj SeaSondeRCS object containing Doppler frequency metadata.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_estimateReferenceNoiseNormalizedLimits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Reference Noise Limits in Normalized Doppler Frequency — seasonder_estimateReferenceNoiseNormalizedLimits","text":"numeric vector length two, representing lower upper reference noise limits normalized Doppler frequency.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_estimateReferenceNoiseNormalizedLimits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Reference Noise Limits in Normalized Doppler Frequency — seasonder_estimateReferenceNoiseNormalizedLimits","text":"function computes noise limits based maximum normalized Doppler frequency seasonder_getDopplerBinsFrequency. limits scaled using fixed factors set reference range noise analysis: lower bound 56.5% maximum normalized Doppler frequency. upper bound 100% maximum normalized Doppler frequency. lower bound value 56.5% determined empirical process involving multiple sample spectra. procedure began initial lower bound set 100%, iteration, value decreased 0.5%. noise floor calculated repeatedly compared temporal NoiseFloor.txt file generated AnalyseSpectra Tool Radial Suite R8. final lower bound percentage established value closely matched corresponding noise floor NoiseFloor.txt file. , several percentages averaged rounded nearest 0.5%. function used first-order detection processes noise reference levels required signal--noise ratio (SNR) calculations.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_estimateReferenceNoiseNormalizedLimits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Reference Noise Limits in Normalized Doppler Frequency — seasonder_estimateReferenceNoiseNormalizedLimits","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate reference noise limits for a SeaSondeRCS object noise_limits <- seasonder_estimateReferenceNoiseNormalizedLimits(cs_obj) print(noise_limits) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportCSVMUSICTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Export MUSIC Table to CSV — seasonder_exportCSVMUSICTable","title":"Export MUSIC Table to CSV — seasonder_exportCSVMUSICTable","text":"function exports MUSIC detection table SeaSondeRCS object CSV file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportCSVMUSICTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export MUSIC Table to CSV — seasonder_exportCSVMUSICTable","text":"","code":"seasonder_exportCSVMUSICTable(seasonder_cs_object, filepath)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportCSVMUSICTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export MUSIC Table to CSV — seasonder_exportCSVMUSICTable","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC detection data. filepath character string specifying path output CSV file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportCSVMUSICTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export MUSIC Table to CSV — seasonder_exportCSVMUSICTable","text":"function returns NULL invisibly. output saved specified file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportCSVMUSICTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export MUSIC Table to CSV — seasonder_exportCSVMUSICTable","text":"function performs following steps: Generates MUSIC table using seasonder_exportMUSICTable. Converts resulting table data frame. Writes data frame specified CSV file using data.table::fwrite.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportCSVMUSICTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export MUSIC Table to CSV — seasonder_exportCSVMUSICTable","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `seasonder_cs_obj` is a valid `SeaSondeRCS` object seasonder_exportCSVMUSICTable(seasonder_cs_obj, \"output/music_table.csv\") } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportMUSICTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Export MUSIC Table from SeaSondeRCS Object — seasonder_exportMUSICTable","title":"Export MUSIC Table from SeaSondeRCS Object — seasonder_exportMUSICTable","text":"function generates table containing detailed MUSIC detection data SeaSondeRCS object. output table includes geographic coordinates, signal parameters, metadata MUSIC detection.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportMUSICTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export MUSIC Table from SeaSondeRCS Object — seasonder_exportMUSICTable","text":"","code":"seasonder_exportMUSICTable(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportMUSICTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export MUSIC Table from SeaSondeRCS Object — seasonder_exportMUSICTable","text":"seasonder_cs_object SeaSondeRCS object containing MUSIC detection data related metadata.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportMUSICTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export MUSIC Table from SeaSondeRCS Object — seasonder_exportMUSICTable","text":"data frame following columns: datetime: Timestamp data. longitude: Geographic longitude detection. latitude: Geographic latitude detection. range_cell: Range cell number. range: Range kilometers. doppler_bin: Doppler bin number. doppler_freq: Doppler frequency. radial_velocity: Radial velocity m/s. signal_power: Signal power. bearing: Geographic bearing degrees. bearing_raw: Original MUSIC bearing degrees. noise_level: Noise level dB. signal_power_db: Signal power dB. SNR: Signal--noise ratio dB. DOA_peak_resp_db: DOA peak response dB.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportMUSICTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export MUSIC Table from SeaSondeRCS Object — seasonder_exportMUSICTable","text":"function performs following operations: Retrieves timestamp (nDateTime) header SeaSondeRCS object. Defaults .POSIXct(0) unavailable. Initializes empty data frame predefined columns. Retrieves MUSIC detection data, processes Direction Arrival (DOA) geographic coordinates (lonlat), unnests fields. Converts MUSIC bearings geographic bearings using associated Antenna Pattern Matrix (APM) object. Computes additional metrics signal power dB, signal--noise ratio (SNR), DOA peak response dB. Appends timestamp table reorders columns clarity.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_exportMUSICTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export MUSIC Table from SeaSondeRCS Object — seasonder_exportMUSICTable","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `seasonder_cs_obj` is a valid `SeaSondeRCS` object music_table <- seasonder_exportMUSICTable(seasonder_cs_obj) print(music_table) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_extractFOR.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract First Order Region (FOR) Spectral Data — seasonder_extractFOR","title":"Extract First Order Region (FOR) Spectral Data — seasonder_extractFOR","text":"function extracts spectral power corresponding First Order Region () given self-spectra (SS) matrix. retrieves spectral values within Doppler bins identified part positive negative Bragg regions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_extractFOR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract First Order Region (FOR) Spectral Data — seasonder_extractFOR","text":"","code":"seasonder_extractFOR(seasonder_cs_obj, spectrum, FOR)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_extractFOR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract First Order Region (FOR) Spectral Data — seasonder_extractFOR","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data. spectrum numeric matrix representing self-spectra data single range cell. list containing Doppler bin indices defining region, two elements: - negative_FOR: numeric vector Doppler bins negative Bragg region. - positive_FOR: numeric vector Doppler bins positive Bragg region.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_extractFOR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract First Order Region (FOR) Spectral Data — seasonder_extractFOR","text":"list two elements: negative_FOR: matrix containing spectral power negative Bragg region. positive_FOR: matrix containing spectral power positive Bragg region.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_extractFOR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract First Order Region (FOR) Spectral Data — seasonder_extractFOR","text":"function performs following steps: Initialize Empty Matrices: Creates empty matrices store extracted spectral data. Extract Negative Data: negative bins exist, calls seasonder_extractSeaSondeRCS_dopplerRanges_from_SSdata extract corresponding spectral values. Extract Positive Data: positive bins exist, extracts spectral values using function. Return Extracted Spectral Data: Outputs list containing extracted negative positive Bragg region spectral data. function primarily used filtering validating first-order Bragg region SeaSonde radar processing.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_extractFOR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract First Order Region (FOR) Spectral Data — seasonder_extractFOR","text":"","code":"if (FALSE) { # \\dontrun{ # Extract spectral power for FOR bins FOR_data <- seasonder_extractFOR(cs_obj, spectrum_matrix, detected_FOR_bins) print(FOR_data) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_filterFORAmplitudes.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter First Order Region (FOR) Based on Amplitude Thresholds — seasonder_filterFORAmplitudes","title":"Filter First Order Region (FOR) Based on Amplitude Thresholds — seasonder_filterFORAmplitudes","text":"function filters First Order Region () Doppler bins based amplitude thresholds. applies combination noise-based peak power-based criteria remove low-amplitude bins meet required signal--noise ratio.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_filterFORAmplitudes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter First Order Region (FOR) Based on Amplitude Thresholds — seasonder_filterFORAmplitudes","text":"","code":"seasonder_filterFORAmplitudes(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_filterFORAmplitudes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter First Order Region (FOR) Based on Amplitude Thresholds — seasonder_filterFORAmplitudes","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_filterFORAmplitudes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter First Order Region (FOR) Based on Amplitude Thresholds — seasonder_filterFORAmplitudes","text":"updated SeaSondeRCS object filtered bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_filterFORAmplitudes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter First Order Region (FOR) Based on Amplitude Thresholds — seasonder_filterFORAmplitudes","text":"Steps Amplitude Filtering: Retrieve First Order Parameters: function extracts flim (Null Peak Power) noisefact (Signal--Noise Factor) seasonder_getSeaSondeRCS_FOR_parameters. Compute Noise Levels: Calls seasonder_computeNoiseLevel estimate average noise level across range cells. Converts noise level filtering threshold multiplying noisefact. Extract Smoothed Self-Spectra Data: Retrieves smoothed self-spectra (SSA3) using seasonder_getSeaSondeRCS_FOR_SS_Smoothed. Extracts spectral power range cell using seasonder_extractFOR. Determine Filtering Thresholds: Computes power threshold region taking maximum amplitude region dividing flim. Apply Filtering Conditions: Doppler bin retained power greater : noise threshold (computed noisefact). power threshold computed flim. Store Filtered Object: Updates SeaSondeRCS object filtered bins. filtering ensures strong, reliable first-order Bragg signals retained, reducing impact noise second-order contamination.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_filterFORAmplitudes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter First Order Region (FOR) Based on Amplitude Thresholds — seasonder_filterFORAmplitudes","text":"","code":"if (FALSE) { # \\dontrun{ # Apply amplitude filtering to the FOR detection cs_obj <- seasonder_filterFORAmplitudes(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Nulls in First Order Region (FOR) Across All Range Cells — seasonder_findFORNulls","title":"Identify Nulls in First Order Region (FOR) Across All Range Cells — seasonder_findFORNulls","text":"function locates null points First Order Region () SeaSondeR cross-spectral object. smooths self-spectra (SS) data, extracts relevant Doppler bins, determines boundaries first-order Bragg region range cell.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Nulls in First Order Region (FOR) Across All Range Cells — seasonder_findFORNulls","text":"","code":"seasonder_findFORNulls(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Nulls in First Order Region (FOR) Across All Range Cells — seasonder_findFORNulls","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNulls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Nulls in First Order Region (FOR) Across All Range Cells — seasonder_findFORNulls","text":"updated SeaSondeRCS object computed nulls, maximum power, bin indices.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNulls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Nulls in First Order Region (FOR) Across All Range Cells — seasonder_findFORNulls","text":"function follows steps: Smooth Self-Spectra Data: Calls seasonder_SmoothFORSS apply running mean filter. Extract Smoothed Self-Spectra: Retrieves processed SS matrix using seasonder_getSeaSondeRCS_FOR_SS_Smoothed. Identify Doppler Center Bin: Determines central Doppler bin using seasonder_getCenterDopplerBin. Segment Spectrum: Splits smoothed SS data : negative Bragg region (left side Doppler spectrum). positive Bragg region (right side Doppler spectrum). Find Nulls Region: Uses seasonder_findFORNullsInSSMatrix identify null positions. Store Results: Extracts: First Order Region (). maximum power (MAXP). Doppler bin index maximum power (MAXP.bin). Update SeaSondeRCS Object: Saves detected boundaries related metrics.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Nulls in First Order Region (FOR) Across All Range Cells — seasonder_findFORNulls","text":"","code":"if (FALSE) { # \\dontrun{ # Find First Order Nulls for a SeaSondeRCS object cs_obj <- seasonder_findFORNulls(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInFOR.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Nulls in First Order Region (FOR) — seasonder_findFORNullsInFOR","title":"Find Nulls in First Order Region (FOR) — seasonder_findFORNullsInFOR","text":"function locates null point First Order Region () spectrum, separates first-order Bragg peak second-order energy noise floor.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInFOR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Nulls in First Order Region (FOR) — seasonder_findFORNullsInFOR","text":"","code":"seasonder_findFORNullsInFOR(   FOR,   start_point_P,   doppler_bins,   left_region = FALSE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInFOR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Nulls in First Order Region (FOR) — seasonder_findFORNullsInFOR","text":"numeric vector representing power spectrum region. start_point_P numeric value representing power threshold search null point begins. doppler_bins numeric vector containing Doppler bins corresponding spectrum . left_region logical value indicating whether null searched negative Bragg region. Default FALSE.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInFOR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Nulls in First Order Region (FOR) — seasonder_findFORNullsInFOR","text":"numeric value representing Doppler bin detected null position.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInFOR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Nulls in First Order Region (FOR) — seasonder_findFORNullsInFOR","text":"function follows steps determine null point: left_region TRUE, spectrum Doppler bins reversed. power spectrum transformed facilitate peak identification: absolute values power taken multiplied -1. start_point_P threshold also inverted. function identifies first local maximum transformed spectrum exceeds start_point_P. corresponding Doppler bin detected peak returned null position. function relies pracma::findpeaks identify peak.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInFOR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Nulls in First Order Region (FOR) — seasonder_findFORNullsInFOR","text":"","code":"if (FALSE) { # \\dontrun{ FOR_spectrum <- c(0.1, 0.2, 0.3, 0.5, 0.8, 0.6, 0.4, 0.2, 0.1) start_power <- 0.4 doppler_bins <- seq(-5, 5, length.out = length(FOR_spectrum)) null_bin <- seasonder_findFORNullsInFOR(FOR_spectrum, start_power, doppler_bins) print(null_bin) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSSMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Nulls in First Order Region (FOR) for a Self-Spectra Matrix — seasonder_findFORNullsInSSMatrix","title":"Identify Nulls in First Order Region (FOR) for a Self-Spectra Matrix — seasonder_findFORNullsInSSMatrix","text":"function applies null-finding algorithm row self-spectra (SS) matrix, determining boundaries First Order Region () range cell.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSSMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Nulls in First Order Region (FOR) for a Self-Spectra Matrix — seasonder_findFORNullsInSSMatrix","text":"","code":"seasonder_findFORNullsInSSMatrix(   seasonder_cs_obj,   SS,   doppler_bins,   negative_Bragg_region = FALSE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSSMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Nulls in First Order Region (FOR) for a Self-Spectra Matrix — seasonder_findFORNullsInSSMatrix","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters. SS numeric matrix representing self-spectra data, rows correspond range cells columns correspond Doppler bins. doppler_bins numeric vector indicating Doppler bins corresponding columns SS. negative_Bragg_region logical value indicating whether analyze negative Bragg region. Default FALSE.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSSMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Nulls in First Order Region (FOR) for a Self-Spectra Matrix — seasonder_findFORNullsInSSMatrix","text":"named list entry corresponds range cell, containing detected null positions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSSMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Nulls in First Order Region (FOR) for a Self-Spectra Matrix — seasonder_findFORNullsInSSMatrix","text":"function processes row self-spectra matrix, treating row independent spectrum nulls identified. nulls define boundaries first-order Bragg region. Processing Steps: Iterate row SS matrix. Extract power spectrum corresponding range cell. Apply seasonder_findFORNullsInSpectrum determine null positions. Store results named list, entry corresponds range cell.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSSMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Nulls in First Order Region (FOR) for a Self-Spectra Matrix — seasonder_findFORNullsInSSMatrix","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_obj` is a valid SeaSondeRCS object with self-spectra data doppler_bins <- seq(-5, 5, length.out = ncol(SS_matrix)) FOR_nulls <- seasonder_findFORNullsInSSMatrix(cs_obj, SS_matrix, doppler_bins) print(FOR_nulls) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSpectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Nulls in First Order Region (FOR) Spectrum — seasonder_findFORNullsInSpectrum","title":"Identify Nulls in First Order Region (FOR) Spectrum — seasonder_findFORNullsInSpectrum","text":"function locates null points First Order Region () Doppler spectrum. nulls define boundaries separating first-order Bragg peak surrounding noise second-order energy.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSpectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Nulls in First Order Region (FOR) Spectrum — seasonder_findFORNullsInSpectrum","text":"","code":"seasonder_findFORNullsInSpectrum(   seasonder_cs_obj,   spectrum,   doppler_bins,   negative_Bragg_region = FALSE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSpectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Nulls in First Order Region (FOR) Spectrum — seasonder_findFORNullsInSpectrum","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data. spectrum numeric vector representing power spectrum analyze. doppler_bins numeric vector containing Doppler bins corresponding spectrum. negative_Bragg_region logical value indicating whether function analyze negative Bragg region. Default FALSE.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSpectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Nulls in First Order Region (FOR) Spectrum — seasonder_findFORNullsInSpectrum","text":"list three elements: : sequence Doppler bins defining first order region. MAXP: maximum power found spectrum. MAXP.bin: Doppler bin index maximum power.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSpectrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Nulls in First Order Region (FOR) Spectrum — seasonder_findFORNullsInSpectrum","text":"function executes following steps: Retrieve First Order Settings: function extracts fdown parameter, defines drop-level relative maximum power. Prepare Spectrum: Convert values negative absolute magnitudes facilitate peak detection. Reverse spectrum Doppler bins analyzing negative Bragg region. Find Main Spectral Peak: function identifies first major peak using findpeaks least two consecutive increases decreases. search limited portion spectrum beyond peak. Determine First Order Boundaries: maximum power (MAXP) found along bin index (MAXP.bin). threshold value start_point_P computed MAXP / fdown establish cutoff point null search. Search Nulls: spectrum split left right sections: right-side spectrum analyzed using seasonder_findFORNullsInFOR find right null. left-side spectrum undergoes process reversed. Output Results: function returns list containing: sequence Doppler bins defining region. maximum power detected (MAXP). Doppler bin index MAXP occurred (MAXP.bin).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_findFORNullsInSpectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Nulls in First Order Region (FOR) Spectrum — seasonder_findFORNullsInSpectrum","text":"","code":"if (FALSE) { # \\dontrun{ # Sample spectrum spectrum <- c(0.1, 0.3, 0.5, 1.0, 2.5, 3.8, 2.1, 1.0, 0.5, 0.2) doppler_bins <- seq(-5, 5, length.out = length(spectrum))  # Find nulls in the spectrum result <- seasonder_findFORNullsInSpectrum(cs_obj, spectrum, doppler_bins) print(result) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_find_spectra_file_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the Spectra File Type — seasonder_find_spectra_file_type","title":"Determine the Spectra File Type — seasonder_find_spectra_file_type","text":"function identifies type spectra file (either \"CS\" \"CSSY\") reading header block based YAML specifications. first attempts read key size block using CSSY specifications, fails, reopens file tries read CS header block.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_find_spectra_file_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the Spectra File Type — seasonder_find_spectra_file_type","text":"","code":"seasonder_find_spectra_file_type(filepath, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_find_spectra_file_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the Spectra File Type — seasonder_find_spectra_file_type","text":"filepath character string specifying path spectra file. endian character string indicating file's byte order (\"big\" default).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_find_spectra_file_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the Spectra File Type — seasonder_find_spectra_file_type","text":"character string representing spectra file type (\"CS\" \"CSSY\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_find_spectra_file_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the Spectra File Type — seasonder_find_spectra_file_type","text":"function sets error handling parameters uses YAML specifications retrieved via seasonder_readYAMLSpecs seasonder_defaultSpecsFilePath. opens file binary read mode ensures connection closed upon exit. reading key size block fails, reopens file try reading CS header block. final file type determined key returned file block.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_find_spectra_file_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the Spectra File Type — seasonder_find_spectra_file_type","text":"","code":"if (FALSE) { # \\dontrun{   # Determine the spectra file type for a given file path   file_type <- seasonder_find_spectra_file_type(\"path/to/spectra_file.bin\")   print(file_type) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBinsRadialVelocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Radial Velocities for Each Doppler Bin — seasonder_getBinsRadialVelocity","title":"Calculate Radial Velocities for Each Doppler Bin — seasonder_getBinsRadialVelocity","text":"Computes radial velocities Doppler bin interval's high boundary SeaSonde radar cross-section (CS) object, typically visualized SpectraPlotterMap. function utilizes Doppler shift frequency alongside radar's wave number Bragg frequency transform frequency measurements radial velocities. calculation grounded relationship Doppler shift frequency velocity surface currents within radar's field view.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBinsRadialVelocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Radial Velocities for Each Doppler Bin — seasonder_getBinsRadialVelocity","text":"","code":"seasonder_getBinsRadialVelocity(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBinsRadialVelocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Radial Velocities for Each Doppler Bin — seasonder_getBinsRadialVelocity","text":"seasonder_cs_obj SeaSondeRCS object created using seasonder_createSeaSondeRCS. object contains necessary data calculating Doppler bins frequencies , subsequently, radial velocities.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBinsRadialVelocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Radial Velocities for Each Doppler Bin — seasonder_getBinsRadialVelocity","text":"numeric vector containing radial velocities (m/s) Doppler bin, calculated high boundary Doppler bin interval. velocities provide insight scatterers' radial movement within radar's observation area.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBinsRadialVelocity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Radial Velocities for Each Doppler Bin — seasonder_getBinsRadialVelocity","text":"Specifically, radial velocity \\(v\\) Doppler bin calculated using formula: [ v = Freq - BraggFreq2  k_0 ] \\(v\\) radial velocity, \\(Freq\\) Doppler shift frequency bin, \\(BraggFreq\\) Bragg frequency (negative frequencies 0 positive frequencies equal 0), \\(k_0\\) radar wave number divided \\(2\\).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggDopplerAngularFrequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Bragg Doppler Angular Frequency — seasonder_getBraggDopplerAngularFrequency","title":"Calculate the Bragg Doppler Angular Frequency — seasonder_getBraggDopplerAngularFrequency","text":"function computes Bragg Doppler angular frequencies SeaSonde radar system. frequencies represent characteristic Doppler shifts due wave resonance Bragg wavelength.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggDopplerAngularFrequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Bragg Doppler Angular Frequency — seasonder_getBraggDopplerAngularFrequency","text":"","code":"seasonder_getBraggDopplerAngularFrequency(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggDopplerAngularFrequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Bragg Doppler Angular Frequency — seasonder_getBraggDopplerAngularFrequency","text":"seasonder_cs_obj SeaSondeRCS object containing necessary data compute radar wave number.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggDopplerAngularFrequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Bragg Doppler Angular Frequency — seasonder_getBraggDopplerAngularFrequency","text":"numeric vector length two, containing negative positive Bragg Doppler angular frequencies (\\( _B \\)), radians per second.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggDopplerAngularFrequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Bragg Doppler Angular Frequency — seasonder_getBraggDopplerAngularFrequency","text":"Bragg Doppler angular frequency (\\( _B \\)) calculated using formula: [ _B =  2  g  k2 ] : \\( g \\) gravitational acceleration (approximately \\( 9.8 \\, m/s^2 \\)), \\( k \\) radar wave number radians per meter, \\(  \\) represents negative positive directions wave propagation. returned vector contains negative (\\( -_B \\)) positive (\\( +_B \\)) angular frequencies.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggDopplerAngularFrequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Bragg Doppler Angular Frequency — seasonder_getBraggDopplerAngularFrequency","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object bragg_angular_freq <- seasonder_getBraggDopplerAngularFrequency(cs_object) print(bragg_angular_freq) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggLineBins.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Bragg Line Doppler Bins — seasonder_getBraggLineBins","title":"Get Bragg Line Doppler Bins — seasonder_getBraggLineBins","text":"function calculates Doppler bin indices corresponding first-order Bragg frequencies (-1 1) SeaSonde Cross Spectra (CS) object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggLineBins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Bragg Line Doppler Bins — seasonder_getBraggLineBins","text":"","code":"seasonder_getBraggLineBins(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggLineBins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Bragg Line Doppler Bins — seasonder_getBraggLineBins","text":"seasonder_cs_obj SeaSonde Cross Spectra (CS) object created seasonder_createSeaSondeRCS(). object contains metadata required computation, including normalized Doppler frequencies mapping Doppler bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggLineBins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Bragg Line Doppler Bins — seasonder_getBraggLineBins","text":"numeric vector length 2, : first value Doppler bin corresponding -1 Bragg frequency. second value Doppler bin corresponding 1 Bragg frequency.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggLineBins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Bragg Line Doppler Bins — seasonder_getBraggLineBins","text":"function uses normalized Doppler frequencies first-order Bragg peaks (\\(-1\\) \\(1\\)) maps corresponding Doppler bin indices. mapping performed using helper function seasonder_NormalizedDopplerFreq2Bins(), converts normalized frequencies bin indices based spectral resolution Doppler range radar system. bins critical identifying Doppler shifts associated first-order Bragg scattering HF radar systems, correspond surface waves wavelengths half transmitted radar signal.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggLineBins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Bragg Line Doppler Bins — seasonder_getBraggLineBins","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage of seasonder_getBraggLineBins bragg_bins <- seasonder_getBraggLineBins(cs_obj) print(bragg_bins) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggWaveLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Bragg Wavelength — seasonder_getBraggWaveLength","title":"Calculate the Bragg Wavelength — seasonder_getBraggWaveLength","text":"function computes Bragg wavelength (\\( _B \\)) SeaSonde radar system. Bragg wavelength defined half radar wavelength used identify fundamental scattering mechanisms oceanographic radar measurements.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggWaveLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Bragg Wavelength — seasonder_getBraggWaveLength","text":"","code":"seasonder_getBraggWaveLength(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggWaveLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Bragg Wavelength — seasonder_getBraggWaveLength","text":"seasonder_cs_obj SeaSondeRCS object containing necessary data compute radar wavelength.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggWaveLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Bragg Wavelength — seasonder_getBraggWaveLength","text":"numeric value representing Bragg wavelength (\\( _B \\)) meters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggWaveLength.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Bragg Wavelength — seasonder_getBraggWaveLength","text":"Bragg wavelength (\\( _B \\)) calculated : [ _B = 2 ] : \\(  \\) radar wavelength meters, obtained using seasonder_getRadarWaveLength. Bragg wavelength critical parameter interpreting resonance scattering sea surface, fundamental operation HF radar systems.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getBraggWaveLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Bragg Wavelength — seasonder_getBraggWaveLength","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object bragg_wavelength <- seasonder_getBraggWaveLength(cs_object) print(bragg_wavelength) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getCSHeaderByPath.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a value from the SeaSondeRCS header by a specific path — seasonder_getCSHeaderByPath","title":"Retrieve a value from the SeaSondeRCS header by a specific path — seasonder_getCSHeaderByPath","text":"function retrieves specific value SeaSondeRCS object's header based provided path. path can single field name list nested field names.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getCSHeaderByPath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a value from the SeaSondeRCS header by a specific path — seasonder_getCSHeaderByPath","text":"","code":"seasonder_getCSHeaderByPath(seasonder_obj, path)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getCSHeaderByPath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a value from the SeaSondeRCS header by a specific path — seasonder_getCSHeaderByPath","text":"seasonder_obj SeaSondeRCS object. path character vector specifying field nested fields retrieve.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getCSHeaderByPath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a value from the SeaSondeRCS header by a specific path — seasonder_getCSHeaderByPath","text":"value specified path header. path found, NULL returned warning thrown.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getCSHeaderByPath.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Retrieve a value from the SeaSondeRCS header by a specific path — seasonder_getCSHeaderByPath","text":"function utilizes rlang package manage errors conditions, provide detailed structured condition messages: Condition Classes: seasonder_SeaSonderCS_field_not_found_in_header: Indicates specified path found header. Condition Cases: Field nested fields specified path found header.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerBinsFrequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Doppler Bins Frequency — seasonder_getDopplerBinsFrequency","title":"Get Doppler Bins Frequency — seasonder_getDopplerBinsFrequency","text":"function calculates frequency limits Doppler bin within SeaSonde Cross Spectrum (CS) object. can return frequencies either original Hz values normalized second Bragg frequency. frequencies calculated high limit Doppler bin interval, similar displayed SpectraPlotterMap.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerBinsFrequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Doppler Bins Frequency — seasonder_getDopplerBinsFrequency","text":"","code":"seasonder_getDopplerBinsFrequency(seasonder_cs_obj, normalized = FALSE)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerBinsFrequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Doppler Bins Frequency — seasonder_getDopplerBinsFrequency","text":"seasonder_cs_obj SeaSonde Cross Spectrum (CS) object created seasonder_createSeaSondeRCS(). object contains necessary metadata spectral data compute Doppler bin frequencies. normalized logical value indicating returned frequencies normalized second Bragg frequency. TRUE, frequencies divided second Bragg frequency, returning dimensionless values relative . Default FALSE, returning frequencies Hz.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerBinsFrequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Doppler Bins Frequency — seasonder_getDopplerBinsFrequency","text":"numeric vector frequencies representing high limit Doppler bin interval. normalized TRUE, frequencies dimensionless values relative second Bragg frequency; otherwise, Hz.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerBinsFrequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Doppler Bins Frequency — seasonder_getDopplerBinsFrequency","text":"function internally utilizes several helper functions seasonder_getCenterDopplerBin(), seasonder_getnDopplerCells(), seasonder_getDopplerSpectrumResolution() calculate Doppler bin frequencies. Furthermore, normalization requested, uses seasonder_getBraggDopplerAngularFrequency() obtain second Bragg frequency normalization purposes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerSpectrumResolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Doppler Spectrum Resolution — seasonder_getDopplerSpectrumResolution","title":"Calculate the Doppler Spectrum Resolution — seasonder_getDopplerSpectrumResolution","text":"function computes Doppler spectrum resolution given SeaSondeRCS object. resolution reflects frequency difference consecutive Doppler bins spectrum.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerSpectrumResolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Doppler Spectrum Resolution — seasonder_getDopplerSpectrumResolution","text":"","code":"seasonder_getDopplerSpectrumResolution(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerSpectrumResolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Doppler Spectrum Resolution — seasonder_getDopplerSpectrumResolution","text":"seasonder_cs_obj SeaSondeRCS object containing necessary data metadata Doppler spectrum analysis.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerSpectrumResolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Doppler Spectrum Resolution — seasonder_getDopplerSpectrumResolution","text":"numeric value representing Doppler spectrum resolution Hertz (Hz).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerSpectrumResolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Doppler Spectrum Resolution — seasonder_getDopplerSpectrumResolution","text":"Doppler spectrum resolution calculated using formula: [ Spectral Resolution = Sweep RateNumber Doppler Cells ] : \\(Sweep Rate\\) frequency repetition rate radar, obtained field fRepFreqHz object's header. \\(Number Doppler Cells\\) total number Doppler bins spectrum. calculation fundamental understanding frequency spacing adjacent Doppler bins radar spectrum.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getDopplerSpectrumResolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Doppler Spectrum Resolution — seasonder_getDopplerSpectrumResolution","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object spectral_res <- seasonder_getDopplerSpectrumResolution(cs_object) print(spectral_res) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getLog.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the Last Logs — seasonder_getLog","title":"Retrieve the Last Logs — seasonder_getLog","text":"function fetches recent log entries global log variable seasonder_the$log.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getLog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the Last Logs — seasonder_getLog","text":"","code":"seasonder_getLog(n = 100)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getLog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the Last Logs — seasonder_getLog","text":"n integer specifying number recent log entries retrieve.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getLog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the Last Logs — seasonder_getLog","text":"Returns n recent log entries global log.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Radar Wavelength — seasonder_getRadarWaveLength","title":"Calculate the Radar Wavelength — seasonder_getRadarWaveLength","text":"function computes radar wavelength based center frequency SeaSonde radar system. wavelength derived using speed light radar's center frequency.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Radar Wavelength — seasonder_getRadarWaveLength","text":"","code":"seasonder_getRadarWaveLength(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Radar Wavelength — seasonder_getRadarWaveLength","text":"seasonder_cs_obj SeaSondeRCS object containing metadata radar system, including center frequency.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Radar Wavelength — seasonder_getRadarWaveLength","text":"numeric value representing radar wavelength meters (m).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveLength.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Radar Wavelength — seasonder_getRadarWaveLength","text":"radar wavelength (\\(  \\)) calculated using formula: [  = cf ] : \\( c \\) speed light (approximately \\( 3  10^8 \\, m/s \\)), \\( f \\) radar's center frequency Hz, retrieved SeaSondeRCS object. center frequency initially stored MHz converted Hz multiplying \\( 10^6 \\).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Radar Wavelength — seasonder_getRadarWaveLength","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object wavelength <- seasonder_getRadarWaveLength(cs_object) print(wavelength) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Radar Wave Number — seasonder_getRadarWaveNumber","title":"Calculate the Radar Wave Number — seasonder_getRadarWaveNumber","text":"function computes radar wave number (\\( k \\)) SeaSonde radar system based wavelength. wave number represents spatial frequency radar wave.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Radar Wave Number — seasonder_getRadarWaveNumber","text":"","code":"seasonder_getRadarWaveNumber(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Radar Wave Number — seasonder_getRadarWaveNumber","text":"seasonder_cs_obj SeaSondeRCS object containing necessary data compute radar wavelength.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Radar Wave Number — seasonder_getRadarWaveNumber","text":"numeric value representing radar wave number (\\( k \\)) radians per meter (\\( rad/m \\)).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveNumber.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Radar Wave Number — seasonder_getRadarWaveNumber","text":"radar wave number (\\( k \\)) calculated using formula: [ k = 2 ] : \\(  \\) radar wavelength meters, calculated using seasonder_getRadarWaveLength. \\( 2  \\) represents relationship wavelength wave number. wave number essential parameter analyzing radar signals interaction medium measured.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadarWaveNumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Radar Wave Number — seasonder_getRadarWaveNumber","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object wave_number <- seasonder_getRadarWaveNumber(cs_object) print(wave_number) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadialVelocityResolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Radial Velocity Resolution — seasonder_getRadialVelocityResolution","title":"Calculate Radial Velocity Resolution — seasonder_getRadialVelocityResolution","text":"Computes radial velocity resolution SeaSonde radar cross-section (CS) object. measurement indicates smallest change velocity radar can discern different targets scatterers within observation area. calculation based Doppler spectrum resolution radar wave number, providing crucial parameter analyzing radar's capability distinguish velocities.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadialVelocityResolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Radial Velocity Resolution — seasonder_getRadialVelocityResolution","text":"","code":"seasonder_getRadialVelocityResolution(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadialVelocityResolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Radial Velocity Resolution — seasonder_getRadialVelocityResolution","text":"seasonder_cs_obj SeaSondeRCS object created using seasonder_createSeaSondeRCS. object contains necessary data calculate Doppler spectrum resolution , subsequently, radial velocity resolution.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadialVelocityResolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Radial Velocity Resolution — seasonder_getRadialVelocityResolution","text":"single numeric value representing radial velocity resolution meters per second (m/s), indicating radar's ability differentiate closely spaced velocities.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getRadialVelocityResolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Radial Velocity Resolution — seasonder_getRadialVelocityResolution","text":"radial velocity resolution (\\(v_res\\)) determined using formula: [ v_res = SpectraRes2  k_0 ] \\(v_res\\) radial velocity resolution, \\(SpectraRes\\) Doppler spectrum resolution, \\(k_0\\) radar wave number divided \\(2\\). formula reflects relationship frequency resolution radar's Doppler spectrum corresponding velocity resolution, taking account wave number fundamental characteristic radar system.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getReceiverGain_dB.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Receiver Gain in Decibels — seasonder_getReceiverGain_dB","title":"Retrieve Receiver Gain in Decibels — seasonder_getReceiverGain_dB","text":"function retrieves receiver gain value (decibels) header given SeaSondeRCS object. receiver gain field missing NULL, default value -34.2 dB returned.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getReceiverGain_dB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Receiver Gain in Decibels — seasonder_getReceiverGain_dB","text":"","code":"seasonder_getReceiverGain_dB(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getReceiverGain_dB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Receiver Gain in Decibels — seasonder_getReceiverGain_dB","text":"seasonder_cs_obj SeaSondeRCS object containing header information radar system.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getReceiverGain_dB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Receiver Gain in Decibels — seasonder_getReceiverGain_dB","text":"numeric value representing receiver gain decibels (dB).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getReceiverGain_dB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Receiver Gain in Decibels — seasonder_getReceiverGain_dB","text":"function extracts value header field fReferenceGainDB using seasonder_getSeaSondeRCS_headerField. field present NULL value, function defaults receiver gain -34.2 dB (CODAR, 2016).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getReceiverGain_dB.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve Receiver Gain in Decibels — seasonder_getReceiverGain_dB","text":"Cross Spectra File Format Version 6, CODAR. (2016).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getReceiverGain_dB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Receiver Gain in Decibels — seasonder_getReceiverGain_dB","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object receiver_gain <- seasonder_getReceiverGain_dB(cs_object) print(receiver_gain) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_AmplitudeFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for AmplitudeFactors — seasonder_getSeaSondeRAPM_AmplitudeFactors","title":"Getter for AmplitudeFactors — seasonder_getSeaSondeRAPM_AmplitudeFactors","text":"Getter AmplitudeFactors","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_AmplitudeFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for AmplitudeFactors — seasonder_getSeaSondeRAPM_AmplitudeFactors","text":"","code":"seasonder_getSeaSondeRAPM_AmplitudeFactors(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_AmplitudeFactors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for AmplitudeFactors — seasonder_getSeaSondeRAPM_AmplitudeFactors","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_AntennaBearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for AntennaBearing — seasonder_getSeaSondeRAPM_AntennaBearing","title":"Getter for AntennaBearing — seasonder_getSeaSondeRAPM_AntennaBearing","text":"Getter AntennaBearing","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_AntennaBearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for AntennaBearing — seasonder_getSeaSondeRAPM_AntennaBearing","text":"","code":"seasonder_getSeaSondeRAPM_AntennaBearing(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_AntennaBearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for AntennaBearing — seasonder_getSeaSondeRAPM_AntennaBearing","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_BEAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for BEAR — seasonder_getSeaSondeRAPM_BEAR","title":"Getter for BEAR — seasonder_getSeaSondeRAPM_BEAR","text":"Getter BEAR","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_BEAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for BEAR — seasonder_getSeaSondeRAPM_BEAR","text":"","code":"seasonder_getSeaSondeRAPM_BEAR(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_BEAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for BEAR — seasonder_getSeaSondeRAPM_BEAR","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_BearingResolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for BearingResolution — seasonder_getSeaSondeRAPM_BearingResolution","title":"Getter for BearingResolution — seasonder_getSeaSondeRAPM_BearingResolution","text":"Getter BearingResolution","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_BearingResolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for BearingResolution — seasonder_getSeaSondeRAPM_BearingResolution","text":"","code":"seasonder_getSeaSondeRAPM_BearingResolution(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_BearingResolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for BearingResolution — seasonder_getSeaSondeRAPM_BearingResolution","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_CommentLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for CommentLine — seasonder_getSeaSondeRAPM_CommentLine","title":"Getter for CommentLine — seasonder_getSeaSondeRAPM_CommentLine","text":"Getter CommentLine","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_CommentLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for CommentLine — seasonder_getSeaSondeRAPM_CommentLine","text":"","code":"seasonder_getSeaSondeRAPM_CommentLine(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_CommentLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for CommentLine — seasonder_getSeaSondeRAPM_CommentLine","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_CreateTimeStamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for CreateTimeStamp — seasonder_getSeaSondeRAPM_CreateTimeStamp","title":"Getter for CreateTimeStamp — seasonder_getSeaSondeRAPM_CreateTimeStamp","text":"Getter CreateTimeStamp","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_CreateTimeStamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for CreateTimeStamp — seasonder_getSeaSondeRAPM_CreateTimeStamp","text":"","code":"seasonder_getSeaSondeRAPM_CreateTimeStamp(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_CreateTimeStamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for CreateTimeStamp — seasonder_getSeaSondeRAPM_CreateTimeStamp","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Creator.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for Creator — seasonder_getSeaSondeRAPM_Creator","title":"Getter for Creator — seasonder_getSeaSondeRAPM_Creator","text":"Getter Creator","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Creator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for Creator — seasonder_getSeaSondeRAPM_Creator","text":"","code":"seasonder_getSeaSondeRAPM_Creator(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Creator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for Creator — seasonder_getSeaSondeRAPM_Creator","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_FileID.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for FileID — seasonder_getSeaSondeRAPM_FileID","title":"Getter for FileID — seasonder_getSeaSondeRAPM_FileID","text":"Getter FileID","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_FileID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for FileID — seasonder_getSeaSondeRAPM_FileID","text":"","code":"seasonder_getSeaSondeRAPM_FileID(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_FileID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for FileID — seasonder_getSeaSondeRAPM_FileID","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_FileName.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for FileName — seasonder_getSeaSondeRAPM_FileName","title":"Getter for FileName — seasonder_getSeaSondeRAPM_FileName","text":"Getter FileName","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_FileName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for FileName — seasonder_getSeaSondeRAPM_FileName","text":"","code":"seasonder_getSeaSondeRAPM_FileName(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_FileName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for FileName — seasonder_getSeaSondeRAPM_FileName","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_PhaseCorrections.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for PhaseCorrections — seasonder_getSeaSondeRAPM_PhaseCorrections","title":"Getter for PhaseCorrections — seasonder_getSeaSondeRAPM_PhaseCorrections","text":"Getter PhaseCorrections","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_PhaseCorrections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for PhaseCorrections — seasonder_getSeaSondeRAPM_PhaseCorrections","text":"","code":"seasonder_getSeaSondeRAPM_PhaseCorrections(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_PhaseCorrections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for PhaseCorrections — seasonder_getSeaSondeRAPM_PhaseCorrections","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_ProcessingSteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for ProcessingSteps — seasonder_getSeaSondeRAPM_ProcessingSteps","title":"Getter for ProcessingSteps — seasonder_getSeaSondeRAPM_ProcessingSteps","text":"Getter ProcessingSteps","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_ProcessingSteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for ProcessingSteps — seasonder_getSeaSondeRAPM_ProcessingSteps","text":"","code":"seasonder_getSeaSondeRAPM_ProcessingSteps(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_ProcessingSteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for ProcessingSteps — seasonder_getSeaSondeRAPM_ProcessingSteps","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_SiteName.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for SiteName — seasonder_getSeaSondeRAPM_SiteName","title":"Getter for SiteName — seasonder_getSeaSondeRAPM_SiteName","text":"Getter SiteName","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_SiteName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for SiteName — seasonder_getSeaSondeRAPM_SiteName","text":"","code":"seasonder_getSeaSondeRAPM_SiteName(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_SiteName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for SiteName — seasonder_getSeaSondeRAPM_SiteName","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_SiteOrigin.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for SiteOrigin — seasonder_getSeaSondeRAPM_SiteOrigin","title":"Getter for SiteOrigin — seasonder_getSeaSondeRAPM_SiteOrigin","text":"Getter SiteOrigin","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_SiteOrigin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for SiteOrigin — seasonder_getSeaSondeRAPM_SiteOrigin","text":"","code":"seasonder_getSeaSondeRAPM_SiteOrigin(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_SiteOrigin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for SiteOrigin — seasonder_getSeaSondeRAPM_SiteOrigin","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for Smoothing — seasonder_getSeaSondeRAPM_Smoothing","title":"Getter for Smoothing — seasonder_getSeaSondeRAPM_Smoothing","text":"Getter Smoothing","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for Smoothing — seasonder_getSeaSondeRAPM_Smoothing","text":"","code":"seasonder_getSeaSondeRAPM_Smoothing(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for Smoothing — seasonder_getSeaSondeRAPM_Smoothing","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_StationCode.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for StationCode — seasonder_getSeaSondeRAPM_StationCode","title":"Getter for StationCode — seasonder_getSeaSondeRAPM_StationCode","text":"Getter StationCode","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_StationCode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for StationCode — seasonder_getSeaSondeRAPM_StationCode","text":"","code":"seasonder_getSeaSondeRAPM_StationCode(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_StationCode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for StationCode — seasonder_getSeaSondeRAPM_StationCode","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Type.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for Type — seasonder_getSeaSondeRAPM_Type","title":"Getter for Type — seasonder_getSeaSondeRAPM_Type","text":"Getter Type","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for Type — seasonder_getSeaSondeRAPM_Type","text":"","code":"seasonder_getSeaSondeRAPM_Type(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_Type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for Type — seasonder_getSeaSondeRAPM_Type","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_quality_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for quality_matrix — seasonder_getSeaSondeRAPM_quality_matrix","title":"Getter for quality_matrix — seasonder_getSeaSondeRAPM_quality_matrix","text":"Getter quality_matrix","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_quality_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for quality_matrix — seasonder_getSeaSondeRAPM_quality_matrix","text":"","code":"seasonder_getSeaSondeRAPM_quality_matrix(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRAPM_quality_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for quality_matrix — seasonder_getSeaSondeRAPM_quality_matrix","text":"seasonde_apm_obj SeaSonderAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_SS_Smoothed.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Smoothed Self-Spectra for First Order Region (FOR) — seasonder_getSeaSondeRCS_FOR_SS_Smoothed","title":"Retrieve Smoothed Self-Spectra for First Order Region (FOR) — seasonder_getSeaSondeRCS_FOR_SS_Smoothed","text":"function retrieves smoothed self-spectra (SS) matrix stored FOR_data attribute SeaSondeRCS object. smoothed self-spectra used First Order Region () processing refine detection first-order boundaries.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_SS_Smoothed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Smoothed Self-Spectra for First Order Region (FOR) — seasonder_getSeaSondeRCS_FOR_SS_Smoothed","text":"","code":"seasonder_getSeaSondeRCS_FOR_SS_Smoothed(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_SS_Smoothed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Smoothed Self-Spectra for First Order Region (FOR) — seasonder_getSeaSondeRCS_FOR_SS_Smoothed","text":"seasonder_cs_obj SeaSondeRCS object containing smoothed self-spectra data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_SS_Smoothed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Smoothed Self-Spectra for First Order Region (FOR) — seasonder_getSeaSondeRCS_FOR_SS_Smoothed","text":"matrix representing smoothed self-spectra, NULL smoothed data stored.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_SS_Smoothed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Smoothed Self-Spectra for First Order Region (FOR) — seasonder_getSeaSondeRCS_FOR_SS_Smoothed","text":"function extracts matrix assigned seasonder_setSeaSondeRCS_FOR_SS_Smoothed. smoothed self-spectra found, function returns NULL. smoothed self-spectra typically generated using seasonder_SmoothSS applied self-spectra antenna 3. smoothing aids detecting nulls separate first- second-order regions.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_SS_Smoothed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Smoothed Self-Spectra for First Order Region (FOR) — seasonder_getSeaSondeRCS_FOR_SS_Smoothed","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve smoothed FOR self-spectra smoothed_SS <- seasonder_getSeaSondeRCS_FOR_SS_Smoothed(cs_obj) print(smoothed_SS) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve First Order Region (FOR) Parameters — seasonder_getSeaSondeRCS_FOR_parameters","title":"Retrieve First Order Region (FOR) Parameters — seasonder_getSeaSondeRCS_FOR_parameters","text":"function retrieves First Order Region () parameters associated SeaSondeR cross-spectral object. parameters found object's attributes, initializes using seasonder_validateFOR_parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve First Order Region (FOR) Parameters — seasonder_getSeaSondeRCS_FOR_parameters","text":"","code":"seasonder_getSeaSondeRCS_FOR_parameters(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve First Order Region (FOR) Parameters — seasonder_getSeaSondeRCS_FOR_parameters","text":"seasonder_cs_obj SeaSondeRCS object containing -related metadata.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve First Order Region (FOR) Parameters — seasonder_getSeaSondeRCS_FOR_parameters","text":"named list containing validated parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve First Order Region (FOR) Parameters — seasonder_getSeaSondeRCS_FOR_parameters","text":"function extracts parameters stored within object. parameters missing, function initializes using seasonder_validateFOR_parameters assigns default values necessary. Parameters: nsm: Doppler smoothing factor. fdown: Peak power dropoff threshold. flim: Null peak power threshold. noisefact: Signal--noise threshold. currmax: Maximum velocity allowed. reject_distant_bragg: Flag reject distant Bragg signals. reject_noise_ionospheric: Flag reject ionospheric noise contamination. reject_noise_ionospheric_threshold: Threshold (dB) rejecting noise-affected Bragg signals. reference_noise_normalized_limits: Estimated limits reference noise normalized Doppler frequency.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_FOR_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve First Order Region (FOR) Parameters — seasonder_getSeaSondeRCS_FOR_parameters","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve FOR parameters for a SeaSondeRCS object for_params <- seasonder_getSeaSondeRCS_FOR_parameters(cs_obj) print(for_params) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Radial Velocities for MUSIC Doppler Bins — seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity","title":"Retrieve Radial Velocities for MUSIC Doppler Bins — seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity","text":"function calculates radial velocities MUSIC Doppler bins based given SeaSonde cross-spectral object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Radial Velocities for MUSIC Doppler Bins — seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity","text":"","code":"seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Radial Velocities for MUSIC Doppler Bins — seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity","text":"seasonder_cs_obj SeaSondeRCS object representing cross-spectral data structure. contains necessary metadata Doppler frequency information.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Radial Velocities for MUSIC Doppler Bins — seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity","text":"numeric vector containing radial velocities corresponding MUSIC Doppler bin.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Radial Velocities for MUSIC Doppler Bins — seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity","text":"function uses following process: retrieves Doppler bin frequencies using seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency. computes radial velocities associated bins using seasonder_computeBinsRadialVelocity. computed velocities returned numeric vector, can used subsequent analyses visualizations.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Radial Velocities for MUSIC Doppler Bins — seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `seasonder_cs_obj` is a valid SeaSondeRCS object radial_velocities <- seasonder_getSeaSondeRCS_MUSIC_BinsRadialVelocity(seasonder_cs_obj) print(radial_velocities) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the Center Doppler Bin for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin","title":"Retrieve the Center Doppler Bin for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin","text":"function calculates center Doppler bin SeaSondeRCS object. center bin corresponds Doppler bin representing zero frequency, computation accounts adjustments MUSIC Doppler interpolation.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the Center Doppler Bin for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin","text":"","code":"seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the Center Doppler Bin for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin","text":"seasonder_cs_object SeaSondeRCS object containing data parameters MUSIC analysis.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the Center Doppler Bin for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin","text":"integer representing center Doppler bin.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the Center Doppler Bin for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin","text":"function performs following steps: Retrieves total number Doppler cells, including adjustments MUSIC interpolation, using seasonder_getSeaSondeRCS_MUSIC_nDopplerCells. Computes center Doppler bin using seasonder_computeCenterDopplerBin, determines bin corresponding zero frequency. center Doppler bin key parameter organizing Doppler frequency data around zero critical spectral analysis.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the Center Doppler Bin for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object center_bin <- seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin(cs_object) print(center_bin) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Doppler Bins Frequencies for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency","title":"Calculate Doppler Bins Frequencies for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency","text":"function computes Doppler bin frequencies given SeaSondeRCS object, incorporating adjustments MUSIC analysis. computation accounts Doppler interpolation spectrum resolution.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Doppler Bins Frequencies for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency","text":"","code":"seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency(   seasonder_cs_obj,   normalized = FALSE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Doppler Bins Frequencies for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency","text":"seasonder_cs_obj SeaSondeRCS object containing data parameters MUSIC analysis. normalized Logical. TRUE, returned frequencies normalized positive Bragg frequency. Default FALSE, returning frequencies Hz.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Doppler Bins Frequencies for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency","text":"numeric vector representing frequency values Doppler bin. normalized = TRUE, values dimensionless, relative positive Bragg frequency. Otherwise, Hz.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Doppler Bins Frequencies for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency","text":"function performs following steps: Retrieves central Doppler bin corresponding 0 frequency using seasonder_getSeaSondeRCS_MUSIC_CenterDopplerBin. Retrieves total number Doppler cells (adjusted interpolation) using seasonder_getSeaSondeRCS_MUSIC_nDopplerCells. Retrieves Doppler spectrum resolution using seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution. Computes Doppler bin frequencies using seasonder_computeDopplerBinsFrequency. resulting Doppler bins frequencies crucial analyzing spectral properties MUSIC output.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Doppler Bins Frequencies for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object doppler_bins <- seasonder_getSeaSondeRCS_MUSIC_DopplerBinsFrequency(cs_object, normalized = FALSE) print(doppler_bins) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the Adjusted Doppler Spectrum Resolution for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution","title":"Retrieve the Adjusted Doppler Spectrum Resolution for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution","text":"function calculates Doppler spectrum resolution adjusted Doppler interpolation factor given SeaSondeRCS object. adjustment ensures spectrum resolution reflects impact interpolation applied MUSIC analysis.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the Adjusted Doppler Spectrum Resolution for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution","text":"","code":"seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the Adjusted Doppler Spectrum Resolution for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution","text":"seasonder_cs_object SeaSondeRCS object containing data parameters MUSIC analysis.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the Adjusted Doppler Spectrum Resolution for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution","text":"numeric value representing adjusted Doppler spectrum resolution.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the Adjusted Doppler Spectrum Resolution for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution","text":"function performs following steps: Retrieves base Doppler spectrum resolution using seasonder_getDopplerSpectrumResolution. Obtains Doppler interpolation factor using seasonder_getSeaSondeRCS_MUSIC_doppler_interpolation. Divides base resolution interpolation factor compute adjusted resolution. adjustment critical accurately interpreting MUSIC data cases Doppler interpolation applied.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the Adjusted Doppler Spectrum Resolution for MUSIC Analysis — seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object spectrum_resolution <- seasonder_getSeaSondeRCS_MUSIC_DopplerSpectrumResolution(cs_object) print(spectrum_resolution) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_nDopplerCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the Interpolated Number of Doppler Cells for MUSIC — seasonder_getSeaSondeRCS_MUSIC_nDopplerCells","title":"Retrieve the Interpolated Number of Doppler Cells for MUSIC — seasonder_getSeaSondeRCS_MUSIC_nDopplerCells","text":"function calculates interpolated number Doppler cells MUSIC data given SeaSondeRCS object. applies Doppler interpolation factor original number Doppler cells.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_nDopplerCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the Interpolated Number of Doppler Cells for MUSIC — seasonder_getSeaSondeRCS_MUSIC_nDopplerCells","text":"","code":"seasonder_getSeaSondeRCS_MUSIC_nDopplerCells(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_nDopplerCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the Interpolated Number of Doppler Cells for MUSIC — seasonder_getSeaSondeRCS_MUSIC_nDopplerCells","text":"seasonder_cs_object SeaSondeRCS object containing metadata configurations related MUSIC data processing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_nDopplerCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the Interpolated Number of Doppler Cells for MUSIC — seasonder_getSeaSondeRCS_MUSIC_nDopplerCells","text":"integer representing number Doppler cells adjusted Doppler interpolation factor.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_nDopplerCells.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the Interpolated Number of Doppler Cells for MUSIC — seasonder_getSeaSondeRCS_MUSIC_nDopplerCells","text":"function performs following steps: Retrieves total number Doppler cells using seasonder_getnDopplerCells. Retrieves Doppler interpolation factor using seasonder_getSeaSondeRCS_MUSIC_doppler_interpolation. Multiplies number Doppler cells interpolation factor compute interpolated number Doppler cells.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_MUSIC_nDopplerCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the Interpolated Number of Doppler Cells for MUSIC — seasonder_getSeaSondeRCS_MUSIC_nDopplerCells","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid `SeaSondeRCS` object with MUSIC data n_doppler_cells <- seasonder_getSeaSondeRCS_MUSIC_nDopplerCells(cs_object) print(n_doppler_cells) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_ProcessingSteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for ProcessingSteps — seasonder_getSeaSondeRCS_ProcessingSteps","title":"Getter for ProcessingSteps — seasonder_getSeaSondeRCS_ProcessingSteps","text":"Getter ProcessingSteps","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_ProcessingSteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for ProcessingSteps — seasonder_getSeaSondeRCS_ProcessingSteps","text":"","code":"seasonder_getSeaSondeRCS_ProcessingSteps(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_ProcessingSteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for ProcessingSteps — seasonder_getSeaSondeRCS_ProcessingSteps","text":"seasonder_cs_obj SeaSonderCS object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_SelfSpectra.html","id":null,"dir":"Reference","previous_headings":"","what":"returns a list of power spectra for each combination of antenna, dist_range and doppler_range — seasonder_getSeaSondeRCS_SelfSpectra","title":"returns a list of power spectra for each combination of antenna, dist_range and doppler_range — seasonder_getSeaSondeRCS_SelfSpectra","text":"returns list power spectra combination antenna, dist_range doppler_range","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_SelfSpectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"returns a list of power spectra for each combination of antenna, dist_range and doppler_range — seasonder_getSeaSondeRCS_SelfSpectra","text":"","code":"seasonder_getSeaSondeRCS_SelfSpectra(   seasonder_cs_obj,   antennae,   dist_ranges = NULL,   doppler_ranges = NULL,   dist_in_km = FALSE,   collapse = FALSE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_antenna_SSdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Self-Spectra Data for a Specific Antenna from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_antenna_SSdata","title":"Retrieve Self-Spectra Data for a Specific Antenna from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_antenna_SSdata","text":"function extracts self-spectra (SSA) data matrix given antenna SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_antenna_SSdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Self-Spectra Data for a Specific Antenna from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_antenna_SSdata","text":"","code":"seasonder_getSeaSondeRCS_antenna_SSdata(seasonder_cs_obj, antenna)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_antenna_SSdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Self-Spectra Data for a Specific Antenna from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_antenna_SSdata","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data. antenna integer specifying antenna number (1, 2, 3).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_antenna_SSdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Self-Spectra Data for a Specific Antenna from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_antenna_SSdata","text":"matrix containing self-spectra data specified antenna. antenna number invalid, error thrown.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_antenna_SSdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Self-Spectra Data for a Specific Antenna from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_antenna_SSdata","text":"function constructs matrix name dynamically appending antenna number prefix \"SSA\" (e.g., \"SSA1\", \"SSA2\", \"SSA3\"). retrieves corresponding matrix SeaSondeRCS data using seasonder_getSeaSondeRCS_dataMatrix.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_antenna_SSdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Self-Spectra Data for a Specific Antenna from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_antenna_SSdata","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid SeaSondeRCS object ssa1_data <- seasonder_getSeaSondeRCS_antenna_SSdata(cs_object, 1) print(ssa1_data) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for data — seasonder_getSeaSondeRCS_data","title":"Getter for data — seasonder_getSeaSondeRCS_data","text":"Getter data","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for data — seasonder_getSeaSondeRCS_data","text":"","code":"seasonder_getSeaSondeRCS_data(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for data — seasonder_getSeaSondeRCS_data","text":"seasonder_cs_obj SeaSondeRCS object","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_dataMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a Specific Data Matrix from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_dataMatrix","title":"Retrieve a Specific Data Matrix from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_dataMatrix","text":"function extracts specific data matrix SeaSondeRCS object. available matrices correspond self-spectra cross-spectra components used SeaSonde radar processing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_dataMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a Specific Data Matrix from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_dataMatrix","text":"","code":"seasonder_getSeaSondeRCS_dataMatrix(seasonder_cs_obj, matrix_name)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_dataMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a Specific Data Matrix from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_dataMatrix","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data. matrix_name string specifying name matrix retrieve. Must one : \"SSA1\": Self-spectra antenna 1. \"SSA2\": Self-spectra antenna 2. \"SSA3\": Self-spectra antenna 3. \"CS12\": Cross-spectra antennas 1 2. \"CS13\": Cross-spectra antennas 1 3. \"CS23\": Cross-spectra antennas 2 3. \"QC\": Quality control matrix.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_dataMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a Specific Data Matrix from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_dataMatrix","text":"matrix containing requested spectral data. matrix name invalid, error thrown.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_dataMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve a Specific Data Matrix from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_dataMatrix","text":"function first verifies provided matrix_name valid. name list accepted values, logs error aborts execution using seasonder_logAndAbort. validated, function extracts requested matrix data component SeaSondeRCS object.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_dataMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a Specific Data Matrix from a SeaSondeRCS Object — seasonder_getSeaSondeRCS_dataMatrix","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid SeaSondeRCS object ssa1_matrix <- seasonder_getSeaSondeRCS_dataMatrix(cs_object, \"SSA1\") print(ssa1_matrix) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for header — seasonder_getSeaSondeRCS_header","title":"Getter for header — seasonder_getSeaSondeRCS_header","text":"Getter header","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for header — seasonder_getSeaSondeRCS_header","text":"","code":"seasonder_getSeaSondeRCS_header(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for header — seasonder_getSeaSondeRCS_header","text":"seasonder_cs_obj SeaSondeRCS object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_headerField.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a Specific Field from a SeaSondeRCS Header — seasonder_getSeaSondeRCS_headerField","title":"Retrieve a Specific Field from a SeaSondeRCS Header — seasonder_getSeaSondeRCS_headerField","text":"function extracts specific field header SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_headerField.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a Specific Field from a SeaSondeRCS Header — seasonder_getSeaSondeRCS_headerField","text":"","code":"seasonder_getSeaSondeRCS_headerField(seasonder_cs_obj, field)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_headerField.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a Specific Field from a SeaSondeRCS Header — seasonder_getSeaSondeRCS_headerField","text":"seasonder_cs_obj SeaSondeRCS object. field string specifying field name retrieve header.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_headerField.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a Specific Field from a SeaSondeRCS Header — seasonder_getSeaSondeRCS_headerField","text":"value specified field header. field found, NULL returned.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_headerField.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve a Specific Field from a SeaSondeRCS Header — seasonder_getSeaSondeRCS_headerField","text":"function first retrieves full header using seasonder_getSeaSondeRCS_header attempts extract requested field using pluck. header flattened extraction accommodate nested structures.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getSeaSondeRCS_headerField.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a Specific Field from a SeaSondeRCS Header — seasonder_getSeaSondeRCS_headerField","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid SeaSondeRCS object field_value <- seasonder_getSeaSondeRCS_headerField(cs_object, \"nDopplerCells\") print(field_value) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.SeaSondeRAPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the version value from a SeaSondeRAPM object — seasonder_getVersion.SeaSondeRAPM","title":"Get the version value from a SeaSondeRAPM object — seasonder_getVersion.SeaSondeRAPM","text":"Get version value SeaSondeRAPM object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.SeaSondeRAPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the version value from a SeaSondeRAPM object — seasonder_getVersion.SeaSondeRAPM","text":"","code":"# S3 method for class 'SeaSondeRAPM' seasonder_getVersion(seasonder_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.SeaSondeRAPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the version value from a SeaSondeRAPM object — seasonder_getVersion.SeaSondeRAPM","text":"seasonder_obj SeaSondeRAPM object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.SeaSondeRAPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the version value from a SeaSondeRAPM object — seasonder_getVersion.SeaSondeRAPM","text":"version value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.SeaSondeRCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the version value from a SeaSondeRCS object — seasonder_getVersion.SeaSondeRCS","title":"Get the version value from a SeaSondeRCS object — seasonder_getVersion.SeaSondeRCS","text":"Get version value SeaSondeRCS object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.SeaSondeRCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the version value from a SeaSondeRCS object — seasonder_getVersion.SeaSondeRCS","text":"","code":"# S3 method for class 'SeaSondeRCS' seasonder_getVersion(seasonder_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.SeaSondeRCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the version value from a SeaSondeRCS object — seasonder_getVersion.SeaSondeRCS","text":"seasonder_obj SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.SeaSondeRCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the version value from a SeaSondeRCS object — seasonder_getVersion.SeaSondeRCS","text":"version value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the version value from a SeaSondeR object — seasonder_getVersion","title":"Get the version value from a SeaSondeR object — seasonder_getVersion","text":"Get version value SeaSondeR object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the version value from a SeaSondeR object — seasonder_getVersion","text":"","code":"seasonder_getVersion(seasonder_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the version value from a SeaSondeR object — seasonder_getVersion","text":"seasonder_obj SeaSondeR object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the version value from a SeaSondeR object — seasonder_getVersion","text":"version value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getnDopplerCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the nDopplerCells value from a SeaSondeRCS object — seasonder_getnDopplerCells","title":"Get the nDopplerCells value from a SeaSondeRCS object — seasonder_getnDopplerCells","text":"Get nDopplerCells value SeaSondeRCS object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getnDopplerCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the nDopplerCells value from a SeaSondeRCS object — seasonder_getnDopplerCells","text":"","code":"seasonder_getnDopplerCells(seasonder_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getnDopplerCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the nDopplerCells value from a SeaSondeRCS object — seasonder_getnDopplerCells","text":"seasonder_obj SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getnDopplerCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the nDopplerCells value from a SeaSondeRCS object — seasonder_getnDopplerCells","text":"nDopplerCells value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getnRangeCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the nRangeCells value from a SeaSondeRCS object — seasonder_getnRangeCells","title":"Get the nRangeCells value from a SeaSondeRCS object — seasonder_getnRangeCells","text":"Get nRangeCells value SeaSondeRCS object","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getnRangeCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the nRangeCells value from a SeaSondeRCS object — seasonder_getnRangeCells","text":"","code":"seasonder_getnRangeCells(seasonder_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getnRangeCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the nRangeCells value from a SeaSondeRCS object — seasonder_getnRangeCells","text":"seasonder_obj SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_getnRangeCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the nRangeCells value from a SeaSondeRCS object — seasonder_getnRangeCells","text":"nRangeCells value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initCSDataStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Cross-Spectra Data Structure for SeaSondeR — seasonder_initCSDataStructure","title":"Initialize Cross-Spectra Data Structure for SeaSondeR — seasonder_initCSDataStructure","text":"function initializes data structure storing cross-spectra data related SeaSonde radar measurements. creates list matrices, corresponding different components SeaSonde data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initCSDataStructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Cross-Spectra Data Structure for SeaSondeR — seasonder_initCSDataStructure","text":"","code":"seasonder_initCSDataStructure(nRanges, nDoppler)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initCSDataStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Cross-Spectra Data Structure for SeaSondeR — seasonder_initCSDataStructure","text":"nRanges Integer, number range cells radar measurement. Specifies number rows matrix. nDoppler Integer, number Doppler bins radar measurement. Specifies number columns matrix.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initCSDataStructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Cross-Spectra Data Structure for SeaSondeR — seasonder_initCSDataStructure","text":"list containing matrices different cross-spectra components: SSA1: Matrix SSA1 component, filled NA_real_. SSA2: Matrix SSA2 component, filled NA_real_. SSA3: Matrix SSA3 component, filled NA_real_. CS12: Matrix CS12 component, complex numbers NA_real_ real imaginary parts. CS13: Matrix CS13 component, complex numbers NA_real_ real imaginary parts. CS23: Matrix CS23 component, complex numbers NA_real_ real imaginary parts. QC: Quality control matrix, filled NA_real_.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initMUSICData.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize MUSIC Data for SeaSondeR — seasonder_initMUSICData","title":"Initialize MUSIC Data for SeaSondeR — seasonder_initMUSICData","text":"function initializes MUSIC data structure SeaSondeR cross-spectral object, including optional interpolation, parameter setup, pre-computed placeholders MUSIC analysis.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initMUSICData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize MUSIC Data for SeaSondeR — seasonder_initMUSICData","text":"","code":"seasonder_initMUSICData(   seasonder_cs_object,   range_cells = NULL,   doppler_bins = NULL,   NULL_MUSIC = FALSE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initMUSICData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize MUSIC Data for SeaSondeR — seasonder_initMUSICData","text":"seasonder_cs_object SeaSondeR cross-spectral object containing metadata radar system. range_cells optional vector specifying range cells include. Defaults range cells object. doppler_bins optional vector specifying Doppler bins include. Defaults Doppler bins object. NULL_MUSIC Logical. TRUE, initializes MUSIC structure NULL placeholder (see seasonder_NULLSeaSondeRCS_MUSIC). Defaults FALSE.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initMUSICData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize MUSIC Data for SeaSondeR — seasonder_initMUSICData","text":"updated SeaSondeR cross-spectral object initialized MUSIC-related attributes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initMUSICData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize MUSIC Data for SeaSondeR — seasonder_initMUSICData","text":"function performs following steps: Ensures SeaSondeR object valid interpolation parameter settings MUSIC analysis. Initializes MUSIC data structure. NULL_MUSIC FALSE, structure populated range cell Doppler bin combinations. Computes proportion dual solutions MUSIC using seasonder_MUSICComputePropDualSols. Initializes interpolated data cross-spectral analysis using seasonder_MUSICInitInterpolatedData. final object ready MUSIC analysis steps, computing Direction Arrival (DOA).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initMUSICData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize MUSIC Data for SeaSondeR — seasonder_initMUSICData","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize MUSIC data for all range cells and Doppler bins cs_object <- seasonder_createSeaSondeRCS(...) cs_object <- seasonder_initMUSICData(cs_object)  # Initialize MUSIC data for specific range cells and Doppler bins cs_object <- seasonder_initMUSICData(cs_object, range_cells = c(1, 2), doppler_bins = c(5, 10)) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initSeaSondeRCS_MUSIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize SeaSondeR MUSIC Data Structure — seasonder_initSeaSondeRCS_MUSIC","title":"Initialize SeaSondeR MUSIC Data Structure — seasonder_initSeaSondeRCS_MUSIC","text":"function initializes data structure storing MUSIC analysis results given SeaSondeR cross-spectral object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initSeaSondeRCS_MUSIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize SeaSondeR MUSIC Data Structure — seasonder_initSeaSondeRCS_MUSIC","text":"","code":"seasonder_initSeaSondeRCS_MUSIC(   seasonder_cs_object,   range_cells = NULL,   doppler_bins = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initSeaSondeRCS_MUSIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize SeaSondeR MUSIC Data Structure — seasonder_initSeaSondeRCS_MUSIC","text":"seasonder_cs_object SeaSondeR cross-spectral object containing metadata radar system. range_cells optional vector specifying range cells include. Defaults range cells object. doppler_bins optional vector specifying Doppler bins include. Defaults Doppler bins object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initSeaSondeRCS_MUSIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize SeaSondeR MUSIC Data Structure — seasonder_initSeaSondeRCS_MUSIC","text":"tibble initialized MUSIC analysis data specified range cells Doppler bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initSeaSondeRCS_MUSIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize SeaSondeR MUSIC Data Structure — seasonder_initSeaSondeRCS_MUSIC","text":"function creates tibble pre-computed range, frequency, radial velocity values specified range cells Doppler bins. also initializes placeholders MUSIC-related parameters covariance matrices, eigen decompositions, projections, DOA solutions, . Columns resulting tibble include: range_cell: Range cell indices. doppler_bin: Doppler bin indices. range: Computed range values specified range cells. freq: Computed frequency values specified Doppler bins. radial_v: Computed radial velocities specified Doppler bins. cov: Initialized covariance matrices (see seasonder_MUSICInitCov). eigen: Initialized eigen decompositions (see seasonder_MUSICInitEigenDecomp). projections: Initialized projection matrices (see seasonder_MUSICInitProjections). DOA_solutions: Initialized DOA solutions (see seasonder_MUSICInitDOASolutions). eigen_values_ratio: Placeholder ratio eigenvalues. P1_check: Logical placeholder P1 criterion (default TRUE). retained_solution: Placeholder type retained solution (\"dual\" default). DOA: Placeholder final DOA results. lonlat: Placeholder longitude latitude data data frame.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initSeaSondeRCS_MUSIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize SeaSondeR MUSIC Data Structure — seasonder_initSeaSondeRCS_MUSIC","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize MUSIC data structure for all range cells and Doppler bins music_data <- seasonder_initSeaSondeRCS_MUSIC(seasonder_cs_object)  # Initialize for specific range cells and Doppler bins music_data <- seasonder_initSeaSondeRCS_MUSIC(seasonder_cs_object, range_cells = c(1, 2), doppler_bins = c(5, 10)) print(music_data) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initializeAttributesSeaSondeRAPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Attributes for a SeaSondeRAPM Object — seasonder_initializeAttributesSeaSondeRAPM","title":"Initialize Attributes for a SeaSondeRAPM Object — seasonder_initializeAttributesSeaSondeRAPM","text":"function initializes attributes SeaSondeRAPM object, including metadata properties.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initializeAttributesSeaSondeRAPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Attributes for a SeaSondeRAPM Object — seasonder_initializeAttributesSeaSondeRAPM","text":"","code":"seasonder_initializeAttributesSeaSondeRAPM(calibration_matrix, ...)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initializeAttributesSeaSondeRAPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Attributes for a SeaSondeRAPM Object — seasonder_initializeAttributesSeaSondeRAPM","text":"calibration_matrix 2 x b complex matrix, b number bearings calibration. ... Additional named attributes may override defaults.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initializeAttributesSeaSondeRAPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Attributes for a SeaSondeRAPM Object — seasonder_initializeAttributesSeaSondeRAPM","text":"list containing initialized attributes SeaSondeRAPM object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_initializeAttributesSeaSondeRAPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Attributes for a SeaSondeRAPM Object — seasonder_initializeAttributesSeaSondeRAPM","text":"function initializes following attributes: quality_matrix: 3 x b complex matrix quality data, b number bearings. BEAR: numeric vector bearings (degrees CCW site bearing). Type: Character string antenna pattern type. Creator: Object creator name. Default empty character vector. SiteName: Site name (SiteCode). Default empty character vector. SiteOrigin: Numeric vector two elements representing Station GPS location. Default c(0,0). FileName: Default empty character vector. CreateTimeStamp: APM file creation time. Default current system date time. ProcessingSteps: Processing steps applied object. Default empty character vector. AmplitudeFactors: Numeric vector two elements amplitude factors. Default c(0,0). AntennaBearing: Site bearing (CW degrees true north). Default empty numeric vector. StationCode: 4-character station code. Default empty character vector. BearingResolution: degrees. Default empty numeric vector. Smoothing: Numeric vector indicating smoothing applied antenna pattern. Default empty numeric vector. CommentLine: Metadata lines data file matching attribute. Default empty character vector. FileID: File's UUID. Default empty character vector. PhaseCorrections: Numeric vector two elements phase corrections. Default c(0,0).","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_int_to_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an integer to raw bytes using a 64-bit representation — seasonder_int_to_raw","title":"Convert an integer to raw bytes using a 64-bit representation — seasonder_int_to_raw","text":"function converts integer raw byte representation using 64-bit (8-byte) format. leverages bit64 package handle 64-bit integer representation conversion.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_int_to_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an integer to raw bytes using a 64-bit representation — seasonder_int_to_raw","text":"","code":"seasonder_int_to_raw(x)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_int_to_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an integer to raw bytes using a 64-bit representation — seasonder_int_to_raw","text":"x integer converted raw bytes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_int_to_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an integer to raw bytes using a 64-bit representation — seasonder_int_to_raw","text":"raw vector representing 64-bit format provided integer.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_int_to_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an integer to raw bytes using a 64-bit representation — seasonder_int_to_raw","text":"function follows steps: Convert integer 64-bit format using bit64::.integer64. Convert 64-bit integer bit string. Split bit string individual bits. Reorder bits groups 8, reversing order within group. Convert reordered bits back raw bytes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_int_to_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an integer to raw bytes using a 64-bit representation — seasonder_int_to_raw","text":"","code":"if (FALSE) { # \\dontrun{ int_val <- 1234567890 raw_val <- seasonder_int_to_raw(int_val) cat(rawToChar(raw_val)) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_lastLog.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the Last Log Entry — seasonder_lastLog","title":"Retrieve the Last Log Entry — seasonder_lastLog","text":"function fetches splits log entries, returns last entry.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_lastLog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the Last Log Entry — seasonder_lastLog","text":"","code":"seasonder_lastLog(...)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_lastLog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the Last Log Entry — seasonder_lastLog","text":"... Arguments passed seasonder_splitLog.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_lastLog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the Last Log Entry — seasonder_lastLog","text":"Returns last log entry splitting log.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_limitFORCurrentRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit First Order Region (FOR) Based on Maximum Radial Velocity — seasonder_limitFORCurrentRange","title":"Limit First Order Region (FOR) Based on Maximum Radial Velocity — seasonder_limitFORCurrentRange","text":"function removes Doppler bins detected First Order Region () corresponding radial velocity exceeds predefined maximum threshold.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_limitFORCurrentRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit First Order Region (FOR) Based on Maximum Radial Velocity — seasonder_limitFORCurrentRange","text":"","code":"seasonder_limitFORCurrentRange(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_limitFORCurrentRange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit First Order Region (FOR) Based on Maximum Radial Velocity — seasonder_limitFORCurrentRange","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_limitFORCurrentRange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit First Order Region (FOR) Based on Maximum Radial Velocity — seasonder_limitFORCurrentRange","text":"updated SeaSondeRCS object bins filtered based maximum velocity.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_limitFORCurrentRange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Limit First Order Region (FOR) Based on Maximum Radial Velocity — seasonder_limitFORCurrentRange","text":"Steps Current Range Limiting: Retrieve Maximum Velocity Threshold: Extracts currmax parameter seasonder_getSeaSondeRCS_FOR_parameters. Obtain Current Detection Results: Retrieves existing Doppler bin indices seasonder_getSeaSondeRCS_FOR. Compute Radial Velocities Doppler Bins: Calls seasonder_getBinsRadialVelocity convert Doppler bins radial velocities. Identify Bins Exceeding Maximum Velocity: Finds Doppler bins absolute radial velocity greater equal currmax. Filter Exceeding Bins: Uses setdiff remove bins exceeding currmax region. Store Updated Data Object: Updates SeaSondeRCS object filtered results. function ensures Doppler bins corresponding physically realistic radial velocities included first-order Bragg region.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_limitFORCurrentRange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limit First Order Region (FOR) Based on Maximum Radial Velocity — seasonder_limitFORCurrentRange","text":"","code":"if (FALSE) { # \\dontrun{ # Apply maximum radial velocity filtering cs_obj <- seasonder_limitFORCurrentRange(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_log.html","id":null,"dir":"Reference","previous_headings":"","what":"seasonder_log function — seasonder_log","title":"seasonder_log function — seasonder_log","text":"function creates logging message signals seasonder_log condition.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"seasonder_log function — seasonder_log","text":"","code":"seasonder_log(message, level = \"info\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"seasonder_log function — seasonder_log","text":"message character string indicating message logged. level character string defines level log. can \"info\", \"error\", \"fatal\". Default \"info\".","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"seasonder_log function — seasonder_log","text":"","code":"seasonder_log(\"This is an info message\") seasonder_log(\"This is an error message\", \"error\") seasonder_log(\"This is a fatal message\", \"fatal\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndAbort.html","id":null,"dir":"Reference","previous_headings":"","what":"Log and Abort Message in SeaSondeR — seasonder_logAndAbort","title":"Log and Abort Message in SeaSondeR — seasonder_logAndAbort","text":"function logs message SeaSondeR logging system also aborts execution. prefixes abort message name calling function.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndAbort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log and Abort Message in SeaSondeR — seasonder_logAndAbort","text":"","code":"seasonder_logAndAbort(msg, calling_function = NULL, ...)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndAbort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log and Abort Message in SeaSondeR — seasonder_logAndAbort","text":"msg character string indicating message calling_function function condition happened. NULL (default), code tries determine one . ... passed rlang::abort","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndAbort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log and Abort Message in SeaSondeR — seasonder_logAndAbort","text":"invisible NULL. function modifies shared environment seasonder_the place logs enabled.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndAbort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log and Abort Message in SeaSondeR — seasonder_logAndAbort","text":"","code":"if (FALSE) { # \\dontrun{ my_function <- function() {   seasonder_logAndAbort(\"This is a message\") } my_function() } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"Log and Inform Message in SeaSondeR — seasonder_logAndMessage","title":"Log and Inform Message in SeaSondeR — seasonder_logAndMessage","text":"function logs message SeaSondeR logging system also informs message console. prefixes message name calling function.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log and Inform Message in SeaSondeR — seasonder_logAndMessage","text":"","code":"seasonder_logAndMessage(msg, log_level = \"info\", calling_function = NULL, ...)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log and Inform Message in SeaSondeR — seasonder_logAndMessage","text":"msg character string indicating message logged informed. log_level character string indicating level log (\"info\", \"error\", \"fatal\"). Default \"info\". calling_function function condition happened. NULL (default), code tries determine one . ... passed rlang::inform (log_level=\"info\") rlang::warn (log_level=\"error\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndMessage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log and Inform Message in SeaSondeR — seasonder_logAndMessage","text":"invisible NULL. function modifies shared environment seasonder_the place logs enabled, informs message messages enabled.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logAndMessage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log and Inform Message in SeaSondeR — seasonder_logAndMessage","text":"","code":"if (FALSE) { # \\dontrun{ my_function <- function() {   seasonder_logAndMessage(\"This is a message\", \"info\") } my_function() } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logArchiver.html","id":null,"dir":"Reference","previous_headings":"","what":"Archive Log Entries — seasonder_logArchiver","title":"Archive Log Entries — seasonder_logArchiver","text":"Archives log entries based levels: INFO, ERROR, FATAL. paths provided, temporary files used.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logArchiver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Archive Log Entries — seasonder_logArchiver","text":"","code":"seasonder_logArchiver(   log_path = NULL,   log_info_path = log_path,   log_error_path = log_info_path,   log_fatal_path = log_error_path )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logArchiver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Archive Log Entries — seasonder_logArchiver","text":"log_path Path main log file. log_info_path Path INFO level log file. log_error_path Path ERROR level log file. log_fatal_path Path FATAL level log file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_logArchiver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Archive Log Entries — seasonder_logArchiver","text":"temporary files used, path main temporary log file returned. Otherwise, NULL.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_plotAPMLoops.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot APM Loops in a Polar Coordinate System — seasonder_plotAPMLoops","title":"Plot APM Loops in a Polar Coordinate System — seasonder_plotAPMLoops","text":"function generates polar plot antenna pattern loops SeaSonde RAPM object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_plotAPMLoops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot APM Loops in a Polar Coordinate System — seasonder_plotAPMLoops","text":"","code":"seasonder_plotAPMLoops(seasonder_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_plotAPMLoops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot APM Loops in a Polar Coordinate System — seasonder_plotAPMLoops","text":"seasonder_apm_obj SeaSonde RAPM object containing antenna pattern data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_plotAPMLoops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot APM Loops in a Polar Coordinate System — seasonder_plotAPMLoops","text":"ggplot object displaying magnitude two loops function bearings.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_raw_to_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Raw Vector to a 64-bit Integer — seasonder_raw_to_int","title":"Convert a Raw Vector to a 64-bit Integer — seasonder_raw_to_int","text":"function converts raw vector 64-bit integer, handling signed unsigned conversions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_raw_to_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Raw Vector to a 64-bit Integer — seasonder_raw_to_int","text":"","code":"seasonder_raw_to_int(r, signed = F)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_raw_to_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Raw Vector to a 64-bit Integer — seasonder_raw_to_int","text":"r raw vector converted. signed Logical, indicating whether conversion consider value signed (default FALSE unsigned).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_raw_to_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Raw Vector to a 64-bit Integer — seasonder_raw_to_int","text":"64-bit integer representation raw vector.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_raw_to_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Raw Vector to a 64-bit Integer — seasonder_raw_to_int","text":"","code":"if (FALSE) { # \\dontrun{ r <- as.raw(c(0x12,0x34,0x56,0x78,0x90,0xAB,0xCD,0xEF)) seasonder_raw_to_int(r, signed = TRUE) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSField.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a CSField from a Binary Connection — seasonder_readCSField","title":"Read a CSField from a Binary Connection — seasonder_readCSField","text":"function reads specific data types binary connection, supporting various types including integer, float, double, complex, strings.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSField.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a CSField from a Binary Connection — seasonder_readCSField","text":"","code":"seasonder_readCSField(con, type, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSField.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a CSField from a Binary Connection — seasonder_readCSField","text":"con connection object binary file. type character string identifying type data read. endian character string indicating byte order. Options \"big\" \"little\" (default \"big\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSField.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a CSField from a Binary Connection — seasonder_readCSField","text":"value read connection.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSField.html","id":"supported-data-types","dir":"Reference","previous_headings":"","what":"Supported Data Types","title":"Read a CSField from a Binary Connection — seasonder_readCSField","text":"function provides support reading variety data types binary connection. following data types recognized can used type argument: CharN Reads N characters connection N positive integer. example, Char5 read five characters. UInt8 Reads 8-bit unsigned integer. SInt8 Reads 8-bit signed integer. UInt16 Reads 16-bit unsigned integer. SInt16 Reads 16-bit signed integer. UInt32 Reads 32-bit unsigned integer. SInt32 Reads 32-bit signed integer. Float Reads single-precision floating-point number. Double Reads double-precision floating-point number. UInt64 Reads 64-bit unsigned integer. SInt64 Reads 64-bit signed integer. Complex Reads complex number separately reading real imaginary parts, represented double-precision floating-point numbers. String Reads null-terminated string. provided type match supported data types, function raises error.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSField.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Read a CSField from a Binary Connection — seasonder_readCSField","text":"function utilizes rlang package manage conditions provide detailed structured condition messages: Condition Classes: seasonder_cs_field_reading_error: General error related reading CSField binary connection. seasonder_cs_field_skipped: Condition indicates CSField skipped due reading error. Condition Cases: Connection open. Error reading value connection. Read value length 0 connection (likely reached end file). Unrecognized data type specified. Restart Options: function provides structured mechanism recover errors execution using rlang::withRestarts function. following restart option available: seasonder_skip_cs_field(cond, value) allows graceful handling reading errors. restart invoked, function log error message indicating specific CSField reading skipped return value specified. restart takes two arguments: cond (condition error occurred) value (value return CSField reading skipped). invoke restart condition error, can use helper function seasonder_skip_cs_field(cond, value). Usage: custom condition handler, can call seasonder_skip_cs_field(cond, yourDesiredReturnValue) trigger restart skip current CSField reading. Effect: invoked, function logs error message detailing reason skipping, returns value specified restart function call.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSField.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a CSField from a Binary Connection — seasonder_readCSField","text":"","code":"if (FALSE) { # \\dontrun{ con <- rawConnection(as.raw(c(0x12))) seasonder_readCSField(con, \"UInt8\") } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSSYHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CSSY File Header — seasonder_readCSSYHeader","title":"Read CSSY File Header — seasonder_readCSSYHeader","text":"function reads header section CSSY file binary connection. CSSY file header contains set key blocks formatted according SeaSonde CSSY specification. header section processed recursively terminates one following conditions met: key name \"BODY\" encountered. case, connection rewound 8 bytes allow subsequent processing body. key defined current_specs already present keys_so_far vector encountered (indicative repeated keys), triggers termination.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSSYHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CSSY File Header — seasonder_readCSSYHeader","text":"","code":"seasonder_readCSSYHeader(   connection,   current_specs,   endian = \"big\",   parent_key = NULL,   keys_so_far = c(\"CSSY\", \"HEAD\"),   specs_key_size = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSSYHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CSSY File Header — seasonder_readCSSYHeader","text":"connection binary connection read CSSY file header. current_specs list representing specification header; may contain nested subkeys. endian character string indicating byte order reading numeric values (\"big\" \"little\"). parent_key (Optional) list information parent key block, used processing nested keys. keys_so_far character vector keys already processed, used avoid recursive loops. Defaults c(\"CSSY\", \"HEAD\"). specs_key_size specification reading key size block, often obtained YAML specs.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSSYHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CSSY File Header — seasonder_readCSSYHeader","text":"list containing parsed CSSY header information. returned list may empty termination condition encountered.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSSYHeader.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read CSSY File Header — seasonder_readCSSYHeader","text":"subkeys specified current_specs (.e. current_specs comprises simple field definitions), function delegates processing seasonder_readCSSYFields. function processes CSSY header recursively: current_specs contains field definitions, seasonder_readCSSYFields called. key named \"BODY\" encountered, signifies beginning body section; function rewinds connection 8 bytes stops processing keys. key encountered defined current_specs already present keys_so_far, function also rewinds connection 8 bytes terminates header reading. Otherwise, function updates keys_so_far, handles special cases (e.g., key \"cs4h\"), calls recursively process nested keys.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readCSSYHeader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read CSSY File Header — seasonder_readCSSYHeader","text":"","code":"if (FALSE) { # \\dontrun{   con <- file(\"path/to/file.cssy\", \"rb\")   specs <- seasonder_readYAMLSpecs(seasonder_defaultSpecsFilePath(\"CSSY\"), \"header\")   header <- seasonder_readCSSYHeader(con, specs, endian = \"big\")   close(con) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readPhaseFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Phase Correction File — seasonder_readPhaseFile","title":"Read Phase Correction File — seasonder_readPhaseFile","text":"function reads phase correction file extracts phase correction values.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readPhaseFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Phase Correction File — seasonder_readPhaseFile","text":"","code":"seasonder_readPhaseFile(file_path)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readPhaseFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Phase Correction File — seasonder_readPhaseFile","text":"file_path path phase correction file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readPhaseFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Phase Correction File — seasonder_readPhaseFile","text":"numeric vector two elements: phase corrections two channels.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SeaSonde Cross Spectra (CS) File — seasonder_readSeaSondeCSFile","title":"Read SeaSonde Cross Spectra (CS) File — seasonder_readSeaSondeCSFile","text":"function reads processes SeaSonde CS file, extracting header data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SeaSonde Cross Spectra (CS) File — seasonder_readSeaSondeCSFile","text":"","code":"seasonder_readSeaSondeCSFile(filepath, specs_path, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SeaSonde Cross Spectra (CS) File — seasonder_readSeaSondeCSFile","text":"filepath character string specifying path SeaSonde CS file. specs_path character string specifying path YAML specifications CS file. endian Character string indicating byte order. Options \"big\" (default) \"little\".","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SeaSonde Cross Spectra (CS) File — seasonder_readSeaSondeCSFile","text":"list containing two components: header: list containing processed header information CS file. data: list containing processed data CS file. structure list depends content CS file can contain components SSA*, CSxy, QC.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read SeaSonde Cross Spectra (CS) File — seasonder_readSeaSondeCSFile","text":"function starts establishing connection CS file specified filepath. reads necessary metadata header specifications specs_path. Based CS file version determined header, applies specific adjustments header data. processing header, function validates CS file data using seasonder_validateCSFileData reads data via seasonder_readSeaSondeCSFileData.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFile.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Read SeaSonde Cross Spectra (CS) File — seasonder_readSeaSondeCSFile","text":"function utilizes rlang package manage conditions provide detailed structured condition messages: Condition Classes: seasonder_read_cs_file_error: error class indicates general problem attempting read SeaSonde CS file. seasonder_cs_file_skipped: Condition indicating processing CS file skipped due error. Condition Cases: Failure open connection file. Unsupported version found specs file. error can arise dependent functions seasonder_readSeaSondeCSFileHeader seasonder_readSeaSondeCSFileData. Restart Options: function provides structured mechanism recover errors execution using rlang::withRestarts function. following restart option available: seasonder_skip_cs_file(cond) allows graceful handling file reading errors. restart invoked, function log error message indicating processing specific CS file skipped return list header = NULL data = NULL. restart takes one argument: cond (condition error occurred). Usage: custom condition handler, can call seasonder_skip_cs_file(cond) trigger restart skip processing current CS file. Effect: invoked, function logs error message detailing reason skipping file returns list header data set NULL.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read SeaSonde Cross Spectra (CS) File — seasonder_readSeaSondeCSFile","text":"Cross Spectra File Format Version 6. CODAR. 2016","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileBlock.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Apply Quality Control to a Block of Fields — seasonder_readSeaSondeCSFileBlock","title":"Read and Apply Quality Control to a Block of Fields — seasonder_readSeaSondeCSFileBlock","text":"Reads block fields binary file based provided specifications. field read processed specified quality control function.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileBlock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Apply Quality Control to a Block of Fields — seasonder_readSeaSondeCSFileBlock","text":"","code":"seasonder_readSeaSondeCSFileBlock(spec, connection, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileBlock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Apply Quality Control to a Block of Fields — seasonder_readSeaSondeCSFileBlock","text":"spec named list specifications fields read. specification form: list(type = \"data_type\", qc_fun = \"qc_function_name\", qc_params = list(param1 = value1, ...)) : type: data type read, passed seasonder_readCSField. qc_fun: name quality control function. function present shared environment seasonder_the must accept field_value first argument, followed arguments specified qc_params. qc_params: list additional parameters pass quality control function. connection connection binary file. endian character string indicating byte order. Options \"big\" \"little\" (default \"big\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileBlock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Apply Quality Control to a Block of Fields — seasonder_readSeaSondeCSFileBlock","text":"named list entry corresponds field read. key field name, associated value data field quality control.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileBlock.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and Apply Quality Control to a Block of Fields — seasonder_readSeaSondeCSFileBlock","text":"quality control (QC) functions (qc_fun) specified within spec play pivotal role ensuring reliability data read. expected behavior QC functions: Input: field_value: Value field read binary file using seasonder_readCSField function. ...: Additional parameters specified qc_params passed qc_fun quality control. Functioning: QC function receives read value performs checks transformations based defined rules parameters. QC failure: QC function responsible determining action take. can log error, return default value, impute value, . critical errors, QC function halt execution. However, note logging managed QC function necessarily halt execution every case. success: QC function return value (either unchanged transformed). Output: Value validated transformed based quality control rules. Additional Notes: action QC failure directly implemented within QC function. Reading errors managed seasonder_readCSField function, returns NULL case error. QC function decide receives NULL.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileData.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SeaSonde Cross Spectra (CS) File Data — seasonder_readSeaSondeCSFileData","title":"Read SeaSonde Cross Spectra (CS) File Data — seasonder_readSeaSondeCSFileData","text":"function reads SeaSonde CS file data based provided header information. CS file data includes antenna voltage squared self spectra (SSA*) antenna cross spectra (CSxy). Additionally, quality matrix (QC) read header's nCsKind greater equal 2.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SeaSonde Cross Spectra (CS) File Data — seasonder_readSeaSondeCSFileData","text":"","code":"seasonder_readSeaSondeCSFileData(connection, header, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SeaSonde Cross Spectra (CS) File Data — seasonder_readSeaSondeCSFileData","text":"connection connection object CS file. header list containing header information. typically output seasonder_readSeaSondeCSFileHeader function. endian Character string indicating byte order. Options \"big\" (default) \"little\".","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SeaSonde Cross Spectra (CS) File Data — seasonder_readSeaSondeCSFileData","text":"list containing matrices SSA*, CSxy, QC (applicable).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read SeaSonde Cross Spectra (CS) File Data — seasonder_readSeaSondeCSFileData","text":"SSA*: Represents Antenna * voltage squared self spectra. matrices row corresponds range column Doppler cell. CSxy: Represents cross spectra two antennas x y. complex matrices. QC: Quality matrix values ranging zero one. value less one indicates SpectraAverager skipped data averaging.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileData.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Read SeaSonde Cross Spectra (CS) File Data — seasonder_readSeaSondeCSFileData","text":"function utilizes rlang package manage errors conditions, providing detailed structured messages: Error Classes: \"seasonder_cs_data_reading_error\": error thrown problem reading CS file data. due issues connection object file . \"seasonder_cs_missing_header_info_error\": Thrown essential header information nRangeCells, nDopplerCells, nCsKind missing invalid. Error Cases: Connection object properly opened invalid. Header information incomplete improperly formatted. File read operations fail due incorrect data size, type, unexpected end file. Non-numeric values encountered numeric spectra data expected.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the SeaSonde CS File Header — seasonder_readSeaSondeCSFileHeader","title":"Read the SeaSonde CS File Header — seasonder_readSeaSondeCSFileHeader","text":"function reads processes header SeaSonde CS file. initially reads general header (Version 1) determine file version. Subsequent headers processed based file version.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the SeaSonde CS File Header — seasonder_readSeaSondeCSFileHeader","text":"","code":"seasonder_readSeaSondeCSFileHeader(specs, connection, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the SeaSonde CS File Header — seasonder_readSeaSondeCSFileHeader","text":"specs List header specifications version. connection file connection. endian Character string indicating byte order, either \"big\" (default) \"little\".","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the SeaSonde CS File Header — seasonder_readSeaSondeCSFileHeader","text":"combined list processed headers file version.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV1.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SeaSonde File Header (Version 1) — seasonder_readSeaSondeCSFileHeaderV1","title":"Read SeaSonde File Header (Version 1) — seasonder_readSeaSondeCSFileHeaderV1","text":"Reads header SeaSonde file (Version 1) based provided specifications. Transforms date-time fields returns results.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SeaSonde File Header (Version 1) — seasonder_readSeaSondeCSFileHeaderV1","text":"","code":"seasonder_readSeaSondeCSFileHeaderV1(   specs,   connection,   endian = \"big\",   prev_data = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SeaSonde File Header (Version 1) — seasonder_readSeaSondeCSFileHeaderV1","text":"specs list containing specifications reading file. connection Connection object file. endian Character string specifying endianness. Default \"big\". prev_data previous header data","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SeaSonde File Header (Version 1) — seasonder_readSeaSondeCSFileHeaderV1","text":"list read transformed results.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV2.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SeaSonde File Header (Version 2) — seasonder_readSeaSondeCSFileHeaderV2","title":"Read SeaSonde File Header (Version 2) — seasonder_readSeaSondeCSFileHeaderV2","text":"Reads header SeaSonde file (Version 2) based provided specifications.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SeaSonde File Header (Version 2) — seasonder_readSeaSondeCSFileHeaderV2","text":"","code":"seasonder_readSeaSondeCSFileHeaderV2(   specs,   connection,   endian = \"big\",   prev_data = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SeaSonde File Header (Version 2) — seasonder_readSeaSondeCSFileHeaderV2","text":"specs list containing specifications reading file. connection Connection object file. endian Character string specifying endianness. Default \"big\". prev_data previous header data","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SeaSonde File Header (Version 2) — seasonder_readSeaSondeCSFileHeaderV2","text":"list read results.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV3.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SeaSonde File Header (Version 3) — seasonder_readSeaSondeCSFileHeaderV3","title":"Read SeaSonde File Header (Version 3) — seasonder_readSeaSondeCSFileHeaderV3","text":"Reads header SeaSonde file (Version 3) based provided specifications. Adds nRangeCells, nDopplerCells, nFirstRangeCell constant values results.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SeaSonde File Header (Version 3) — seasonder_readSeaSondeCSFileHeaderV3","text":"","code":"seasonder_readSeaSondeCSFileHeaderV3(   specs,   connection,   endian = \"big\",   prev_data = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SeaSonde File Header (Version 3) — seasonder_readSeaSondeCSFileHeaderV3","text":"specs list containing specifications reading file. connection Connection object file. endian Character string specifying endianness. Default \"big\". prev_data previous header data","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SeaSonde File Header (Version 3) — seasonder_readSeaSondeCSFileHeaderV3","text":"list read results.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV4.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SeaSonde File Header (Version 4) — seasonder_readSeaSondeCSFileHeaderV4","title":"Read SeaSonde File Header (Version 4) — seasonder_readSeaSondeCSFileHeaderV4","text":"Reads header SeaSonde file (Version 4) based provided specifications. Transforms CenterFreq field returns results.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SeaSonde File Header (Version 4) — seasonder_readSeaSondeCSFileHeaderV4","text":"","code":"seasonder_readSeaSondeCSFileHeaderV4(   specs,   connection,   endian = \"big\",   prev_data = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SeaSonde File Header (Version 4) — seasonder_readSeaSondeCSFileHeaderV4","text":"specs list containing specifications reading file. connection Connection object file. endian Character string specifying endianness. Default \"big\". prev_data previous header data","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SeaSonde File Header (Version 4) — seasonder_readSeaSondeCSFileHeaderV4","text":"list read transformed results.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV5.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SeaSonde File Header (Version 5) — seasonder_readSeaSondeCSFileHeaderV5","title":"Read SeaSonde File Header (Version 5) — seasonder_readSeaSondeCSFileHeaderV5","text":"Reads header SeaSonde file (Version 5) based provided specifications. Performs applicable transformations returns results.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SeaSonde File Header (Version 5) — seasonder_readSeaSondeCSFileHeaderV5","text":"","code":"seasonder_readSeaSondeCSFileHeaderV5(   specs,   connection,   endian = \"big\",   prev_data = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SeaSonde File Header (Version 5) — seasonder_readSeaSondeCSFileHeaderV5","text":"specs list containing specifications reading file. connection Connection object file. endian Character string specifying endianness. Default \"big\". prev_data previous header data","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SeaSonde File Header (Version 5) — seasonder_readSeaSondeCSFileHeaderV5","text":"list read transformed results.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV6.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SeaSonde CS File Header V6 — seasonder_readSeaSondeCSFileHeaderV6","title":"Read SeaSonde CS File Header V6 — seasonder_readSeaSondeCSFileHeaderV6","text":"function reads header SeaSonde CS File Version 6. sequentially reads blocks based provided specifications returns read data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SeaSonde CS File Header V6 — seasonder_readSeaSondeCSFileHeaderV6","text":"","code":"seasonder_readSeaSondeCSFileHeaderV6(   specs,   connection,   endian = \"big\",   prev_data = NULL )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SeaSonde CS File Header V6 — seasonder_readSeaSondeCSFileHeaderV6","text":"specs list specifications reading file header. contain three main elements: nCS6ByteSize, block_spec, blocks, containing specifications reading various parts header. connection connection object SeaSonde CS file. endian byte order reading file. Default \"big\". prev_data Previous data, , might affect current reading. Default NULL.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SeaSonde CS File Header V6 — seasonder_readSeaSondeCSFileHeaderV6","text":"list containing read data, organized based block keys.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeCSFileHeaderV6.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Read SeaSonde CS File Header V6 — seasonder_readSeaSondeCSFileHeaderV6","text":"function utilizes rlang package manage conditions provide detailed structured condition messages: Condition Classes: seasonder_v6_block_transformacion_skipped: Triggered transformation specific block skipped. seasonder_v6_transform_function_error: Triggered error applying transformation function V6 header block. seasonder_v6_skip_block_error: Triggered error skipping block. Condition Cases: following scenarios errors conditions raised: Transformation Failure: recognized block key transformation function associated fails. Error Transformation Function Application: error applying transformation function recognized V6 header block. Error Skipping Block: error skipping block block key recognized. Restart Options: function provides following restart option: seasonder_v6_skip_transformation: restart allows users skip transformation specific block instead return provided value. Effects Restart Options: Using seasonder_v6_skip_transformation restart: error message gets logged. transformation caused error gets skipped. provided value block returned. Proper error management ensures integrity reading process provides detailed feedback users regarding issues potential resolutions.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeRAPMFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Parse a SeaSonde APM File — seasonder_readSeaSondeRAPMFile","title":"Read and Parse a SeaSonde APM File — seasonder_readSeaSondeRAPMFile","text":"function reads SeaSonde APM file returns SeaSondeRAPM object containing parsed data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeRAPMFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Parse a SeaSonde APM File — seasonder_readSeaSondeRAPMFile","text":"","code":"seasonder_readSeaSondeRAPMFile(   file_path,   override_antenna_bearing = NULL,   override_phase_corrections = NULL,   override_amplitude_factors = NULL,   override_SiteOrigin = NULL,   ... )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeRAPMFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Parse a SeaSonde APM File — seasonder_readSeaSondeRAPMFile","text":"file_path path SeaSonde APM file read. override_antenna_bearing NULL, overrides Antenna Bearing data file. override_phase_corrections NULL, overrides phase corrections file. override_amplitude_factors NULL, overrides amplitude factors file. override_SiteOrigin NULL, overrides SiteOrigin attribute. ... Additional arguments passed object creation function.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readSeaSondeRAPMFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Parse a SeaSonde APM File — seasonder_readSeaSondeRAPMFile","text":"SeaSondeRAPM object containing parsed data.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readYAMLSpecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Specifications from a YAML File — seasonder_readYAMLSpecs","title":"Read Specifications from a YAML File — seasonder_readYAMLSpecs","text":"function reads YAML file containing specifications, handles potential reading errors, extracts specific information based provided path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readYAMLSpecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Specifications from a YAML File — seasonder_readYAMLSpecs","text":"","code":"seasonder_readYAMLSpecs(file_path, path = rlang::zap())"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readYAMLSpecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Specifications from a YAML File — seasonder_readYAMLSpecs","text":"file_path string. path YAML file. path character vector. Represents path within YAML file access desired information. example, access fields version V2 header, path c(\"header\", \"versions\", \"V2\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readYAMLSpecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Specifications from a YAML File — seasonder_readYAMLSpecs","text":"list. information extracted YAML file based provided path.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readYAMLSpecs.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Read Specifications from a YAML File — seasonder_readYAMLSpecs","text":"function built-error handling aborts function's execution logs detailed error messages case : File found. Error reading YAML content. read YAML content list type. data found provided path YAML content. Errors generated class \"seasonder_read_yaml_file_error\". Detailed error information including file path path within file provided. logging aborting, function utilizes seasonder_logAndAbort function.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_readYAMLSpecs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Specifications from a YAML File — seasonder_readYAMLSpecs","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming a YAML file named \"example.yaml\" exists with appropriate content result <- seasonder_readYAMLSpecs(\"example.yaml\", c(\"header\", \"versions\", \"V2\")) print(result) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_asign.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Self Spectra Sign Information from a Connection — seasonder_read_asign","title":"Read Self Spectra Sign Information from a Connection — seasonder_read_asign","text":"function reads raw binary stream provided connection, expecting specific format contains sign bits self spectra values. data divided 3 groups corresponding : cs1a, cs2a, cs3a.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_asign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Self Spectra Sign Information from a Connection — seasonder_read_asign","text":"","code":"seasonder_read_asign(connection, key)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_asign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Self Spectra Sign Information from a Connection — seasonder_read_asign","text":"connection binary connection read raw bytes . key list containing: size integer specifying total number bytes read. must equal 3 times number bytes per group. key string identifier (expected \"asign\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_asign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Self Spectra Sign Information from a Connection — seasonder_read_asign","text":"named list 3 vectors. vector represents one group (.e., cs1a, cs2a, cs3a) contains integers (0 1) corresponding bits (little-endian order) extracted raw data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_asign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Self Spectra Sign Information from a Connection — seasonder_read_asign","text":"function performs following steps: Reads key$size bytes specified connection. Verifies number bytes read matches expected size. Checks total number bytes divisible 3, allowing equal distribution among groups. Splits raw byte vector 3 groups based calculated number bytes per group. Converts byte 8-bit binary representation (using rawToBits) flattens results group.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_csign.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Complex Spectral Sign Information from a Connection — seasonder_read_csign","title":"Read Complex Spectral Sign Information from a Connection — seasonder_read_csign","text":"function reads raw binary stream provided connection, expecting specific format contains sign bits complex spectral values. data divided 6 groups corresponding : C13r, C13i, C23r, C23i, C12r, C12i.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_csign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Complex Spectral Sign Information from a Connection — seasonder_read_csign","text":"","code":"seasonder_read_csign(connection, key)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_csign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Complex Spectral Sign Information from a Connection — seasonder_read_csign","text":"connection binary connection read raw bytes . key list containing: size integer specifying total number bytes read. must equal 6 times number bytes per group. key string identifier (expected \"csign\").","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_csign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Complex Spectral Sign Information from a Connection — seasonder_read_csign","text":"named list 6 vectors. vector represents one group (e.g., C13r, C13i, etc.) contains integers (0 1) corresponding bits (little-endian order) extracted raw data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_csign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Complex Spectral Sign Information from a Connection — seasonder_read_csign","text":"function performs following steps: Reads key$size bytes specified connection. Checks enough bytes read. Ensures total number bytes divisible 6, allowing equal distribution among groups. Splits raw byte vector 6 groups based calculated number bytes per group. Converts byte 8-bit representation (using rawToBits) flattens result.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_csign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Complex Spectral Sign Information from a Connection — seasonder_read_csign","text":"","code":"if (FALSE) { # \\dontrun{ # Create a raw connection with sample data: con <- rawConnection(as.raw(c(0x42, 0x29, 0xa3, 0xd7, 0xFF, 0x00))) key <- list(size = 6, key = \"csign\") result <- seasonder_read_csign(con, key) print(result) close(con) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_reduced_encoded_data.html","id":null,"dir":"Reference","previous_headings":"","what":"This function reads an array of numbers from a binary connection using a custom command-based protocol. A block of data is processed according to its size specified in key$size. Within the block, the first byte read is a command byte that determines how the subsequent bytes are interpreted. The function updates a running ","title":"This function reads an array of numbers from a binary connection using a custom command-based protocol. A block of data is processed according to its size specified in key$size. Within the block, the first byte read is a command byte that determines how the subsequent bytes are interpreted. The function updates a running ","text":"0x9C Read 4 bytes unsigned 32-bit integer. 0x94 Read one count byte, (count+1) unsigned 32-bit integers. 0xAC Read 3 bytes 24-bit signed integer; add value current tracking value. 0xA4 Read one count byte, (count+1) 24-bit signed integers; sequentially add tracking value. 0x89 Read 1 byte signed 8-bit integer; add tracking value. 0x8A Read 2 bytes signed 16-bit integer; add tracking value. 0x82 Read one count byte, (count+1) signed 16-bit integers; sequentially add tracking value. 0x81 Read one count byte, (count+1) signed 8-bit integers; sequentially add tracking value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_reduced_encoded_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function reads an array of numbers from a binary connection using a custom command-based protocol. A block of data is processed according to its size specified in key$size. Within the block, the first byte read is a command byte that determines how the subsequent bytes are interpreted. The function updates a running ","text":"","code":"seasonder_read_reduced_encoded_data(connection, key, endian = \"big\")"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_reduced_encoded_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function reads an array of numbers from a binary connection using a custom command-based protocol. A block of data is processed according to its size specified in key$size. Within the block, the first byte read is a command byte that determines how the subsequent bytes are interpreted. The function updates a running ","text":"connection binary connection encoded data read. key list containing field size indicates many bytes data process. endian character string specifying byte order; either \"big\" \"little\". default \"big\".","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_reduced_encoded_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function reads an array of numbers from a binary connection using a custom command-based protocol. A block of data is processed according to its size specified in key$size. Within the block, the first byte read is a command byte that determines how the subsequent bytes are interpreted. The function updates a running ","text":"integer vector containing decoded numbers.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_reduced_encoded_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This function reads an array of numbers from a binary connection using a custom command-based protocol. A block of data is processed according to its size specified in key$size. Within the block, the first byte read is a command byte that determines how the subsequent bytes are interpreted. The function updates a running ","text":"24-bit signed integer computed reading 3 bytes adjusting value subtracting 16777216 computed value greater equal 8388608 account two's complement representation.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_read_reduced_encoded_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function reads an array of numbers from a binary connection using a custom command-based protocol. A block of data is processed according to its size specified in key$size. Within the block, the first byte read is a command byte that determines how the subsequent bytes are interpreted. The function updates a running ","text":"","code":"if (FALSE) { # \\dontrun{   # Example for processing command 0x9C (unsigned 32-bit integer):   # 0x9C is followed by 4 bytes that represent 1000 (big endian: 0x00, 0x00, 0x03, 0xE8).   raw_vec <- as.raw(c(0x9C, 0x00, 0x00, 0x03, 0xE8))   con <- rawConnection(raw_vec, open = \"rb\")   key <- list(size = length(raw_vec))   result <- seasonder_read_reduced_encoded_data(con, key, endian = \"big\")   close(con)   print(result)  # Expected output: 1000 } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBragg.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Distant Bragg Peak Rejection to All Range Cells — seasonder_rejectDistantBragg","title":"Apply Distant Bragg Peak Rejection to All Range Cells — seasonder_rejectDistantBragg","text":"function applies proximity-based rejection test detected First Order Region () peaks SeaSondeRCS object. Peaks far corresponding Bragg indices removed, ensuring valid Bragg signals retained.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBragg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Distant Bragg Peak Rejection to All Range Cells — seasonder_rejectDistantBragg","text":"","code":"seasonder_rejectDistantBragg(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBragg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Distant Bragg Peak Rejection to All Range Cells — seasonder_rejectDistantBragg","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBragg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Distant Bragg Peak Rejection to All Range Cells — seasonder_rejectDistantBragg","text":"updated SeaSondeRCS object filtered bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBragg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Distant Bragg Peak Rejection to All Range Cells — seasonder_rejectDistantBragg","text":"Reason Test: function filters peaks closely associated expected Bragg indices. distant peaks result interference, noise, non-Bragg sources, potentially leading erroneous current velocity vectors. ensures physically valid Bragg signals used processing pipeline. Steps: Retrieve Current Data: Retrieves detected Doppler bin indices range cells using seasonder_getSeaSondeRCS_FOR. Apply Rejection Test: Iterates range cell Bragg region (positive_FOR negative_FOR). Calls seasonder_rejectDistantBraggPeakTest peak evaluate proximity Bragg indices. Peaks fail test removed (replaced empty vector). Store Updated Data: Updates SeaSondeRCS object filtered results using seasonder_setSeaSondeRCS_FOR. function part processing workflow applied initial detection Bragg peaks.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBragg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Apply Distant Bragg Peak Rejection to All Range Cells — seasonder_rejectDistantBragg","text":"COS. SpectraPlotterMap 12 User Guide. CODAR Ocean Sensors (COS), Mountain View, CA, USA, 2016.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBragg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Distant Bragg Peak Rejection to All Range Cells — seasonder_rejectDistantBragg","text":"","code":"if (FALSE) { # \\dontrun{ # Apply distant Bragg peak rejection to a SeaSondeRCS object cs_obj <- seasonder_rejectDistantBragg(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBraggPeakTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Reject Bragg Peaks Far from Expected Bragg Index — seasonder_rejectDistantBraggPeakTest","title":"Reject Bragg Peaks Far from Expected Bragg Index — seasonder_rejectDistantBraggPeakTest","text":"function evaluates Bragg peaks based proximity expected Bragg index bins. boundaries peak farther Bragg indices width peak , peak rejected returning empty integer vector.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBraggPeakTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reject Bragg Peaks Far from Expected Bragg Index — seasonder_rejectDistantBraggPeakTest","text":"","code":"seasonder_rejectDistantBraggPeakTest(   seasonder_cs_obj,   peak,   range = NA,   peak_name = \"\" )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBraggPeakTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reject Bragg Peaks Far from Expected Bragg Index — seasonder_rejectDistantBraggPeakTest","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data Bragg indices. peak numeric vector indicating Doppler bin positions peak evaluation. range Optional; numeric integer value representing range cell corresponding peak. Defaults NA. peak_name Optional; character string representing name identifier peak (e.g., \"positive_FOR\" \"negative_FOR\"). Defaults empty string.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBraggPeakTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reject Bragg Peaks Far from Expected Bragg Index — seasonder_rejectDistantBraggPeakTest","text":"possibly modified version peak argument, rejected peak returned integer(0), indicating pass proximity test.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBraggPeakTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reject Bragg Peaks Far from Expected Bragg Index — seasonder_rejectDistantBraggPeakTest","text":"Reason Test: test ensures peaks identified part first-order Bragg region reasonably close expected Bragg index. Peaks distant Bragg index likely caused noise, interference, sources unrelated first-order Bragg scatter. invalid peaks, included, can lead erroneous current velocity vectors degrade quality radar-derived measurements. Specifically, test rejects peaks : distance left right boundary peak nearest Bragg index exceeds width peak. condition ensures peaks excessively large offsets Bragg index excluded. Steps: peak empty, function nothing. Calculates width peak difference maximum minimum Doppler bin indices. Computes left right boundaries peak. Calculates distance boundary Bragg indices. Rejects peak boundary distances exceed peak width. Logs rejection information applicable. test particularly important scenarios strong non-Bragg signals, ships high-intensity noise sources, might otherwise misclassified first-order Bragg.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBraggPeakTest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reject Bragg Peaks Far from Expected Bragg Index — seasonder_rejectDistantBraggPeakTest","text":"COS. SpectraPlotterMap 12 User Guide. CODAR Ocean Sensors (COS), Mountain View, CA, USA, 2016.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectDistantBraggPeakTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reject Bragg Peaks Far from Expected Bragg Index — seasonder_rejectDistantBraggPeakTest","text":"","code":"if (FALSE) { # \\dontrun{ # Evaluate a single peak for rejection peak <- c(100, 101, 102) cs_obj <- seasonder_rejectDistantBraggPeakTest(cs_obj, peak, range = 5, peak_name = \"positive_FOR\") } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonospheric.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Noise/Ionospheric Contamination Test to All Bragg Peaks — seasonder_rejectNoiseIonospheric","title":"Apply Noise/Ionospheric Contamination Test to All Bragg Peaks — seasonder_rejectNoiseIonospheric","text":"function evaluates filters First Order Region () detections across range cells applying noise/ionospheric contamination rejection test positive negative Bragg regions.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonospheric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Noise/Ionospheric Contamination Test to All Bragg Peaks — seasonder_rejectNoiseIonospheric","text":"","code":"seasonder_rejectNoiseIonospheric(seasonder_cs_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonospheric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Noise/Ionospheric Contamination Test to All Bragg Peaks — seasonder_rejectNoiseIonospheric","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonospheric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Noise/Ionospheric Contamination Test to All Bragg Peaks — seasonder_rejectNoiseIonospheric","text":"updated SeaSondeRCS object filtered bins.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonospheric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Noise/Ionospheric Contamination Test to All Bragg Peaks — seasonder_rejectNoiseIonospheric","text":"Reason Test: function ensures Bragg peaks contaminated excessive noise ionospheric interference removed detected First Order Region (). Peaks power surrounding non-Bragg region exceeds power Bragg region specified threshold deemed invalid rejected. step critical maintaining accuracy radar-derived measurements. Steps: Retrieve Current Data: Retrieves detected Doppler bin indices range cells using seasonder_getSeaSondeRCS_FOR. Apply Noise/Ionospheric Rejection Test: Iterates range cell evaluates positive negative Bragg regions. Calls seasonder_rejectNoiseIonosphericTest check peak noise/ionospheric criterion. Peaks fail test removed (replaced empty vector). Store Updated Data: Updates SeaSondeRCS object filtered results using seasonder_setSeaSondeRCS_FOR. Use Case: function particularly useful environments noise ionospheric effects prevalent, ensuring valid first-order Bragg peaks retained processing.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonospheric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Noise/Ionospheric Contamination Test to All Bragg Peaks — seasonder_rejectNoiseIonospheric","text":"","code":"if (FALSE) { # \\dontrun{ # Apply noise/ionospheric rejection to a SeaSondeRCS object cs_obj <- seasonder_rejectNoiseIonospheric(cs_obj) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonosphericTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Reject Bragg Peaks Due to Noise/Ionospheric Contamination — seasonder_rejectNoiseIonosphericTest","title":"Reject Bragg Peaks Due to Noise/Ionospheric Contamination — seasonder_rejectNoiseIonosphericTest","text":"function evaluates Bragg peaks based power ratio Bragg region surrounding non-Bragg region. non-Bragg power exceeds Bragg power specified threshold, peak rejected.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonosphericTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reject Bragg Peaks Due to Noise/Ionospheric Contamination — seasonder_rejectNoiseIonosphericTest","text":"","code":"seasonder_rejectNoiseIonosphericTest(   seasonder_cs_obj,   peak,   range = NA,   peak_name = \"\" )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonosphericTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reject Bragg Peaks Due to Noise/Ionospheric Contamination — seasonder_rejectNoiseIonosphericTest","text":"seasonder_cs_obj SeaSondeRCS object containing spectral data parameters. peak numeric vector indicating Doppler bin positions peak evaluation. range Optional; numeric integer value representing range cell corresponding peak. Defaults NA. peak_name Optional; character string representing name identifier peak (e.g., \"positive_FOR\" \"negative_FOR\"). Defaults empty string.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonosphericTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reject Bragg Peaks Due to Noise/Ionospheric Contamination — seasonder_rejectNoiseIonosphericTest","text":"possibly modified version peak argument, rejected peak returned integer(0), indicating pass noise/ionospheric test.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonosphericTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reject Bragg Peaks Due to Noise/Ionospheric Contamination — seasonder_rejectNoiseIonosphericTest","text":"Reason Test: test ensures Bragg peaks contaminated excessive noise ionospheric interference. Bragg regions significantly higher non-Bragg power levels likely invalid rejected. Steps: Threshold Retrieval: Retrieves reject_noise_ionospheric_threshold parameter, defines power difference (dB) allowed Bragg non-Bragg regions. Peak Region Determination: Determines whether peak positive negative Bragg region based location relative central Doppler bin. Non-Bragg Region Extraction: Identifies non-Bragg region excluding bins corresponding peak. Power Calculations: Calculates total power Bragg non-Bragg regions converts decibels (dB). Rejection Criterion: non-Bragg power exceeds Bragg power threshold, peak rejected. Logs message detailing rejection. Use Case: function particularly useful environments noise ionospheric effects prevalent, ensuring valid first-order Bragg peaks retained.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rejectNoiseIonosphericTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reject Bragg Peaks Due to Noise/Ionospheric Contamination — seasonder_rejectNoiseIonosphericTest","text":"","code":"if (FALSE) { # \\dontrun{ # Evaluate a single peak for noise/ionospheric contamination peak <- c(100, 101, 102) cs_obj <- seasonder_rejectNoiseIonosphericTest(cs_obj, peak, range = 5, peak_name = \"positive_FOR\") } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rerun_qc_with_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Structured Restart for Quality Control — seasonder_rerun_qc_with_fun","title":"Structured Restart for Quality Control — seasonder_rerun_qc_with_fun","text":"Provides structured restart mechanism rerun quality control (QC) function alternative function execution read_and_qc_field. allows flexible error recovery strategy initial QC function fails deemed inadequate.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rerun_qc_with_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structured Restart for Quality Control — seasonder_rerun_qc_with_fun","text":"","code":"seasonder_rerun_qc_with_fun(cond, qc_fun)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rerun_qc_with_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structured Restart for Quality Control — seasonder_rerun_qc_with_fun","text":"cond condition object captured execution read_and_qc_field function. qc_fun alternate quality control function apply. function accept value field sole argument return QC-applied value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rerun_qc_with_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structured Restart for Quality Control — seasonder_rerun_qc_with_fun","text":"value returned alternate QC function qc_fun.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_rerun_qc_with_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structured Restart for Quality Control — seasonder_rerun_qc_with_fun","text":"function meant used within custom condition handlers read_and_qc_field function.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute the MUSIC Algorithm on a SeaSondeRCS Object — seasonder_runMUSIC","title":"Execute the MUSIC Algorithm on a SeaSondeRCS Object — seasonder_runMUSIC","text":"function performs MUSIC (MUltiple SIgnal Classification) algorithm given SeaSondeRCS object, executing series processing steps extract direction--arrival (DOA) information related metrics radar cross-spectrum data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute the MUSIC Algorithm on a SeaSondeRCS Object — seasonder_runMUSIC","text":"","code":"seasonder_runMUSIC(seasonder_cs_object)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute the MUSIC Algorithm on a SeaSondeRCS Object — seasonder_runMUSIC","text":"seasonder_cs_object SeaSondeRCS object contains radar cross-spectrum data metadata. object modified place include results MUSIC algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute the MUSIC Algorithm on a SeaSondeRCS Object — seasonder_runMUSIC","text":"SeaSondeRCS object updated MUSIC-related attributes. Specifically: Processing steps annotated MUSIC start end points. Updated attributes fields covariance matrix computations, DOA estimations, MUSIC-related metrics.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute the MUSIC Algorithm on a SeaSondeRCS Object — seasonder_runMUSIC","text":"MUSIC algorithm executed series sequential steps: Log start MUSIC algorithm. Update processing steps SeaSondeRCS object include MUSIC start text. Perform following computations: Compute covariance matrix cross-spectrum data. Perform eigen decomposition covariance matrix. Compute DOA functions using MUSIC-specific methods. Extract peaks DOA functions, corresponding possible signal directions. Calculate signal power matrix. Test dual solutions compute proportions. Select final set DOAs computed data. Convert selected DOAs geographical coordinates (latitude longitude). Log completion MUSIC algorithm.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute the MUSIC Algorithm on a SeaSondeRCS Object — seasonder_runMUSIC","text":"","code":"if (FALSE) { # \\dontrun{ # Create a SeaSondeRCS object (example) cs_object <- seasonder_createSeaSondeRCS(x = list(header = list(), data = list()))  # Run the MUSIC algorithm cs_object <- seasonder_runMUSIC(cs_object)  # Check the updated processing steps print(seasonder_getSeaSondeRCS_ProcessingSteps(cs_object)) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC_in_FOR.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MUSIC Algorithm on FOR Data — seasonder_runMUSIC_in_FOR","title":"Run MUSIC Algorithm on FOR Data — seasonder_runMUSIC_in_FOR","text":"function integrates MUSIC (Multiple Signal Classification) algorithm SeaSondeRCS object First Order Regions (). interpolates Doppler bins, extracts First Order Regions cross-spectrum data, initializes MUSIC data processing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC_in_FOR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MUSIC Algorithm on FOR Data — seasonder_runMUSIC_in_FOR","text":"","code":"seasonder_runMUSIC_in_FOR(seasonder_cs_object, doppler_interpolation = 2L)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC_in_FOR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MUSIC Algorithm on FOR Data — seasonder_runMUSIC_in_FOR","text":"seasonder_cs_object SeaSondeRCS object containing cross-spectrum data initialized First Order Regions (). doppler_interpolation integer specifying level interpolation apply Doppler bins. Default 2L.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC_in_FOR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MUSIC Algorithm on FOR Data — seasonder_runMUSIC_in_FOR","text":"SeaSondeRCS object updated MUSIC data applying algorithm.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC_in_FOR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run MUSIC Algorithm on FOR Data — seasonder_runMUSIC_in_FOR","text":"function follows steps: Updates SeaSondeRCS object specified Doppler interpolation level using seasonder_setSeaSondeRCS_MUSIC_doppler_interpolation. Retrieves data input object using seasonder_getSeaSondeRCS_FOR. Iterates range cell , transforming negative positive Doppler bins respective frequencies applying MUSIC algorithm. Creates data frame containing range cell Doppler bin information MUSIC algorithm. Initializes MUSIC data SeaSondeRCS object using seasonder_initMUSICData. Applies MUSIC interpolation runs MUSIC algorithm object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_runMUSIC_in_FOR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run MUSIC Algorithm on FOR Data — seasonder_runMUSIC_in_FOR","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `cs_object` is a valid SeaSondeRCS object with FOR initialized result <- seasonder_runMUSIC_in_FOR(cs_object, doppler_interpolation = 3L) print(result) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_AmplitudeFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for AmplitudeFactors — seasonder_setSeaSondeRAPM_AmplitudeFactors","title":"Setter for AmplitudeFactors — seasonder_setSeaSondeRAPM_AmplitudeFactors","text":"Setter AmplitudeFactors","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_AmplitudeFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for AmplitudeFactors — seasonder_setSeaSondeRAPM_AmplitudeFactors","text":"","code":"seasonder_setSeaSondeRAPM_AmplitudeFactors(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_AmplitudeFactors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for AmplitudeFactors — seasonder_setSeaSondeRAPM_AmplitudeFactors","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_AntennaBearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for AntennaBearing — seasonder_setSeaSondeRAPM_AntennaBearing","title":"Setter for AntennaBearing — seasonder_setSeaSondeRAPM_AntennaBearing","text":"Setter AntennaBearing","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_AntennaBearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for AntennaBearing — seasonder_setSeaSondeRAPM_AntennaBearing","text":"","code":"seasonder_setSeaSondeRAPM_AntennaBearing(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_AntennaBearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for AntennaBearing — seasonder_setSeaSondeRAPM_AntennaBearing","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_BEAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for BEAR — seasonder_setSeaSondeRAPM_BEAR","title":"Setter for BEAR — seasonder_setSeaSondeRAPM_BEAR","text":"Setter BEAR","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_BEAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for BEAR — seasonder_setSeaSondeRAPM_BEAR","text":"","code":"seasonder_setSeaSondeRAPM_BEAR(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_BEAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for BEAR — seasonder_setSeaSondeRAPM_BEAR","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_BearingResolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for BearingResolution — seasonder_setSeaSondeRAPM_BearingResolution","title":"Setter for BearingResolution — seasonder_setSeaSondeRAPM_BearingResolution","text":"Setter BearingResolution","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_BearingResolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for BearingResolution — seasonder_setSeaSondeRAPM_BearingResolution","text":"","code":"seasonder_setSeaSondeRAPM_BearingResolution(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_BearingResolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for BearingResolution — seasonder_setSeaSondeRAPM_BearingResolution","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_CommentLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for CommentLine — seasonder_setSeaSondeRAPM_CommentLine","title":"Setter for CommentLine — seasonder_setSeaSondeRAPM_CommentLine","text":"Setter CommentLine","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_CommentLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for CommentLine — seasonder_setSeaSondeRAPM_CommentLine","text":"","code":"seasonder_setSeaSondeRAPM_CommentLine(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_CommentLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for CommentLine — seasonder_setSeaSondeRAPM_CommentLine","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_CreateTimeStamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for CreateTimeStamp — seasonder_setSeaSondeRAPM_CreateTimeStamp","title":"Setter for CreateTimeStamp — seasonder_setSeaSondeRAPM_CreateTimeStamp","text":"Setter CreateTimeStamp","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_CreateTimeStamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for CreateTimeStamp — seasonder_setSeaSondeRAPM_CreateTimeStamp","text":"","code":"seasonder_setSeaSondeRAPM_CreateTimeStamp(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_CreateTimeStamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for CreateTimeStamp — seasonder_setSeaSondeRAPM_CreateTimeStamp","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Creator.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for Creator — seasonder_setSeaSondeRAPM_Creator","title":"Setter for Creator — seasonder_setSeaSondeRAPM_Creator","text":"Setter Creator","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Creator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for Creator — seasonder_setSeaSondeRAPM_Creator","text":"","code":"seasonder_setSeaSondeRAPM_Creator(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Creator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for Creator — seasonder_setSeaSondeRAPM_Creator","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_FileID.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for FileID — seasonder_setSeaSondeRAPM_FileID","title":"Setter for FileID — seasonder_setSeaSondeRAPM_FileID","text":"Setter FileID","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_FileID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for FileID — seasonder_setSeaSondeRAPM_FileID","text":"","code":"seasonder_setSeaSondeRAPM_FileID(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_FileID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for FileID — seasonder_setSeaSondeRAPM_FileID","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_FileName.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for FileName — seasonder_setSeaSondeRAPM_FileName","title":"Setter for FileName — seasonder_setSeaSondeRAPM_FileName","text":"Setter FileName","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_FileName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for FileName — seasonder_setSeaSondeRAPM_FileName","text":"","code":"seasonder_setSeaSondeRAPM_FileName(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_FileName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for FileName — seasonder_setSeaSondeRAPM_FileName","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_PhaseCorrections.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for PhaseCorrections — seasonder_setSeaSondeRAPM_PhaseCorrections","title":"Setter for PhaseCorrections — seasonder_setSeaSondeRAPM_PhaseCorrections","text":"Setter PhaseCorrections","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_PhaseCorrections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for PhaseCorrections — seasonder_setSeaSondeRAPM_PhaseCorrections","text":"","code":"seasonder_setSeaSondeRAPM_PhaseCorrections(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_PhaseCorrections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for PhaseCorrections — seasonder_setSeaSondeRAPM_PhaseCorrections","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_ProcessingSteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for ProcessingSteps — seasonder_setSeaSondeRAPM_ProcessingSteps","title":"Setter for ProcessingSteps — seasonder_setSeaSondeRAPM_ProcessingSteps","text":"Setter ProcessingSteps","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_ProcessingSteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for ProcessingSteps — seasonder_setSeaSondeRAPM_ProcessingSteps","text":"","code":"seasonder_setSeaSondeRAPM_ProcessingSteps(   seasonde_apm_obj,   new_value,   append = TRUE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_ProcessingSteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for ProcessingSteps — seasonder_setSeaSondeRAPM_ProcessingSteps","text":"seasonde_apm_obj SeaSonderAPM object new_value new value append Append new step existing steps TRUE; otherwise, replace previous steps.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_SiteName.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for SiteName — seasonder_setSeaSondeRAPM_SiteName","title":"Setter for SiteName — seasonder_setSeaSondeRAPM_SiteName","text":"Setter SiteName","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_SiteName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for SiteName — seasonder_setSeaSondeRAPM_SiteName","text":"","code":"seasonder_setSeaSondeRAPM_SiteName(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_SiteName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for SiteName — seasonder_setSeaSondeRAPM_SiteName","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_SiteOrigin.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for SiteOrigin — seasonder_setSeaSondeRAPM_SiteOrigin","title":"Setter for SiteOrigin — seasonder_setSeaSondeRAPM_SiteOrigin","text":"Setter SiteOrigin","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_SiteOrigin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for SiteOrigin — seasonder_setSeaSondeRAPM_SiteOrigin","text":"","code":"seasonder_setSeaSondeRAPM_SiteOrigin(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_SiteOrigin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for SiteOrigin — seasonder_setSeaSondeRAPM_SiteOrigin","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for Smoothing — seasonder_setSeaSondeRAPM_Smoothing","title":"Setter for Smoothing — seasonder_setSeaSondeRAPM_Smoothing","text":"Setter Smoothing","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for Smoothing — seasonder_setSeaSondeRAPM_Smoothing","text":"","code":"seasonder_setSeaSondeRAPM_Smoothing(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for Smoothing — seasonder_setSeaSondeRAPM_Smoothing","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_StationCode.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for StationCode — seasonder_setSeaSondeRAPM_StationCode","title":"Setter for StationCode — seasonder_setSeaSondeRAPM_StationCode","text":"Setter StationCode","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_StationCode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for StationCode — seasonder_setSeaSondeRAPM_StationCode","text":"","code":"seasonder_setSeaSondeRAPM_StationCode(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_StationCode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for StationCode — seasonder_setSeaSondeRAPM_StationCode","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Type.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for Type — seasonder_setSeaSondeRAPM_Type","title":"Setter for Type — seasonder_setSeaSondeRAPM_Type","text":"Setter Type","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for Type — seasonder_setSeaSondeRAPM_Type","text":"","code":"seasonder_setSeaSondeRAPM_Type(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_Type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for Type — seasonder_setSeaSondeRAPM_Type","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_quality_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for quality_matrix — seasonder_setSeaSondeRAPM_quality_matrix","title":"Setter for quality_matrix — seasonder_setSeaSondeRAPM_quality_matrix","text":"Setter quality_matrix","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_quality_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for quality_matrix — seasonder_setSeaSondeRAPM_quality_matrix","text":"","code":"seasonder_setSeaSondeRAPM_quality_matrix(seasonde_apm_obj, new_value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRAPM_quality_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for quality_matrix — seasonder_setSeaSondeRAPM_quality_matrix","text":"seasonde_apm_obj SeaSonderAPM object new_value new value","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Maximum Power Bin Indices for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP.bin","title":"Set Maximum Power Bin Indices for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP.bin","text":"function assigns Doppler bin indices corresponding maximum power (MAXP.bin) range cell First Order Region () SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Maximum Power Bin Indices for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP.bin","text":"","code":"seasonder_setSeaSondeRCS_FOR_MAXP.bin(seasonder_cs_obj, FOR_MAXP.bin)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Maximum Power Bin Indices for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP.bin","text":"seasonder_cs_obj SeaSondeRCS object MAXP.bin values assigned. FOR_MAXP.bin list containing Doppler bin indices maximum power range cell.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Maximum Power Bin Indices for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP.bin","text":"updated SeaSondeRCS object MAXP.bin values stored FOR_data attribute.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.bin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Maximum Power Bin Indices for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP.bin","text":"maximum power bin (MAXP.bin) represents Doppler bin index highest spectral power detected first-order region. information used refine first-order boundary detection. Validation Considerations: function currently validate format FOR_MAXP.bin. Future improvements ensure FOR_MAXP.bin consists integer values corresponding Doppler bins.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Maximum Power Bin Indices for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP.bin","text":"","code":"if (FALSE) { # \\dontrun{ # Assign maximum power bin indices to a SeaSondeRCS object cs_obj <- seasonder_setSeaSondeRCS_FOR_MAXP.bin(cs_obj, MAXP_bin_values) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Maximum Power (MAXP) for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP","title":"Set Maximum Power (MAXP) for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP","text":"function assigns computed maximum power values (MAXP) range cell First Order Region () SeaSondeRCS object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Maximum Power (MAXP) for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP","text":"","code":"seasonder_setSeaSondeRCS_FOR_MAXP(seasonder_cs_obj, FOR_MAXP)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Maximum Power (MAXP) for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP","text":"seasonder_cs_obj SeaSondeRCS object MAXP values assigned. FOR_MAXP list containing maximum power values range cell.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Maximum Power (MAXP) for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP","text":"updated SeaSondeRCS object MAXP values stored FOR_data attribute.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Maximum Power (MAXP) for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP","text":"maximum power (MAXP) represents highest spectral power detected first-order region. value extracted self-spectra used setting first-order boundaries. Validation Considerations: function currently perform explicit validation FOR_MAXP. Future improvements ensure FOR_MAXP contains numeric values corresponding range cell.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_MAXP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Maximum Power (MAXP) for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_MAXP","text":"","code":"if (FALSE) { # \\dontrun{ # Assign maximum power values to a SeaSondeRCS object cs_obj <- seasonder_setSeaSondeRCS_FOR_MAXP(cs_obj, MAXP_values) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_SS_Smoothed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Smoothed Self-Spectra for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_SS_Smoothed","title":"Set Smoothed Self-Spectra for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_SS_Smoothed","text":"function assigns smoothed self-spectra (SS) matrix First Order Region () data within SeaSondeRCS object. smoothed matrix used processing improve detection first-order region.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_SS_Smoothed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Smoothed Self-Spectra for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_SS_Smoothed","text":"","code":"seasonder_setSeaSondeRCS_FOR_SS_Smoothed(seasonder_cs_obj, FOR_SS_Smoothed)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_SS_Smoothed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Smoothed Self-Spectra for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_SS_Smoothed","text":"seasonder_cs_obj SeaSondeRCS object smoothed self-spectra assigned. FOR_SS_Smoothed matrix containing smoothed self-spectra data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_SS_Smoothed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Smoothed Self-Spectra for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_SS_Smoothed","text":"updated SeaSondeRCS object smoothed self-spectra stored FOR_data attribute.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_SS_Smoothed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Smoothed Self-Spectra for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_SS_Smoothed","text":"function assigns provided smoothed self-spectra matrix FOR_data attribute SeaSondeRCS object. matrix typically generated using seasonder_SmoothSS applied antenna 3. Validation Considerations: function currently lacks explicit validation FOR_SS_Smoothed. Future improvements include checking whether FOR_SS_Smoothed matrix ensuring dimensions match original self-spectra structure.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_FOR_SS_Smoothed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Smoothed Self-Spectra for First Order Region (FOR) — seasonder_setSeaSondeRCS_FOR_SS_Smoothed","text":"","code":"if (FALSE) { # \\dontrun{ # Smooth and assign self-spectra for FOR processing smoothed_SS <- seasonder_SmoothSS(cs_obj, antenna = 3) cs_obj <- seasonder_setSeaSondeRCS_FOR_SS_Smoothed(cs_obj, smoothed_SS) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_ProcessingSteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for ProcessingSteps — seasonder_setSeaSondeRCS_ProcessingSteps","title":"Setter for ProcessingSteps — seasonder_setSeaSondeRCS_ProcessingSteps","text":"Setter ProcessingSteps","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_ProcessingSteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for ProcessingSteps — seasonder_setSeaSondeRCS_ProcessingSteps","text":"","code":"seasonder_setSeaSondeRCS_ProcessingSteps(   seasonder_cs_obj,   processing_steps,   append = TRUE )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_ProcessingSteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for ProcessingSteps — seasonder_setSeaSondeRCS_ProcessingSteps","text":"seasonder_cs_obj SeaSondeRCS object processing_steps new value append append new step replace previous steps? Default: TRUE","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for data — seasonder_setSeaSondeRCS_data","title":"Setter for data — seasonder_setSeaSondeRCS_data","text":"Setter data","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for data — seasonder_setSeaSondeRCS_data","text":"","code":"seasonder_setSeaSondeRCS_data(seasonder_cs_obj, data)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for data — seasonder_setSeaSondeRCS_data","text":"seasonder_cs_obj SeaSondeRCS object data new value","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for header — seasonder_setSeaSondeRCS_header","title":"Setter for header — seasonder_setSeaSondeRCS_header","text":"Setter header","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for header — seasonder_setSeaSondeRCS_header","text":"","code":"seasonder_setSeaSondeRCS_header(seasonder_cs_obj, header)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_setSeaSondeRCS_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for header — seasonder_setSeaSondeRCS_header","text":"seasonder_cs_obj SeaSondeRCS object header new value","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Skip Reading a CSField and Return a Specified Value — seasonder_skip_cs_field","title":"Skip Reading a CSField and Return a Specified Value — seasonder_skip_cs_field","text":"function convenience mechanism invoke seasonder_skip_cs_field restart option. can used custom condition handlers reading CSField binary connection encounters error condition. called, indicates intention skip reading current CSField return specific value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skip Reading a CSField and Return a Specified Value — seasonder_skip_cs_field","text":"","code":"seasonder_skip_cs_field(cond, value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skip Reading a CSField and Return a Specified Value — seasonder_skip_cs_field","text":"cond condition error occurred reading CSField. value desired return value use place CSField reading encountered error.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skip Reading a CSField and Return a Specified Value — seasonder_skip_cs_field","text":"Returns value specified value parameter.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skip Reading a CSField and Return a Specified Value — seasonder_skip_cs_field","text":"execution seasonder_readCSField function, errors conditions can occur. provide structured mechanism handle cases, function utilizes rlang::withRestarts mechanism, offering restart option named seasonder_skip_cs_field. restart allows function gracefully handle reading errors logging relevant error message returning specified value. seasonder_skip_cs_field function provides easy way invoke restart. called within custom condition handler, signals intention skip current CSField reading due error specifies return value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Skip SeaSonde Cross Spectra (CS) File Reading — seasonder_skip_cs_file","title":"Skip SeaSonde Cross Spectra (CS) File Reading — seasonder_skip_cs_file","text":"function serves restart seasonder_readSeaSondeCSFile. invoked, provides mechanism gracefully handle file reading errors logging error message skipping current file processing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skip SeaSonde Cross Spectra (CS) File Reading — seasonder_skip_cs_file","text":"","code":"seasonder_skip_cs_file(cond)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skip SeaSonde Cross Spectra (CS) File Reading — seasonder_skip_cs_file","text":"cond condition error occurred file reading process. used log detailed error message indicating reason skipping file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skip SeaSonde Cross Spectra (CS) File Reading — seasonder_skip_cs_file","text":"invoked, function returns list header data set NULL.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_skip_cs_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skip SeaSonde Cross Spectra (CS) File Reading — seasonder_skip_cs_file","text":"function meant used within custom condition handler. problematic condition arises processing SeaSonde CS file, can call seasonder_skip_cs_file(cond) trigger restart, allows graceful degradation logging error message skipping file. effect invoking restart twofold: error message detailing reason skipping file logged. calling function (seasonder_readSeaSondeCSFile) immediately return list header = NULL data = NULL.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_smoothAPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth APM Data — seasonder_smoothAPM","title":"Smooth APM Data — seasonder_smoothAPM","text":"function smooths antenna pattern data channel SeaSonde RAPM object applying moving average specified number points.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_smoothAPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth APM Data — seasonder_smoothAPM","text":"","code":"seasonder_smoothAPM(seasonder_apm_object, smoothing)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_smoothAPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth APM Data — seasonder_smoothAPM","text":"seasonder_apm_object SeaSonde RAPM object containing raw antenna pattern data. smoothing number points use moving average smoothing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_smoothAPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth APM Data — seasonder_smoothAPM","text":"SeaSonde RAPM object smoothed antenna pattern data updated processing step.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_splitLog.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Logs Based on Time Thresholds — seasonder_splitLog","title":"Split Logs Based on Time Thresholds — seasonder_splitLog","text":"function splits log entries blocks based time gaps timestamps. threshold splitting can provided calculated based gaps log timestamps.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_splitLog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Logs Based on Time Thresholds — seasonder_splitLog","text":"","code":"seasonder_splitLog(   threshold = NULL,   threshold_factor = 4,   threshold_quantile = 0.9,   min_threshold_secs = 10 )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_splitLog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Logs Based on Time Thresholds — seasonder_splitLog","text":"threshold time difference threshold splitting logs. NULL, calculated. threshold_factor Multiplicative factor applied calculated threshold. threshold_quantile Quantile used threshold calculation threshold NULL. min_threshold_secs Minimum threshold seconds.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_splitLog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Logs Based on Time Thresholds — seasonder_splitLog","text":"list log blocks, block vector log entries.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_trimAPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim APM Data — seasonder_trimAPM","title":"Trim APM Data — seasonder_trimAPM","text":"function trims specified number points beginning end antenna pattern data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_trimAPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim APM Data — seasonder_trimAPM","text":"","code":"seasonder_trimAPM(seasonder_apm_object, trimming)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_trimAPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim APM Data — seasonder_trimAPM","text":"seasonder_apm_object SeaSonde RAPM object containing antenna pattern data. trimming number points trim end.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_trimAPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim APM Data — seasonder_trimAPM","text":"SeaSonde RAPM object trimmed antenna pattern data updated attributes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_v6_skip_transformation.html","id":null,"dir":"Reference","previous_headings":"","what":"Trigger Restart for Skipping Transformation — seasonder_v6_skip_transformation","title":"Trigger Restart for Skipping Transformation — seasonder_v6_skip_transformation","text":"function provides mechanism invoke restart reading transformation process SeaSonde CS File Version 6 header. allows users skip transformations may caused errors proceed provided value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_v6_skip_transformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trigger Restart for Skipping Transformation — seasonder_v6_skip_transformation","text":"","code":"seasonder_v6_skip_transformation(cond, value)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_v6_skip_transformation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trigger Restart for Skipping Transformation — seasonder_v6_skip_transformation","text":"cond condition object triggered restart. value provided value used transformation skipped.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_v6_skip_transformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trigger Restart for Skipping Transformation — seasonder_v6_skip_transformation","text":"function standard return value. Instead, triggers restart can caught enclosing context handle error decide proceed.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_v6_skip_transformation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trigger Restart for Skipping Transformation — seasonder_v6_skip_transformation","text":"function specifically triggers seasonder_v6_skip_transformation restart allows skipping block transformation reading process SeaSonde CS File Version 6 header. triggered, logs error message, skips problematic transformation, returns provided value block.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_v6_skip_transformation.html","id":"integration-with-seasonde-cs-file-reading","dir":"Reference","previous_headings":"","what":"Integration with SeaSonde CS File Reading","title":"Trigger Restart for Skipping Transformation — seasonder_v6_skip_transformation","text":"restart mechanism function integrated within seasonder_readSeaSondeCSFileHeaderV6 function. error occurs transformation process specific block, restart provides users option skip problematic transformation proceed fallback value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateAttributesSeaSondeRAPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Attributes for a SeaSondeRAPM Object — seasonder_validateAttributesSeaSondeRAPM","title":"Validate Attributes for a SeaSondeRAPM Object — seasonder_validateAttributesSeaSondeRAPM","text":"function validates attributes given SeaSondeRAPM object ensure meet required specifications.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateAttributesSeaSondeRAPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Attributes for a SeaSondeRAPM Object — seasonder_validateAttributesSeaSondeRAPM","text":"","code":"seasonder_validateAttributesSeaSondeRAPM(seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateAttributesSeaSondeRAPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Attributes for a SeaSondeRAPM Object — seasonder_validateAttributesSeaSondeRAPM","text":"seasonde_apm_obj SeaSondeRAPM object whose attributes validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateAttributesSeaSondeRAPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Attributes for a SeaSondeRAPM Object — seasonder_validateAttributesSeaSondeRAPM","text":"TRUE attributes valid. function stop execution display error message attributes invalid.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateAttributesSeaSondeRAPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Attributes for a SeaSondeRAPM Object — seasonder_validateAttributesSeaSondeRAPM","text":"function performs validation following attributes SeaSondeRAPM object: quality_matrix BEAR Type Creator SiteName SiteOrigin FileName CreateTimeStamp ProcessingSteps AmplitudeFactors AntennaBearing StationCode BearingResolution Smoothing CommentLine FileID PhaseCorrections internally calls specific validation functions attributes. attributes found invalid, function stop execution display error message.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSDataStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the Data Structure of CrossSpectra Data — seasonder_validateCSDataStructure","title":"Validate the Data Structure of CrossSpectra Data — seasonder_validateCSDataStructure","text":"function checks validity data structure CrossSpectra (CS) data. ensures required fields present, dimensions matrices correct based nRanges nDoppler, types data fields expected.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSDataStructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the Data Structure of CrossSpectra Data — seasonder_validateCSDataStructure","text":"","code":"seasonder_validateCSDataStructure(data, nRanges, nDoppler)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSDataStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the Data Structure of CrossSpectra Data — seasonder_validateCSDataStructure","text":"data list representing CrossSpectra (CS) data. contain fields \"SSA1\", \"SSA2\", \"SSA3\", \"CS12\", \"CS13\", \"CS23\", \"QC\". nRanges integer specifying expected number range cells. nDoppler integer specifying expected number Doppler cells.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSDataStructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the Data Structure of CrossSpectra Data — seasonder_validateCSDataStructure","text":"Invisible NULL data structure valid. Otherwise, error thrown.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSDataStructure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate the Data Structure of CrossSpectra Data — seasonder_validateCSDataStructure","text":"function expects following structure data list: SSA1, SSA2, SSA3, QC: Matrices numeric values, dimensions nRanges x nDoppler. CS12, CS13, CS23: Matrices complex values, dimensions nRanges x nDoppler.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSDataStructure.html","id":"error-management","dir":"Reference","previous_headings":"","what":"Error Management","title":"Validate the Data Structure of CrossSpectra Data — seasonder_validateCSDataStructure","text":"function utilizes rlang package manage errors provide detailed structured error messages: Condition Classes: seasonder_CS_data_structure_validation_error: error class indicating problem data structure CrossSpectra (CS) data. Condition Cases: Missing fields data. Incorrect dimensions matrices data. Incorrect data type fields data.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSDataStructure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate the Data Structure of CrossSpectra Data — seasonder_validateCSDataStructure","text":"","code":"if (FALSE) { # \\dontrun{ data <- list(   SSA1 = matrix(rep(NA_real_, 10 * 20), ncol = 20, byrow = TRUE),   SSA2 = matrix(rep(NA_real_, 10 * 20), ncol = 20, byrow = TRUE),   # ... other fields ) seasonder_validateCSDataStructure(data, 10, 20) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSFileData.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate SeaSondeR CS File Data — seasonder_validateCSFileData","title":"Validate SeaSondeR CS File Data — seasonder_validateCSFileData","text":"function performs multiple validation checks provided CS file SeaSondeR system. checks file various conditions determine meets SeaSondeR standards.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSFileData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate SeaSondeR CS File Data — seasonder_validateCSFileData","text":"","code":"seasonder_validateCSFileData(filepath, header)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSFileData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate SeaSondeR CS File Data — seasonder_validateCSFileData","text":"filepath character string indicating path CS file validate. header list containing header information CS file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSFileData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate SeaSondeR CS File Data — seasonder_validateCSFileData","text":"NULL invisibly. function mainly serves validate stop execution log error using seasonder_logAndAbort condition fails.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSFileData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate SeaSondeR CS File Data — seasonder_validateCSFileData","text":"function performs following validation checks: Verifies file size greater 10 bytes. Validates nCsFileVersion field header ensure 1 32. Depending nCsFileVersion, verifies appropriate file size, extent various version headers (nV1Extent, nV2Extent, etc.). Validates nRangeCells nDopplerCells fields ensure within permissible ranges. Depending nCsKind value, validates file size expected sizes based nRangeCells, nSpectraChannels, nDopplerCells.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSFileData.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Validate SeaSondeR CS File Data — seasonder_validateCSFileData","text":"function utilizes rlang package manage conditions provide detailed structured condition messages: Condition Classes: seasonder_validate_cs_file_error: error class indicates validation requirement met. Condition Cases: Failure validation test.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSFileData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Validate SeaSondeR CS File Data — seasonder_validateCSFileData","text":"Cross Spectra File Format Version 6. CODAR. 2016","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSHeaderStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the Header of CrossSpectra Data — seasonder_validateCSHeaderStructure","title":"Validate the Header of CrossSpectra Data — seasonder_validateCSHeaderStructure","text":"function validates structure header list expected represent metadata cross spectra file. checks header indeed list whether mandatory elements, number range cells number Doppler cells, present.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSHeaderStructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the Header of CrossSpectra Data — seasonder_validateCSHeaderStructure","text":"","code":"seasonder_validateCSHeaderStructure(header)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSHeaderStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the Header of CrossSpectra Data — seasonder_validateCSHeaderStructure","text":"header list representing header metadata cross spectra file.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSHeaderStructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the Header of CrossSpectra Data — seasonder_validateCSHeaderStructure","text":"Invisible NULL header structure valid. Otherwise, error thrown.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSHeaderStructure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate the Header of CrossSpectra Data — seasonder_validateCSHeaderStructure","text":"function primarily checks two conditions: Whether provided header argument list. Whether nRangeCells nDopplerCells present header.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCSHeaderStructure.html","id":"condition-management","dir":"Reference","previous_headings":"","what":"Condition Management","title":"Validate the Header of CrossSpectra Data — seasonder_validateCSHeaderStructure","text":"function utilizes rlang package manage conditions provide detailed structured condition messages: Condition Classes: seasonder_CS_header_is_not_a_list: Triggered header parameter list. seasonder_CS_missing_nRange_nDoppler_error: Triggered either nRangeCells nDopplerCells missing header. Condition Cases: header list, function throws error class seasonder_CS_header_is_not_a_list. either nRangeCells nDopplerCells missing, error class seasonder_CS_missing_nRange_nDoppler_error thrown.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCalibrationMatrixSeaSondeRAPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Calibration Matrix for a SeaSondeRAPM Object — seasonder_validateCalibrationMatrixSeaSondeRAPM","title":"Validate Calibration Matrix for a SeaSondeRAPM Object — seasonder_validateCalibrationMatrixSeaSondeRAPM","text":"function validates input calibration_matrix ensure meets required specifications use SeaSondeRAPM object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCalibrationMatrixSeaSondeRAPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Calibration Matrix for a SeaSondeRAPM Object — seasonder_validateCalibrationMatrixSeaSondeRAPM","text":"","code":"seasonder_validateCalibrationMatrixSeaSondeRAPM(matrix)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCalibrationMatrixSeaSondeRAPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Calibration Matrix for a SeaSondeRAPM Object — seasonder_validateCalibrationMatrixSeaSondeRAPM","text":"matrix 3 x b complex matrix calibration, b number bearings.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCalibrationMatrixSeaSondeRAPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Calibration Matrix for a SeaSondeRAPM Object — seasonder_validateCalibrationMatrixSeaSondeRAPM","text":"TRUE matrix valid. function stop execution display error message matrix invalid.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateCalibrationMatrixSeaSondeRAPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Calibration Matrix for a SeaSondeRAPM Object — seasonder_validateCalibrationMatrixSeaSondeRAPM","text":"function performs following validation checks: Confirms input matrix. Verifies matrix exactly three rows. Checks matrix contains complex numbers. validation steps fail, function log fatal error stop execution using rlang::abort.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFORMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate First Order Region (FOR) Processing Method — seasonder_validateFORMethod","title":"Validate First Order Region (FOR) Processing Method — seasonder_validateFORMethod","text":"function checks whether specified method First Order Region () detection supported. unsupported method provided, logs error aborts execution.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFORMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate First Order Region (FOR) Processing Method — seasonder_validateFORMethod","text":"","code":"seasonder_validateFORMethod(method)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFORMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate First Order Region (FOR) Processing Method — seasonder_validateFORMethod","text":"method character string specifying processing method. Currently, \"SeaSonde\" supported.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFORMethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate First Order Region (FOR) Processing Method — seasonder_validateFORMethod","text":"function returns input method invisibly valid.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFORMethod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate First Order Region (FOR) Processing Method — seasonder_validateFORMethod","text":"function verifies method argument valid. method recognized, error raised using seasonder_logAndAbort. Supported Methods: \"SeaSonde\": Implements first-order region detection based CODAR's SeaSonde methodology.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFORMethod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate First Order Region (FOR) Processing Method — seasonder_validateFORMethod","text":"","code":"if (FALSE) { # \\dontrun{ # Validate a correct method seasonder_validateFORMethod(\"SeaSonde\")  # Attempting to use an invalid method will trigger an error seasonder_validateFORMethod(\"InvalidMethod\") # This will abort execution } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFOR_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate First Order Region (FOR) Parameters — seasonder_validateFOR_parameters","title":"Validate First Order Region (FOR) Parameters — seasonder_validateFOR_parameters","text":"function validates assigns default values parameters used defining First Order Region () SeaSondeR cross-spectral object. ensures necessary parameters present assigns appropriate defaults values missing.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFOR_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate First Order Region (FOR) Parameters — seasonder_validateFOR_parameters","text":"","code":"seasonder_validateFOR_parameters(   seasonder_cs_obj,   FOR_parameters,   method = \"SeaSonde\" )"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFOR_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate First Order Region (FOR) Parameters — seasonder_validateFOR_parameters","text":"seasonder_cs_obj SeaSondeRCS object containing metadata Doppler spectrum. FOR_parameters named list containing parameters first-order region detection. method character string specifying validation method. Default \"SeaSonde\". Currently, \"SeaSonde\" supported.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFOR_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate First Order Region (FOR) Parameters — seasonder_validateFOR_parameters","text":"named list containing validated completed parameters.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFOR_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate First Order Region (FOR) Parameters — seasonder_validateFOR_parameters","text":"function validates parameters assigns default values necessary. selected method \"SeaSonde\", function ensures parameter defined , missing, assigns default value based seasonder_defaultFOR_parameters. parameters validated include: nsm (Doppler Smoothing): Number points used spectral smoothing. fdown (Peak Power Dropoff): Defines far peak power algorithm descends searching null. flim (Null Peak Power): Specifies power threshold identifying first-order region. noisefact (Signal Noise): Threshold noise floor spectral bin must exceed considered first-order. currmax (Maximum Velocity): Maximum radial velocity allowed first-order region. reject_distant_bragg: Logical flag indicating whether reject Bragg regions distant central Bragg frequency. reject_noise_ionospheric: Logical flag indicating whether reject Bragg regions affected ionospheric noise. reject_noise_ionospheric_threshold: Threshold (dB) rejecting first-order regions based noise contamination. reference_noise_normalized_limits: Estimated reference noise range normalized Doppler frequency, computed using seasonder_estimateReferenceNoiseNormalizedLimits.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/seasonder_validateFOR_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate First Order Region (FOR) Parameters — seasonder_validateFOR_parameters","text":"","code":"if (FALSE) { # \\dontrun{ # Validate and complete FOR parameters for a SeaSondeRCS object validated_params <- seasonder_validateFOR_parameters(cs_obj, list(fdown = 12)) print(validated_params) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/self_spectra_to_dB.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Self-Spectra Power to dB — self_spectra_to_dB","title":"Convert Self-Spectra Power to dB — self_spectra_to_dB","text":"function converts self-spectra power values linear scale decibels (dB). transformation considers receiver gain adjust power measurements accordingly.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/self_spectra_to_dB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Self-Spectra Power to dB — self_spectra_to_dB","text":"","code":"self_spectra_to_dB(spectrum_values, receiver_gain)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/self_spectra_to_dB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Self-Spectra Power to dB — self_spectra_to_dB","text":"spectrum_values numeric vector. power values linear scale. receiver_gain numeric scalar. receiver gain decibels (dB).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/self_spectra_to_dB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Self-Spectra Power to dB — self_spectra_to_dB","text":"numeric vector power values decibels (dB).","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/self_spectra_to_dB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Self-Spectra Power to dB — self_spectra_to_dB","text":"conversion follows equation: $$dB = 10 \\log_{10}(|P|) - G$$ : \\( dB \\) power decibels, \\( P \\) self-spectra power linear scale, \\( G \\) receiver gain decibels. Absolute values power used ensure valid logarithmic calculations.","code":""},{"path":[]},{"path":"https://gofuvi.github.io/SeaSondeR/reference/self_spectra_to_dB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Self-Spectra Power to dB — self_spectra_to_dB","text":"","code":"if (FALSE) { # \\dontrun{ # Convert self-spectra power to dB spectrum_vals <- c(1e-10, 1e-8, 1e-6) receiver_gain <- -34.2 dB_vals <- self_spectra_to_dB(spectrum_vals, receiver_gain) print(dB_vals) } # }"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_AmplitudeFactors.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate AmplitudeFactors Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AmplitudeFactors","title":"Validate AmplitudeFactors Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AmplitudeFactors","text":"function validates provided AmplitudeFactors numeric vector length 2.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_AmplitudeFactors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate AmplitudeFactors Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AmplitudeFactors","text":"","code":"validate_SeaSondeRAPM_AmplitudeFactors(factors)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_AmplitudeFactors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate AmplitudeFactors Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AmplitudeFactors","text":"factors numeric vector validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_AmplitudeFactors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate AmplitudeFactors Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AmplitudeFactors","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_AntennaBearing.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate AntennaBearing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AntennaBearing","title":"Validate AntennaBearing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AntennaBearing","text":"function validates provided AntennaBearing numeric value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_AntennaBearing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate AntennaBearing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AntennaBearing","text":"","code":"validate_SeaSondeRAPM_AntennaBearing(bearing)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_AntennaBearing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate AntennaBearing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AntennaBearing","text":"bearing numeric value validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_AntennaBearing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate AntennaBearing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_AntennaBearing","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_BEAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate BEAR Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BEAR","title":"Validate BEAR Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BEAR","text":"function validates provided BEAR numeric vector length matches number columns calibration_matrix given SeaSondeRAPM object. also validates bearings -180 180 degrees.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_BEAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate BEAR Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BEAR","text":"","code":"validate_SeaSondeRAPM_BEAR(vector, seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_BEAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate BEAR Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BEAR","text":"vector numeric vector validated. seasonde_apm_obj SeaSondeRAPM object compatibility check.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_BEAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate BEAR Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BEAR","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_BearingResolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate BearingResolution Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BearingResolution","title":"Validate BearingResolution Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BearingResolution","text":"function validates provided BearingResolution numeric value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_BearingResolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate BearingResolution Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BearingResolution","text":"","code":"validate_SeaSondeRAPM_BearingResolution(resolution)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_BearingResolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate BearingResolution Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BearingResolution","text":"resolution numeric value validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_BearingResolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate BearingResolution Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_BearingResolution","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_CommentLine.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate CommentLine Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CommentLine","title":"Validate CommentLine Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CommentLine","text":"function validates provided CommentLine character string.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_CommentLine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate CommentLine Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CommentLine","text":"","code":"validate_SeaSondeRAPM_CommentLine(comment)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_CommentLine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate CommentLine Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CommentLine","text":"comment character string validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_CommentLine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate CommentLine Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CommentLine","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_CreateTimeStamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate CreateTimeStamp Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CreateTimeStamp","title":"Validate CreateTimeStamp Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CreateTimeStamp","text":"function validates provided CreateTimeStamp POSIXct Date object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_CreateTimeStamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate CreateTimeStamp Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CreateTimeStamp","text":"","code":"validate_SeaSondeRAPM_CreateTimeStamp(timestamp)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_CreateTimeStamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate CreateTimeStamp Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CreateTimeStamp","text":"timestamp Date object validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_CreateTimeStamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate CreateTimeStamp Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_CreateTimeStamp","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Creator.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Creator Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Creator","title":"Validate Creator Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Creator","text":"function validates provided Creator character string.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Creator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Creator Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Creator","text":"","code":"validate_SeaSondeRAPM_Creator(creator)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Creator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Creator Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Creator","text":"creator character string validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Creator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Creator Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Creator","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_FileID.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate FileID Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileID","title":"Validate FileID Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileID","text":"function validates provided FileID unique character string.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_FileID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate FileID Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileID","text":"","code":"validate_SeaSondeRAPM_FileID(id)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_FileID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate FileID Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileID","text":"id unique character string validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_FileID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate FileID Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileID","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_FileName.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate FileName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileName","title":"Validate FileName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileName","text":"function validates provided FileName character string.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_FileName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate FileName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileName","text":"","code":"validate_SeaSondeRAPM_FileName(file_name)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_FileName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate FileName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileName","text":"file_name character string validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_FileName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate FileName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_FileName","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_PhaseCorrections.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate PhaseCorrections Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_PhaseCorrections","title":"Validate PhaseCorrections Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_PhaseCorrections","text":"function validates provided PhaseCorrections attribute numeric vector length 2.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_PhaseCorrections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate PhaseCorrections Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_PhaseCorrections","text":"","code":"validate_SeaSondeRAPM_PhaseCorrections(corrections)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_PhaseCorrections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate PhaseCorrections Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_PhaseCorrections","text":"corrections numeric vector validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_PhaseCorrections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate PhaseCorrections Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_PhaseCorrections","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_ProcessingSteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate ProcessingSteps Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_ProcessingSteps","title":"Validate ProcessingSteps Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_ProcessingSteps","text":"function validates provided ProcessingSteps character vector.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_ProcessingSteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate ProcessingSteps Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_ProcessingSteps","text":"","code":"validate_SeaSondeRAPM_ProcessingSteps(steps)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_ProcessingSteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate ProcessingSteps Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_ProcessingSteps","text":"steps character vector validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_ProcessingSteps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate ProcessingSteps Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_ProcessingSteps","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_SiteName.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate SiteName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteName","title":"Validate SiteName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteName","text":"function validates provided SiteName character string.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_SiteName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate SiteName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteName","text":"","code":"validate_SeaSondeRAPM_SiteName(site_name)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_SiteName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate SiteName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteName","text":"site_name character string validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_SiteName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate SiteName Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteName","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_SiteOrigin.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate SiteOrigin Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteOrigin","title":"Validate SiteOrigin Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteOrigin","text":"function validates provided SiteOrigin numeric vector length 2.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_SiteOrigin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate SiteOrigin Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteOrigin","text":"","code":"validate_SeaSondeRAPM_SiteOrigin(site_origin)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_SiteOrigin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate SiteOrigin Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteOrigin","text":"site_origin numeric vector validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_SiteOrigin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate SiteOrigin Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_SiteOrigin","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Smoothing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Smoothing","title":"Validate Smoothing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Smoothing","text":"function validates provided Smoothing numeric value.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Smoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Smoothing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Smoothing","text":"","code":"validate_SeaSondeRAPM_Smoothing(smoothing)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Smoothing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Smoothing","text":"smoothing numeric value validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Smoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Smoothing Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Smoothing","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_StationCode.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate StationCode Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_StationCode","title":"Validate StationCode Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_StationCode","text":"function validates provided StationCode empty character string 4-character string length 1.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_StationCode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate StationCode Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_StationCode","text":"","code":"validate_SeaSondeRAPM_StationCode(code)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_StationCode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate StationCode Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_StationCode","text":"code character string validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_StationCode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate StationCode Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_StationCode","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Type.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Type Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Type","title":"Validate Type Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Type","text":"function validates provided Type character string.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Type Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Type","text":"","code":"validate_SeaSondeRAPM_Type(type)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Type Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Type","text":"type character string validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_Type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Type Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_Type","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_quality_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate quality_matrix Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_quality_matrix","title":"Validate quality_matrix Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_quality_matrix","text":"function validates provided quality_matrix 3-row complex matrix. also checks number columns matches calibration_matrix given SeaSondeRAPM object.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_quality_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate quality_matrix Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_quality_matrix","text":"","code":"validate_SeaSondeRAPM_quality_matrix(matrix, seasonde_apm_obj)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_quality_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate quality_matrix Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_quality_matrix","text":"matrix matrix validated. seasonde_apm_obj SeaSondeRAPM object compatibility check.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRAPM_quality_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate quality_matrix Attribute for a SeaSondeRAPM Object — validate_SeaSondeRAPM_quality_matrix","text":"Returns TRUE validation passes.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRCS_ProcessingSteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate ProcessingSteps Attribute for a SeaSondeRCS Object — validate_SeaSondeRCS_ProcessingSteps","title":"Validate ProcessingSteps Attribute for a SeaSondeRCS Object — validate_SeaSondeRCS_ProcessingSteps","text":"function validates provided ProcessingSteps character vector.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRCS_ProcessingSteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate ProcessingSteps Attribute for a SeaSondeRCS Object — validate_SeaSondeRCS_ProcessingSteps","text":"","code":"validate_SeaSondeRCS_ProcessingSteps(steps)"},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRCS_ProcessingSteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate ProcessingSteps Attribute for a SeaSondeRCS Object — validate_SeaSondeRCS_ProcessingSteps","text":"steps character vector validated.","code":""},{"path":"https://gofuvi.github.io/SeaSondeR/reference/validate_SeaSondeRCS_ProcessingSteps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate ProcessingSteps Attribute for a SeaSondeRCS Object — validate_SeaSondeRCS_ProcessingSteps","text":"Returns TRUE validation passes.","code":""}]
