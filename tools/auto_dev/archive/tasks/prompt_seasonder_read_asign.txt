Quiero desarrollar una función llamada seasonder_read_asign que lea esto de una conexión



asgn
ʼ
Sint32 – Bit array of the sign of the self spectra values. This size in bytes is 3 times
nDoppler Cells divided by 8 bits. The reduced dB values are all positive while the
sign of the source self spectra values are stored here. Typically only A3 should
have negative values which is flag from CSPro to indicate removal of ship/
interference.
A bit value of one indicates that the corresponding complex value should be
negative.
cs1a doppler cell 0 is stored at bit 0 of byte 0
cs1a doppler cell 1 is stored at bit 1 of byte 0
cs1a doppler cell 8 is stored at bit 0 of byte 1 in this array.
cs1a nDopplers – 1 is stored at bit 7 of byte nDopplers/8-1 (given that nDopplers
is a multiple of eight)
cs2a doppler cell 0 is stored at bit 0 of byte nDopplers/8
cs2a doppler cell 1 is stored at bit 1 of byte nDopplers/8
cs3a doppler cell 0 is stored at bit 0 of byte nDopplers/8*2

Puedes inspirarte en esto

describe("seasonder_read_csign", {

  it("returns a list with 6 groups for valid input with nDopplers = 8", {
    # For nDopplers = 8, key$size should be 6 bytes (6 * (8/8) = 6)
    key <- list(key = "csign", size = 6)
    # Prepare a raw vector of 6 bytes with known values
    raw_data <- as.raw(c(0xFF, 0x00, 0xA5, 0x5A, 0xCC, 0x33))
    con <- rawConnection(raw_data, "rb")
    on.exit(close(con), add = TRUE)

    result <- seasonder_read_csign(con, key)

    # Check that the result is a list and has 6 elements
    expect_true(is.list(result), info = "The function should return a list")
    expect_equal(length(result), 6, info = "The result list should have 6 elements")

    # Verify that the list names match the expected groups
    expected_names <- c("C13r", "C13i", "C23r", "C23i", "C12r", "C12i")
    expect_equal(names(result), expected_names,
                 info = "The list names should be C13r, C13i, C23r, C23i, C12r, C12i")

    # For nDopplers = 8, each group comes from 1 byte so each vector must have 8 bits
    for (group in result) {
      expect_equal(length(group), 8,
                   info = "Each group should have 8 bits when nDopplers = 8")
      expect_true(all(group %in% c(0, 1)),
                  info = "Each bit in a group should be either 0 or 1")
    }

    # Verify individual groups by comparing with rawToBits conversion of the corresponding byte(s)
    expected_C13r <- as.integer(rawToBits(raw_data[1]))
    expect_equal(result$C13r, expected_C13r,
                 info = "C13r should match the bit conversion of the first byte")

    expected_C13i <- as.integer(rawToBits(raw_data[2]))
    expect_equal(result$C13i, expected_C13i,
                 info = "C13i should match the bit conversion of the second byte")
  })

  it("properly splits input into groups for nDopplers = 16", {
    # For nDopplers = 16, key$size should be 12 bytes (6 * (16/8) = 12)
    key <- list(key = "csign", size = 12)
    # Prepare a raw vector with 12 bytes (2 bytes per group)
    raw_data <- as.raw(c(
      0xFF, 0x00,   # C13r group: 2 bytes
      0xAA, 0x55,   # C13i group: 2 bytes
      0x11, 0x22,   # C23r group: 2 bytes
      0x33, 0x44,   # C23i group: 2 bytes
      0x55, 0x66,   # C12r group: 2 bytes
      0x77, 0x88    # C12i group: 2 bytes
    ))
    con <- rawConnection(raw_data, "rb")
    on.exit(close(con), add = TRUE)

    result <- seasonder_read_csign(con, key)

    # Each group should have 2 bytes worth of bits, i.e., 16 bits in total.
    for (group in result) {
      expect_equal(length(group), 16,
                   info = "Each group should have 16 bits when nDopplers = 16")
      expect_true(all(group %in% c(0, 1)),
                  info = "Each bit in a group should be either 0 or 1")
    }

    # Verify that C13r is the concatenation of the bit conversions for its 2 bytes
    expected_C13r <- c(as.integer(rawToBits(raw_data[1])),
                       as.integer(rawToBits(raw_data[2])))
    expect_equal(result$C13r, expected_C13r,
                 info = "C13r should correctly combine bits from its two bytes")
  })

  it("errors when the connection provides fewer bytes than key$size", {
    # Setup a scenario where the connection returns fewer bytes than required
    key <- list(key = "csign", size = 6)
    # Provide only 4 bytes intentionally
    raw_data <- as.raw(c(0xFF, 0x00, 0xA5, 0x5A))
    con <- rawConnection(raw_data, "rb")
    on.exit(close(con), add = TRUE)

    expect_error(
      seasonder_read_csign(con, key),
      regexp = "([Nn]ot enough|insufficient)",
      info = "The function should error when the connection does not provide enough bytes"
    )
  })
})


#' Read Complex Spectral Sign Information from a Connection
#'
#' This function reads a raw binary stream from a provided connection, expecting a specific format
#' that contains the sign bits for complex spectral values. The data is divided into 6 groups corresponding
#' to: \code{C13r}, \code{C13i}, \code{C23r}, \code{C23i}, \code{C12r}, and \code{C12i}.
#'
#' @param connection A binary connection to read raw bytes from.
#' @param key A list containing:
#'   \describe{
#'     \item{size}{An integer specifying the total number of bytes to be read. It must equal 6 times the number
#'       of bytes per group.}
#'     \item{key}{A string identifier (expected to be \code{"csign"}).}
#'   }
#'
#' @return A named list of 6 vectors. Each vector represents one group (e.g., \code{C13r}, \code{C13i}, etc.)
#'   and contains integers (0 or 1) corresponding to the bits (in little-endian order) extracted from the raw data.
#'
#' @details The function performs the following steps:
#'   \itemize{
#'     \item Reads \code{key$size} bytes from the specified connection.
#'     \item Checks if enough bytes were read.
#'     \item Ensures that the total number of bytes is divisible by 6, allowing equal distribution among the groups.
#'     \item Splits the raw byte vector into 6 groups based on the calculated number of bytes per group.
#'     \item Converts each byte into its 8-bit representation (using \code{rawToBits}) and flattens the result.
#'   }
#'
#' @importFrom utils readBin
#'
#' @examples
#' \dontrun{
#' # Create a raw connection with sample data:
#' con <- rawConnection(as.raw(c(0x42, 0x29, 0xa3, 0xd7, 0xFF, 0x00)))
#' key <- list(size = 6, key = "csign")
#' result <- seasonder_read_csign(con, key)
#' print(result)
#' close(con)
#' }
seasonder_read_csign <- function(connection, key) {
  # Store the number of bytes to read based on the key list.
  total_bytes <- key$size

  # Read the specified number of raw bytes from the connection.
  raw_data <- readBin(connection, what = "raw", n = total_bytes)

  # Check if the actual number of bytes read is less than expected.
  if (length(raw_data) < total_bytes) {
    stop("Not enough bytes in connection")
  }

  # Validate that the total number of bytes is divisible by 6,
  # which is necessary to form 6 equal-sized groups corresponding to:
  # C13r, C13i, C23r, C23i, C12r, and C12i.
  if (total_bytes %% 6 != 0) {
    stop("Invalid total size: not divisible by 6")
  }

  # Calculate how many bytes correspond to each group.
  group_bytes_count <- total_bytes / 6

  # Define the names of the 6 groups in the expected order.
  group_names <- c("C13r", "C13i", "C23r", "C23i", "C12r", "C12i")

  # Initialize the result list with names set for each group.
  result <- setNames(vector("list", length(group_names)), group_names)

  # Loop through each group to extract and process the relevant bytes.
  for (i in seq_along(group_names)) {
    # Calculate the starting and ending indices for the current group's slice.
    start_index <- (i - 1) * group_bytes_count + 1
    end_index <- i * group_bytes_count

    # Extract the subset of raw bytes corresponding to the current group.
    group_raw <- raw_data[start_index:end_index]

    # Convert each byte in the group to its 8-bit binary representation.
    # rawToBits converts a byte to a vector of 8 bits (in little-endian order).
    # lapply applies this conversion to each byte, and unlist flattens the list to a vector.
    group_bits <- unlist(lapply(group_raw, function(byte) as.integer(rawToBits(byte))))

    # Store the converted bits in the result list for the current group.
    result[[i]] <- group_bits
  }

  # Return the list containing vectors of bits for each of the 6 groups.
  return(result)
}


