Start function validate_SeaSondeRAPM_AmplitudeFactors
\name{validate_SeaSondeRAPM_AmplitudeFactors}
\alias{validate_SeaSondeRAPM_AmplitudeFactors}
\title{Validate AmplitudeFactors Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_AmplitudeFactors(factors)
}
\arguments{
\item{factors}{The numeric vector to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided AmplitudeFactors is a numeric vector of length 2.
}
End function validate_SeaSondeRAPM_AmplitudeFactors

Start function validate_SeaSondeRAPM_AntennaBearing
\name{validate_SeaSondeRAPM_AntennaBearing}
\alias{validate_SeaSondeRAPM_AntennaBearing}
\title{Validate AntennaBearing Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_AntennaBearing(bearing)
}
\arguments{
\item{bearing}{The numeric value to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided AntennaBearing is a numeric value.
}
End function validate_SeaSondeRAPM_AntennaBearing

Start function validate_SeaSondeRAPM_BEAR
\name{validate_SeaSondeRAPM_BEAR}
\alias{validate_SeaSondeRAPM_BEAR}
\title{Validate BEAR Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_BEAR(vector, seasonde_apm_obj)
}
\arguments{
\item{vector}{The numeric vector to be validated.}

\item{seasonde_apm_obj}{The SeaSondeRAPM object for compatibility check.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided BEAR is a numeric vector and if its length
matches the number of columns in the calibration_matrix of the given SeaSondeRAPM object.
It also validates that the bearings are between -180 and 180 degrees.
}
End function validate_SeaSondeRAPM_BEAR

Start function validate_SeaSondeRAPM_BearingResolution
\name{validate_SeaSondeRAPM_BearingResolution}
\alias{validate_SeaSondeRAPM_BearingResolution}
\title{Validate BearingResolution Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_BearingResolution(resolution)
}
\arguments{
\item{resolution}{The numeric value to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided BearingResolution is a numeric value.
}
End function validate_SeaSondeRAPM_BearingResolution

Start function validate_SeaSondeRAPM_CommentLine
\name{validate_SeaSondeRAPM_CommentLine}
\alias{validate_SeaSondeRAPM_CommentLine}
\title{Validate CommentLine Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_CommentLine(comment)
}
\arguments{
\item{comment}{The character string to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided CommentLine is a character string.
}
End function validate_SeaSondeRAPM_CommentLine

Start function validate_SeaSondeRAPM_CreateTimeStamp
\name{validate_SeaSondeRAPM_CreateTimeStamp}
\alias{validate_SeaSondeRAPM_CreateTimeStamp}
\title{Validate CreateTimeStamp Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_CreateTimeStamp(timestamp)
}
\arguments{
\item{timestamp}{The Date object to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided CreateTimeStamp is a POSIXct Date object.
}
End function validate_SeaSondeRAPM_CreateTimeStamp

Start function validate_SeaSondeRAPM_Creator
\name{validate_SeaSondeRAPM_Creator}
\alias{validate_SeaSondeRAPM_Creator}
\title{Validate Creator Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_Creator(creator)
}
\arguments{
\item{creator}{The character string to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided Creator is a character string.
}
End function validate_SeaSondeRAPM_Creator

Start function validate_SeaSondeRAPM_FileID
\name{validate_SeaSondeRAPM_FileID}
\alias{validate_SeaSondeRAPM_FileID}
\title{Validate FileID Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_FileID(id)
}
\arguments{
\item{id}{The unique character string to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided FileID is a unique character string.
}
End function validate_SeaSondeRAPM_FileID

Start function validate_SeaSondeRAPM_FileName
\name{validate_SeaSondeRAPM_FileName}
\alias{validate_SeaSondeRAPM_FileName}
\title{Validate FileName Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_FileName(file_name)
}
\arguments{
\item{file_name}{The character string to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided FileName is a character string.
}
End function validate_SeaSondeRAPM_FileName

Start function validate_SeaSondeRAPM_PhaseCorrections
\name{validate_SeaSondeRAPM_PhaseCorrections}
\alias{validate_SeaSondeRAPM_PhaseCorrections}
\title{Validate PhaseCorrections Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_PhaseCorrections(corrections)
}
\arguments{
\item{corrections}{The numeric vector to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided PhaseCorrections attribute is a numeric
vector of length 2.
}
End function validate_SeaSondeRAPM_PhaseCorrections

Start function validate_SeaSondeRAPM_ProcessingSteps
\name{validate_SeaSondeRAPM_ProcessingSteps}
\alias{validate_SeaSondeRAPM_ProcessingSteps}
\title{Validate ProcessingSteps Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_ProcessingSteps(steps)
}
\arguments{
\item{steps}{The character vector to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided ProcessingSteps is a character vector.
}
End function validate_SeaSondeRAPM_ProcessingSteps

Start function validate_SeaSondeRAPM_quality_matrix
\name{validate_SeaSondeRAPM_quality_matrix}
\alias{validate_SeaSondeRAPM_quality_matrix}
\title{Validate quality_matrix Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_quality_matrix(matrix, seasonde_apm_obj)
}
\arguments{
\item{matrix}{The matrix to be validated.}

\item{seasonde_apm_obj}{The SeaSondeRAPM object for compatibility check.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided quality_matrix is a 2-row complex matrix.
It also checks if the number of columns matches that of the calibration_matrix in the given SeaSondeRAPM object.
}
End function validate_SeaSondeRAPM_quality_matrix

Start function validate_SeaSondeRAPM_SiteName
\name{validate_SeaSondeRAPM_SiteName}
\alias{validate_SeaSondeRAPM_SiteName}
\title{Validate SiteName Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_SiteName(site_name)
}
\arguments{
\item{site_name}{The character string to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided SiteName is a character string.
}
End function validate_SeaSondeRAPM_SiteName

Start function validate_SeaSondeRAPM_SiteOrigin
\name{validate_SeaSondeRAPM_SiteOrigin}
\alias{validate_SeaSondeRAPM_SiteOrigin}
\title{Validate SiteOrigin Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_SiteOrigin(site_origin)
}
\arguments{
\item{site_origin}{The numeric vector to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided SiteOrigin is a numeric vector of length 2.
}
End function validate_SeaSondeRAPM_SiteOrigin

Start function validate_SeaSondeRAPM_Smoothing
\name{validate_SeaSondeRAPM_Smoothing}
\alias{validate_SeaSondeRAPM_Smoothing}
\title{Validate Smoothing Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_Smoothing(smoothing)
}
\arguments{
\item{smoothing}{The numeric value to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided Smoothing is a numeric value.
}
End function validate_SeaSondeRAPM_Smoothing

Start function validate_SeaSondeRAPM_StationCode
\name{validate_SeaSondeRAPM_StationCode}
\alias{validate_SeaSondeRAPM_StationCode}
\title{Validate StationCode Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_StationCode(code)
}
\arguments{
\item{code}{The character string to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided StationCode is an empty character string or a 4-character string of length 1.
}
End function validate_SeaSondeRAPM_StationCode

Start function validate_SeaSondeRAPM_Type
\name{validate_SeaSondeRAPM_Type}
\alias{validate_SeaSondeRAPM_Type}
\title{Validate Type Attribute for a SeaSondeRAPM Object}
\usage{
validate_SeaSondeRAPM_Type(type)
}
\arguments{
\item{type}{The character string to be validated.}
}
\value{
Returns TRUE if the validation passes.
}
\description{
This function validates if the provided Type is a character string.
}
End function validate_SeaSondeRAPM_Type

Start function seasonder_validateAttributesSeaSondeRAPM
\name{seasonder_validateAttributesSeaSondeRAPM}
\alias{seasonder_validateAttributesSeaSondeRAPM}
\title{Validate Attributes for a SeaSondeRAPM Object}
\usage{
seasonder_validateAttributesSeaSondeRAPM(seasonde_apm_obj)
}
\arguments{
\item{seasonde_apm_obj}{A SeaSondeRAPM object whose attributes are to be validated.}
}
\value{
TRUE if all attributes are valid. The function will stop execution and display an error message if any of the attributes are invalid.
}
\description{
This function validates the attributes of a given SeaSondeRAPM object to ensure they meet the required specifications.
}
\details{
The function performs validation on the following attributes of the SeaSondeRAPM object:
\itemize{
\item quality_matrix
\item BEAR
\item Type
\item Creator
\item SiteName
\item SiteOrigin
\item FileName
\item CreateTimeStamp
\item ProcessingSteps
\item AmplitudeFactors
\item AntennaBearing
\item StationCode
\item BearingResolution
\item Smoothing
\item CommentLine
\item FileID
\item PhaseCorrections
}

It internally calls specific validation functions for each of these attributes. If any of the attributes are found to be invalid, the function will stop execution and display an error message.

For more details on the attributes, see \code{\link{seasonder_initializeAttributesSeaSondeRAPM}}.
}
\examples{
# Create a mock SeaSondeRAPM object with valid attributes
mock_matrix <- matrix(complex(real = c(1, 2), imaginary = c(3, 4)), nrow = 2)
mock_apm <- seasonder_createSeaSondeRAPM(mock_matrix)

# Validate attributes
valid <- seasonder_validateAttributesSeaSondeRAPM(mock_apm)
print(valid)  # Should print TRUE if all attributes are valid

}
\seealso{
\code{\link{validate_SeaSondeRAPM_quality_matrix}},
\code{\link{validate_SeaSondeRAPM_BEAR}},
\code{\link{validate_SeaSondeRAPM_Type}},
\code{\link{validate_SeaSondeRAPM_Creator}},
\code{\link{validate_SeaSondeRAPM_SiteName}},
\code{\link{validate_SeaSondeRAPM_SiteOrigin}},
\code{\link{validate_SeaSondeRAPM_FileName}},
\code{\link{validate_SeaSondeRAPM_CreateTimeStamp}},
\code{\link{validate_SeaSondeRAPM_ProcessingSteps}},
\code{\link{validate_SeaSondeRAPM_AmplitudeFactors}},
\code{\link{validate_SeaSondeRAPM_AntennaBearing}},
\code{\link{validate_SeaSondeRAPM_StationCode}},
\code{\link{validate_SeaSondeRAPM_BearingResolution}},
\code{\link{validate_SeaSondeRAPM_Smoothing}},
\code{\link{validate_SeaSondeRAPM_CommentLine}},
\code{\link{validate_SeaSondeRAPM_FileID}},
\code{\link{validate_SeaSondeRAPM_PhaseCorrections}}
}
End function seasonder_validateAttributesSeaSondeRAPM

Start function seasonder_validateCalibrationMatrixSeaSondeRAPM
\name{seasonder_validateCalibrationMatrixSeaSondeRAPM}
\alias{seasonder_validateCalibrationMatrixSeaSondeRAPM}
\title{Validate Calibration Matrix for a SeaSondeRAPM Object}
\usage{
seasonder_validateCalibrationMatrixSeaSondeRAPM(matrix)
}
\arguments{
\item{matrix}{A 2 x b complex matrix for calibration, where b is the number of bearings.}
}
\value{
TRUE if the matrix is valid. The function will stop execution and display an error message if the matrix is invalid.
}
\description{
This function validates the input calibration_matrix to ensure it meets the required specifications
for use in a SeaSondeRAPM object.
}
\details{
The function performs the following validation checks:
\enumerate{
\item Confirms that the input is a matrix.
\item Verifies that the matrix has exactly two rows.
\item Checks that the matrix contains only complex numbers.
}

If any of these validation steps fail, the function will log a fatal error and stop the execution using \code{rlang::abort}.
}
\examples{
# Invalid matrix: not a matrix
invalid_matrix1 <- c(1, 2)
# This will cause an error
# seasonder_validateCalibrationMatrixSeaSondeRAPM(invalid_matrix1)

# Invalid matrix: not two rows
invalid_matrix2 <- matrix(complex(real = c(1, 2, 3), imaginary = c(4, 5, 6)), nrow = 3)
# This will cause an error
# seasonder_validateCalibrationMatrixSeaSondeRAPM(invalid_matrix2)

# Valid matrix
valid_matrix <- matrix(complex(real = c(1, 2), imaginary = c(3, 4)), nrow = 2)
seasonder_validateCalibrationMatrixSeaSondeRAPM(valid_matrix)  # No error

}
\seealso{
\code{\link{seasonder_createSeaSondeRAPM}}
}
End function seasonder_validateCalibrationMatrixSeaSondeRAPM

